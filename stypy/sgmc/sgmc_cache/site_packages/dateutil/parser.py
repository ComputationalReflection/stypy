
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: # -*- coding: utf-8 -*-
2: '''
3: This module offers a generic date/time string parser which is able to parse
4: most known formats to represent a date and/or time.
5: 
6: This module attempts to be forgiving with regards to unlikely input formats,
7: returning a datetime object even for dates which are ambiguous. If an element
8: of a date/time stamp is omitted, the following rules are applied:
9: - If AM or PM is left unspecified, a 24-hour clock is assumed, however, an hour
10:   on a 12-hour clock (``0 <= hour <= 12``) *must* be specified if AM or PM is
11:   specified.
12: - If a time zone is omitted, a timezone-naive datetime is returned.
13: 
14: If any other elements are missing, they are taken from the
15: :class:`datetime.datetime` object passed to the parameter ``default``. If this
16: results in a day number exceeding the valid number of days per month, the
17: value falls back to the end of the month.
18: 
19: Additional resources about date/time string formats can be found below:
20: 
21: - `A summary of the international standard date and time notation
22:   <http://www.cl.cam.ac.uk/~mgk25/iso-time.html>`_
23: - `W3C Date and Time Formats <http://www.w3.org/TR/NOTE-datetime>`_
24: - `Time Formats (Planetary Rings Node) <http://pds-rings.seti.org/tools/time_formats.html>`_
25: - `CPAN ParseDate module
26:   <http://search.cpan.org/~muir/Time-modules-2013.0912/lib/Time/ParseDate.pm>`_
27: - `Java SimpleDateFormat Class
28:   <https://docs.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html>`_
29: '''
30: from __future__ import unicode_literals
31: 
32: import datetime
33: import string
34: import time
35: import collections
36: import re
37: from io import StringIO
38: from calendar import monthrange
39: 
40: from six import text_type, binary_type, integer_types
41: 
42: from . import relativedelta
43: from . import tz
44: 
45: __all__ = ["parse", "parserinfo"]
46: 
47: 
48: class _timelex(object):
49:     # Fractional seconds are sometimes split by a comma
50:     _split_decimal = re.compile("([.,])")
51: 
52:     def __init__(self, instream):
53:         if isinstance(instream, binary_type):
54:             instream = instream.decode()
55: 
56:         if isinstance(instream, text_type):
57:             instream = StringIO(instream)
58: 
59:         if getattr(instream, 'read', None) is None:
60:             raise TypeError('Parser must be a string or character stream, not '
61:                             '{itype}'.format(itype=instream.__class__.__name__))
62: 
63:         self.instream = instream
64:         self.charstack = []
65:         self.tokenstack = []
66:         self.eof = False
67: 
68:     def get_token(self):
69:         '''
70:         This function breaks the time string into lexical units (tokens), which
71:         can be parsed by the parser. Lexical units are demarcated by changes in
72:         the character set, so any continuous string of letters is considered
73:         one unit, any continuous string of numbers is considered one unit.
74: 
75:         The main complication arises from the fact that dots ('.') can be used
76:         both as separators (e.g. "Sep.20.2009") or decimal points (e.g.
77:         "4:30:21.447"). As such, it is necessary to read the full context of
78:         any dot-separated strings before breaking it into tokens; as such, this
79:         function maintains a "token stack", for when the ambiguous context
80:         demands that multiple tokens be parsed at once.
81:         '''
82:         if self.tokenstack:
83:             return self.tokenstack.pop(0)
84: 
85:         seenletters = False
86:         token = None
87:         state = None
88: 
89:         while not self.eof:
90:             # We only realize that we've reached the end of a token when we
91:             # find a character that's not part of the current token - since
92:             # that character may be part of the next token, it's stored in the
93:             # charstack.
94:             if self.charstack:
95:                 nextchar = self.charstack.pop(0)
96:             else:
97:                 nextchar = self.instream.read(1)
98:                 while nextchar == '\x00':
99:                     nextchar = self.instream.read(1)
100: 
101:             if not nextchar:
102:                 self.eof = True
103:                 break
104:             elif not state:
105:                 # First character of the token - determines if we're starting
106:                 # to parse a word, a number or something else.
107:                 token = nextchar
108:                 if self.isword(nextchar):
109:                     state = 'a'
110:                 elif self.isnum(nextchar):
111:                     state = '0'
112:                 elif self.isspace(nextchar):
113:                     token = ' '
114:                     break  # emit token
115:                 else:
116:                     break  # emit token
117:             elif state == 'a':
118:                 # If we've already started reading a word, we keep reading
119:                 # letters until we find something that's not part of a word.
120:                 seenletters = True
121:                 if self.isword(nextchar):
122:                     token += nextchar
123:                 elif nextchar == '.':
124:                     token += nextchar
125:                     state = 'a.'
126:                 else:
127:                     self.charstack.append(nextchar)
128:                     break  # emit token
129:             elif state == '0':
130:                 # If we've already started reading a number, we keep reading
131:                 # numbers until we find something that doesn't fit.
132:                 if self.isnum(nextchar):
133:                     token += nextchar
134:                 elif nextchar == '.' or (nextchar == ',' and len(token) >= 2):
135:                     token += nextchar
136:                     state = '0.'
137:                 else:
138:                     self.charstack.append(nextchar)
139:                     break  # emit token
140:             elif state == 'a.':
141:                 # If we've seen some letters and a dot separator, continue
142:                 # parsing, and the tokens will be broken up later.
143:                 seenletters = True
144:                 if nextchar == '.' or self.isword(nextchar):
145:                     token += nextchar
146:                 elif self.isnum(nextchar) and token[-1] == '.':
147:                     token += nextchar
148:                     state = '0.'
149:                 else:
150:                     self.charstack.append(nextchar)
151:                     break  # emit token
152:             elif state == '0.':
153:                 # If we've seen at least one dot separator, keep going, we'll
154:                 # break up the tokens later.
155:                 if nextchar == '.' or self.isnum(nextchar):
156:                     token += nextchar
157:                 elif self.isword(nextchar) and token[-1] == '.':
158:                     token += nextchar
159:                     state = 'a.'
160:                 else:
161:                     self.charstack.append(nextchar)
162:                     break  # emit token
163: 
164:         if (state in ('a.', '0.') and (seenletters or token.count('.') > 1 or
165:                                        token[-1] in '.,')):
166:             l = self._split_decimal.split(token)
167:             token = l[0]
168:             for tok in l[1:]:
169:                 if tok:
170:                     self.tokenstack.append(tok)
171: 
172:         if state == '0.' and token.count('.') == 0:
173:             token = token.replace(',', '.')
174: 
175:         return token
176: 
177:     def __iter__(self):
178:         return self
179: 
180:     def __next__(self):
181:         token = self.get_token()
182:         if token is None:
183:             raise StopIteration
184: 
185:         return token
186: 
187:     def next(self):
188:         return self.__next__()  # Python 2.x support
189: 
190:     @classmethod
191:     def split(cls, s):
192:         return list(cls(s))
193: 
194:     @classmethod
195:     def isword(cls, nextchar):
196:         ''' Whether or not the next character is part of a word '''
197:         return nextchar.isalpha()
198: 
199:     @classmethod
200:     def isnum(cls, nextchar):
201:         ''' Whether the next character is part of a number '''
202:         return nextchar.isdigit()
203: 
204:     @classmethod
205:     def isspace(cls, nextchar):
206:         ''' Whether the next character is whitespace '''
207:         return nextchar.isspace()
208: 
209: 
210: class _resultbase(object):
211: 
212:     def __init__(self):
213:         for attr in self.__slots__:
214:             setattr(self, attr, None)
215: 
216:     def _repr(self, classname):
217:         l = []
218:         for attr in self.__slots__:
219:             value = getattr(self, attr)
220:             if value is not None:
221:                 l.append("%s=%s" % (attr, repr(value)))
222:         return "%s(%s)" % (classname, ", ".join(l))
223: 
224:     def __len__(self):
225:         return (sum(getattr(self, attr) is not None
226:                     for attr in self.__slots__))
227: 
228:     def __repr__(self):
229:         return self._repr(self.__class__.__name__)
230: 
231: 
232: class parserinfo(object):
233:     '''
234:     Class which handles what inputs are accepted. Subclass this to customize
235:     the language and acceptable values for each parameter.
236: 
237:     :param dayfirst:
238:             Whether to interpret the first value in an ambiguous 3-integer date
239:             (e.g. 01/05/09) as the day (``True``) or month (``False``). If
240:             ``yearfirst`` is set to ``True``, this distinguishes between YDM
241:             and YMD. Default is ``False``.
242: 
243:     :param yearfirst:
244:             Whether to interpret the first value in an ambiguous 3-integer date
245:             (e.g. 01/05/09) as the year. If ``True``, the first number is taken
246:             to be the year, otherwise the last number is taken to be the year.
247:             Default is ``False``.
248:     '''
249: 
250:     # m from a.m/p.m, t from ISO T separator
251:     JUMP = [" ", ".", ",", ";", "-", "/", "'",
252:             "at", "on", "and", "ad", "m", "t", "of",
253:             "st", "nd", "rd", "th"]
254: 
255:     WEEKDAYS = [("Mon", "Monday"),
256:                 ("Tue", "Tuesday"),
257:                 ("Wed", "Wednesday"),
258:                 ("Thu", "Thursday"),
259:                 ("Fri", "Friday"),
260:                 ("Sat", "Saturday"),
261:                 ("Sun", "Sunday")]
262:     MONTHS = [("Jan", "January"),
263:               ("Feb", "February"),
264:               ("Mar", "March"),
265:               ("Apr", "April"),
266:               ("May", "May"),
267:               ("Jun", "June"),
268:               ("Jul", "July"),
269:               ("Aug", "August"),
270:               ("Sep", "Sept", "September"),
271:               ("Oct", "October"),
272:               ("Nov", "November"),
273:               ("Dec", "December")]
274:     HMS = [("h", "hour", "hours"),
275:            ("m", "minute", "minutes"),
276:            ("s", "second", "seconds")]
277:     AMPM = [("am", "a"),
278:             ("pm", "p")]
279:     UTCZONE = ["UTC", "GMT", "Z"]
280:     PERTAIN = ["of"]
281:     TZOFFSET = {}
282: 
283:     def __init__(self, dayfirst=False, yearfirst=False):
284:         self._jump = self._convert(self.JUMP)
285:         self._weekdays = self._convert(self.WEEKDAYS)
286:         self._months = self._convert(self.MONTHS)
287:         self._hms = self._convert(self.HMS)
288:         self._ampm = self._convert(self.AMPM)
289:         self._utczone = self._convert(self.UTCZONE)
290:         self._pertain = self._convert(self.PERTAIN)
291: 
292:         self.dayfirst = dayfirst
293:         self.yearfirst = yearfirst
294: 
295:         self._year = time.localtime().tm_year
296:         self._century = self._year // 100 * 100
297: 
298:     def _convert(self, lst):
299:         dct = {}
300:         for i, v in enumerate(lst):
301:             if isinstance(v, tuple):
302:                 for v in v:
303:                     dct[v.lower()] = i
304:             else:
305:                 dct[v.lower()] = i
306:         return dct
307: 
308:     def jump(self, name):
309:         return name.lower() in self._jump
310: 
311:     def weekday(self, name):
312:         if len(name) >= min(len(n) for n in self._weekdays.keys()):
313:             try:
314:                 return self._weekdays[name.lower()]
315:             except KeyError:
316:                 pass
317:         return None
318: 
319:     def month(self, name):
320:         if len(name) >= min(len(n) for n in self._months.keys()):
321:             try:
322:                 return self._months[name.lower()] + 1
323:             except KeyError:
324:                 pass
325:         return None
326: 
327:     def hms(self, name):
328:         try:
329:             return self._hms[name.lower()]
330:         except KeyError:
331:             return None
332: 
333:     def ampm(self, name):
334:         try:
335:             return self._ampm[name.lower()]
336:         except KeyError:
337:             return None
338: 
339:     def pertain(self, name):
340:         return name.lower() in self._pertain
341: 
342:     def utczone(self, name):
343:         return name.lower() in self._utczone
344: 
345:     def tzoffset(self, name):
346:         if name in self._utczone:
347:             return 0
348: 
349:         return self.TZOFFSET.get(name)
350: 
351:     def convertyear(self, year, century_specified=False):
352:         if year < 100 and not century_specified:
353:             year += self._century
354:             if abs(year - self._year) >= 50:
355:                 if year < self._year:
356:                     year += 100
357:                 else:
358:                     year -= 100
359:         return year
360: 
361:     def validate(self, res):
362:         # move to info
363:         if res.year is not None:
364:             res.year = self.convertyear(res.year, res.century_specified)
365: 
366:         if res.tzoffset == 0 and not res.tzname or res.tzname == 'Z':
367:             res.tzname = "UTC"
368:             res.tzoffset = 0
369:         elif res.tzoffset != 0 and res.tzname and self.utczone(res.tzname):
370:             res.tzoffset = 0
371:         return True
372: 
373: 
374: class _ymd(list):
375:     def __init__(self, tzstr, *args, **kwargs):
376:         super(self.__class__, self).__init__(*args, **kwargs)
377:         self.century_specified = False
378:         self.tzstr = tzstr
379: 
380:     @staticmethod
381:     def token_could_be_year(token, year):
382:         try:
383:             return int(token) == year
384:         except ValueError:
385:             return False
386: 
387:     @staticmethod
388:     def find_potential_year_tokens(year, tokens):
389:         return [token for token in tokens if _ymd.token_could_be_year(token, year)]
390: 
391:     def find_probable_year_index(self, tokens):
392:         '''
393:         attempt to deduce if a pre 100 year was lost
394:          due to padded zeros being taken off
395:         '''
396:         for index, token in enumerate(self):
397:             potential_year_tokens = _ymd.find_potential_year_tokens(token, tokens)
398:             if len(potential_year_tokens) == 1 and len(potential_year_tokens[0]) > 2:
399:                 return index
400: 
401:     def append(self, val):
402:         if hasattr(val, '__len__'):
403:             if val.isdigit() and len(val) > 2:
404:                 self.century_specified = True
405:         elif val > 100:
406:             self.century_specified = True
407: 
408:         super(self.__class__, self).append(int(val))
409: 
410:     def resolve_ymd(self, mstridx, yearfirst, dayfirst):
411:         len_ymd = len(self)
412:         year, month, day = (None, None, None)
413: 
414:         if len_ymd > 3:
415:             raise ValueError("More than three YMD values")
416:         elif len_ymd == 1 or (mstridx != -1 and len_ymd == 2):
417:             # One member, or two members with a month string
418:             if mstridx != -1:
419:                 month = self[mstridx]
420:                 del self[mstridx]
421: 
422:             if len_ymd > 1 or mstridx == -1:
423:                 if self[0] > 31:
424:                     year = self[0]
425:                 else:
426:                     day = self[0]
427: 
428:         elif len_ymd == 2:
429:             # Two members with numbers
430:             if self[0] > 31:
431:                 # 99-01
432:                 year, month = self
433:             elif self[1] > 31:
434:                 # 01-99
435:                 month, year = self
436:             elif dayfirst and self[1] <= 12:
437:                 # 13-01
438:                 day, month = self
439:             else:
440:                 # 01-13
441:                 month, day = self
442: 
443:         elif len_ymd == 3:
444:             # Three members
445:             if mstridx == 0:
446:                 month, day, year = self
447:             elif mstridx == 1:
448:                 if self[0] > 31 or (yearfirst and self[2] <= 31):
449:                     # 99-Jan-01
450:                     year, month, day = self
451:                 else:
452:                     # 01-Jan-01
453:                     # Give precendence to day-first, since
454:                     # two-digit years is usually hand-written.
455:                     day, month, year = self
456: 
457:             elif mstridx == 2:
458:                 # WTF!?
459:                 if self[1] > 31:
460:                     # 01-99-Jan
461:                     day, year, month = self
462:                 else:
463:                     # 99-01-Jan
464:                     year, day, month = self
465: 
466:             else:
467:                 if self[0] > 31 or \
468:                     self.find_probable_year_index(_timelex.split(self.tzstr)) == 0 or \
469:                    (yearfirst and self[1] <= 12 and self[2] <= 31):
470:                     # 99-01-01
471:                     if dayfirst and self[2] <= 12:
472:                         year, day, month = self
473:                     else:
474:                         year, month, day = self
475:                 elif self[0] > 12 or (dayfirst and self[1] <= 12):
476:                     # 13-01-01
477:                     day, month, year = self
478:                 else:
479:                     # 01-13-01
480:                     month, day, year = self
481: 
482:         return year, month, day
483: 
484: 
485: class parser(object):
486:     def __init__(self, info=None):
487:         self.info = info or parserinfo()
488: 
489:     def parse(self, timestr, default=None, ignoretz=False, tzinfos=None, **kwargs):
490:         '''
491:         Parse the date/time string into a :class:`datetime.datetime` object.
492: 
493:         :param timestr:
494:             Any date/time string using the supported formats.
495: 
496:         :param default:
497:             The default datetime object, if this is a datetime object and not
498:             ``None``, elements specified in ``timestr`` replace elements in the
499:             default object.
500: 
501:         :param ignoretz:
502:             If set ``True``, time zones in parsed strings are ignored and a
503:             naive :class:`datetime.datetime` object is returned.
504: 
505:         :param tzinfos:
506:             Additional time zone names / aliases which may be present in the
507:             string. This argument maps time zone names (and optionally offsets
508:             from those time zones) to time zones. This parameter can be a
509:             dictionary with timezone aliases mapping time zone names to time
510:             zones or a function taking two parameters (``tzname`` and
511:             ``tzoffset``) and returning a time zone.
512: 
513:             The timezones to which the names are mapped can be an integer
514:             offset from UTC in minutes or a :class:`tzinfo` object.
515: 
516:             .. doctest::
517:                :options: +NORMALIZE_WHITESPACE
518: 
519:                 >>> from dateutil.parser import parse
520:                 >>> from dateutil.tz import gettz
521:                 >>> tzinfos = {"BRST": -10800, "CST": gettz("America/Chicago")}
522:                 >>> parse("2012-01-19 17:21:00 BRST", tzinfos=tzinfos)
523:                 datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -10800))
524:                 >>> parse("2012-01-19 17:21:00 CST", tzinfos=tzinfos)
525:                 datetime.datetime(2012, 1, 19, 17, 21,
526:                                   tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))
527: 
528:             This parameter is ignored if ``ignoretz`` is set.
529: 
530:         :param **kwargs:
531:             Keyword arguments as passed to ``_parse()``.
532: 
533:         :return:
534:             Returns a :class:`datetime.datetime` object or, if the
535:             ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the
536:             first element being a :class:`datetime.datetime` object, the second
537:             a tuple containing the fuzzy tokens.
538: 
539:         :raises ValueError:
540:             Raised for invalid or unknown string format, if the provided
541:             :class:`tzinfo` is not in a valid format, or if an invalid date
542:             would be created.
543: 
544:         :raises TypeError:
545:             Raised for non-string or character stream input.
546: 
547:         :raises OverflowError:
548:             Raised if the parsed date exceeds the largest valid C integer on
549:             your system.
550:         '''
551: 
552:         if default is None:
553:             default = datetime.datetime.now().replace(hour=0, minute=0,
554:                                                       second=0, microsecond=0)
555: 
556:         res, skipped_tokens = self._parse(timestr, **kwargs)
557: 
558:         if res is None:
559:             raise ValueError("Unknown string format")
560: 
561:         if len(res) == 0:
562:             raise ValueError("String does not contain a date.")
563: 
564:         repl = {}
565:         for attr in ("year", "month", "day", "hour",
566:                      "minute", "second", "microsecond"):
567:             value = getattr(res, attr)
568:             if value is not None:
569:                 repl[attr] = value
570: 
571:         if 'day' not in repl:
572:             # If the default day exceeds the last day of the month, fall back to
573:             # the end of the month.
574:             cyear = default.year if res.year is None else res.year
575:             cmonth = default.month if res.month is None else res.month
576:             cday = default.day if res.day is None else res.day
577: 
578:             if cday > monthrange(cyear, cmonth)[1]:
579:                 repl['day'] = monthrange(cyear, cmonth)[1]
580: 
581:         ret = default.replace(**repl)
582: 
583:         if res.weekday is not None and not res.day:
584:             ret = ret+relativedelta.relativedelta(weekday=res.weekday)
585: 
586:         if not ignoretz:
587:             if (isinstance(tzinfos, collections.Callable) or
588:                     tzinfos and res.tzname in tzinfos):
589: 
590:                 if isinstance(tzinfos, collections.Callable):
591:                     tzdata = tzinfos(res.tzname, res.tzoffset)
592:                 else:
593:                     tzdata = tzinfos.get(res.tzname)
594: 
595:                 if isinstance(tzdata, datetime.tzinfo):
596:                     tzinfo = tzdata
597:                 elif isinstance(tzdata, text_type):
598:                     tzinfo = tz.tzstr(tzdata)
599:                 elif isinstance(tzdata, integer_types):
600:                     tzinfo = tz.tzoffset(res.tzname, tzdata)
601:                 else:
602:                     raise ValueError("Offset must be tzinfo subclass, "
603:                                      "tz string, or int offset.")
604:                 ret = ret.replace(tzinfo=tzinfo)
605:             elif res.tzname and res.tzname in time.tzname:
606:                 ret = ret.replace(tzinfo=tz.tzlocal())
607:             elif res.tzoffset == 0:
608:                 ret = ret.replace(tzinfo=tz.tzutc())
609:             elif res.tzoffset:
610:                 ret = ret.replace(tzinfo=tz.tzoffset(res.tzname, res.tzoffset))
611: 
612:         if kwargs.get('fuzzy_with_tokens', False):
613:             return ret, skipped_tokens
614:         else:
615:             return ret
616: 
617:     class _result(_resultbase):
618:         __slots__ = ["year", "month", "day", "weekday",
619:                      "hour", "minute", "second", "microsecond",
620:                      "tzname", "tzoffset", "ampm"]
621: 
622:     def _parse(self, timestr, dayfirst=None, yearfirst=None, fuzzy=False,
623:                fuzzy_with_tokens=False):
624:         '''
625:         Private method which performs the heavy lifting of parsing, called from
626:         ``parse()``, which passes on its ``kwargs`` to this function.
627: 
628:         :param timestr:
629:             The string to parse.
630: 
631:         :param dayfirst:
632:             Whether to interpret the first value in an ambiguous 3-integer date
633:             (e.g. 01/05/09) as the day (``True``) or month (``False``). If
634:             ``yearfirst`` is set to ``True``, this distinguishes between YDM
635:             and YMD. If set to ``None``, this value is retrieved from the
636:             current :class:`parserinfo` object (which itself defaults to
637:             ``False``).
638: 
639:         :param yearfirst:
640:             Whether to interpret the first value in an ambiguous 3-integer date
641:             (e.g. 01/05/09) as the year. If ``True``, the first number is taken
642:             to be the year, otherwise the last number is taken to be the year.
643:             If this is set to ``None``, the value is retrieved from the current
644:             :class:`parserinfo` object (which itself defaults to ``False``).
645: 
646:         :param fuzzy:
647:             Whether to allow fuzzy parsing, allowing for string like "Today is
648:             January 1, 2047 at 8:21:00AM".
649: 
650:         :param fuzzy_with_tokens:
651:             If ``True``, ``fuzzy`` is automatically set to True, and the parser
652:             will return a tuple where the first element is the parsed
653:             :class:`datetime.datetime` datetimestamp and the second element is
654:             a tuple containing the portions of the string which were ignored:
655: 
656:             .. doctest::
657: 
658:                 >>> from dateutil.parser import parse
659:                 >>> parse("Today is January 1, 2047 at 8:21:00AM", fuzzy_with_tokens=True)
660:                 (datetime.datetime(2047, 1, 1, 8, 21), (u'Today is ', u' ', u'at '))
661: 
662:         '''
663:         if fuzzy_with_tokens:
664:             fuzzy = True
665: 
666:         info = self.info
667: 
668:         if dayfirst is None:
669:             dayfirst = info.dayfirst
670: 
671:         if yearfirst is None:
672:             yearfirst = info.yearfirst
673: 
674:         res = self._result()
675:         l = _timelex.split(timestr)         # Splits the timestr into tokens
676: 
677:         # keep up with the last token skipped so we can recombine
678:         # consecutively skipped tokens (-2 for when i begins at 0).
679:         last_skipped_token_i = -2
680:         skipped_tokens = list()
681: 
682:         try:
683:             # year/month/day list
684:             ymd = _ymd(timestr)
685: 
686:             # Index of the month string in ymd
687:             mstridx = -1
688: 
689:             len_l = len(l)
690:             i = 0
691:             while i < len_l:
692: 
693:                 # Check if it's a number
694:                 try:
695:                     value_repr = l[i]
696:                     value = float(value_repr)
697:                 except ValueError:
698:                     value = None
699: 
700:                 if value is not None:
701:                     # Token is a number
702:                     len_li = len(l[i])
703:                     i += 1
704: 
705:                     if (len(ymd) == 3 and len_li in (2, 4)
706:                         and res.hour is None and (i >= len_l or (l[i] != ':' and
707:                                                   info.hms(l[i]) is None))):
708:                         # 19990101T23[59]
709:                         s = l[i-1]
710:                         res.hour = int(s[:2])
711: 
712:                         if len_li == 4:
713:                             res.minute = int(s[2:])
714: 
715:                     elif len_li == 6 or (len_li > 6 and l[i-1].find('.') == 6):
716:                         # YYMMDD or HHMMSS[.ss]
717:                         s = l[i-1]
718: 
719:                         if not ymd and l[i-1].find('.') == -1:
720:                             #ymd.append(info.convertyear(int(s[:2])))
721: 
722:                             ymd.append(s[:2])
723:                             ymd.append(s[2:4])
724:                             ymd.append(s[4:])
725:                         else:
726:                             # 19990101T235959[.59]
727:                             res.hour = int(s[:2])
728:                             res.minute = int(s[2:4])
729:                             res.second, res.microsecond = _parsems(s[4:])
730: 
731:                     elif len_li in (8, 12, 14):
732:                         # YYYYMMDD
733:                         s = l[i-1]
734:                         ymd.append(s[:4])
735:                         ymd.append(s[4:6])
736:                         ymd.append(s[6:8])
737: 
738:                         if len_li > 8:
739:                             res.hour = int(s[8:10])
740:                             res.minute = int(s[10:12])
741: 
742:                             if len_li > 12:
743:                                 res.second = int(s[12:])
744: 
745:                     elif ((i < len_l and info.hms(l[i]) is not None) or
746:                           (i+1 < len_l and l[i] == ' ' and
747:                            info.hms(l[i+1]) is not None)):
748: 
749:                         # HH[ ]h or MM[ ]m or SS[.ss][ ]s
750:                         if l[i] == ' ':
751:                             i += 1
752: 
753:                         idx = info.hms(l[i])
754: 
755:                         while True:
756:                             if idx == 0:
757:                                 res.hour = int(value)
758: 
759:                                 if value % 1:
760:                                     res.minute = int(60*(value % 1))
761: 
762:                             elif idx == 1:
763:                                 res.minute = int(value)
764: 
765:                                 if value % 1:
766:                                     res.second = int(60*(value % 1))
767: 
768:                             elif idx == 2:
769:                                 res.second, res.microsecond = \
770:                                     _parsems(value_repr)
771: 
772:                             i += 1
773: 
774:                             if i >= len_l or idx == 2:
775:                                 break
776: 
777:                             # 12h00
778:                             try:
779:                                 value_repr = l[i]
780:                                 value = float(value_repr)
781:                             except ValueError:
782:                                 break
783:                             else:
784:                                 i += 1
785:                                 idx += 1
786: 
787:                                 if i < len_l:
788:                                     newidx = info.hms(l[i])
789: 
790:                                     if newidx is not None:
791:                                         idx = newidx
792: 
793:                     elif (i == len_l and l[i-2] == ' ' and
794:                           info.hms(l[i-3]) is not None):
795:                         # X h MM or X m SS
796:                         idx = info.hms(l[i-3])
797: 
798:                         if idx == 0:               # h
799:                             res.minute = int(value)
800: 
801:                             sec_remainder = value % 1
802:                             if sec_remainder:
803:                                 res.second = int(60 * sec_remainder)
804:                         elif idx == 1:             # m
805:                             res.second, res.microsecond = \
806:                                 _parsems(value_repr)
807: 
808:                         # We don't need to advance the tokens here because the
809:                         # i == len_l call indicates that we're looking at all
810:                         # the tokens already.
811: 
812:                     elif i+1 < len_l and l[i] == ':':
813:                         # HH:MM[:SS[.ss]]
814:                         res.hour = int(value)
815:                         i += 1
816:                         value = float(l[i])
817:                         res.minute = int(value)
818: 
819:                         if value % 1:
820:                             res.second = int(60*(value % 1))
821: 
822:                         i += 1
823: 
824:                         if i < len_l and l[i] == ':':
825:                             res.second, res.microsecond = _parsems(l[i+1])
826:                             i += 2
827: 
828:                     elif i < len_l and l[i] in ('-', '/', '.'):
829:                         sep = l[i]
830:                         ymd.append(value_repr)
831:                         i += 1
832: 
833:                         if i < len_l and not info.jump(l[i]):
834:                             try:
835:                                 # 01-01[-01]
836:                                 ymd.append(l[i])
837:                             except ValueError:
838:                                 # 01-Jan[-01]
839:                                 value = info.month(l[i])
840: 
841:                                 if value is not None:
842:                                     ymd.append(value)
843:                                     assert mstridx == -1
844:                                     mstridx = len(ymd)-1
845:                                 else:
846:                                     return None, None
847: 
848:                             i += 1
849: 
850:                             if i < len_l and l[i] == sep:
851:                                 # We have three members
852:                                 i += 1
853:                                 value = info.month(l[i])
854: 
855:                                 if value is not None:
856:                                     ymd.append(value)
857:                                     mstridx = len(ymd)-1
858:                                     assert mstridx == -1
859:                                 else:
860:                                     ymd.append(l[i])
861: 
862:                                 i += 1
863:                     elif i >= len_l or info.jump(l[i]):
864:                         if i+1 < len_l and info.ampm(l[i+1]) is not None:
865:                             # 12 am
866:                             res.hour = int(value)
867: 
868:                             if res.hour < 12 and info.ampm(l[i+1]) == 1:
869:                                 res.hour += 12
870:                             elif res.hour == 12 and info.ampm(l[i+1]) == 0:
871:                                 res.hour = 0
872: 
873:                             i += 1
874:                         else:
875:                             # Year, month or day
876:                             ymd.append(value)
877:                         i += 1
878:                     elif info.ampm(l[i]) is not None:
879: 
880:                         # 12am
881:                         res.hour = int(value)
882: 
883:                         if res.hour < 12 and info.ampm(l[i]) == 1:
884:                             res.hour += 12
885:                         elif res.hour == 12 and info.ampm(l[i]) == 0:
886:                             res.hour = 0
887:                         i += 1
888: 
889:                     elif not fuzzy:
890:                         return None, None
891:                     else:
892:                         i += 1
893:                     continue
894: 
895:                 # Check weekday
896:                 value = info.weekday(l[i])
897:                 if value is not None:
898:                     res.weekday = value
899:                     i += 1
900:                     continue
901: 
902:                 # Check month name
903:                 value = info.month(l[i])
904:                 if value is not None:
905:                     ymd.append(value)
906:                     assert mstridx == -1
907:                     mstridx = len(ymd)-1
908: 
909:                     i += 1
910:                     if i < len_l:
911:                         if l[i] in ('-', '/'):
912:                             # Jan-01[-99]
913:                             sep = l[i]
914:                             i += 1
915:                             ymd.append(l[i])
916:                             i += 1
917: 
918:                             if i < len_l and l[i] == sep:
919:                                 # Jan-01-99
920:                                 i += 1
921:                                 ymd.append(l[i])
922:                                 i += 1
923: 
924:                         elif (i+3 < len_l and l[i] == l[i+2] == ' '
925:                               and info.pertain(l[i+1])):
926:                             # Jan of 01
927:                             # In this case, 01 is clearly year
928:                             try:
929:                                 value = int(l[i+3])
930:                             except ValueError:
931:                                 # Wrong guess
932:                                 pass
933:                             else:
934:                                 # Convert it here to become unambiguous
935:                                 ymd.append(str(info.convertyear(value)))
936:                             i += 4
937:                     continue
938: 
939:                 # Check am/pm
940:                 value = info.ampm(l[i])
941:                 if value is not None:
942:                     # For fuzzy parsing, 'a' or 'am' (both valid English words)
943:                     # may erroneously trigger the AM/PM flag. Deal with that
944:                     # here.
945:                     val_is_ampm = True
946: 
947:                     # If there's already an AM/PM flag, this one isn't one.
948:                     if fuzzy and res.ampm is not None:
949:                         val_is_ampm = False
950: 
951:                     # If AM/PM is found and hour is not, raise a ValueError
952:                     if res.hour is None:
953:                         if fuzzy:
954:                             val_is_ampm = False
955:                         else:
956:                             raise ValueError('No hour specified with ' +
957:                                              'AM or PM flag.')
958:                     elif not 0 <= res.hour <= 12:
959:                         # If AM/PM is found, it's a 12 hour clock, so raise
960:                         # an error for invalid range
961:                         if fuzzy:
962:                             val_is_ampm = False
963:                         else:
964:                             raise ValueError('Invalid hour specified for ' +
965:                                              '12-hour clock.')
966: 
967:                     if val_is_ampm:
968:                         if value == 1 and res.hour < 12:
969:                             res.hour += 12
970:                         elif value == 0 and res.hour == 12:
971:                             res.hour = 0
972: 
973:                         res.ampm = value
974: 
975:                     elif fuzzy:
976:                         last_skipped_token_i = self._skip_token(skipped_tokens,
977:                                                     last_skipped_token_i, i, l)
978:                     i += 1
979:                     continue
980: 
981:                 # Check for a timezone name
982:                 if (res.hour is not None and len(l[i]) <= 5 and
983:                         res.tzname is None and res.tzoffset is None and
984:                         not [x for x in l[i] if x not in
985:                              string.ascii_uppercase]):
986:                     res.tzname = l[i]
987:                     res.tzoffset = info.tzoffset(res.tzname)
988:                     i += 1
989: 
990:                     # Check for something like GMT+3, or BRST+3. Notice
991:                     # that it doesn't mean "I am 3 hours after GMT", but
992:                     # "my time +3 is GMT". If found, we reverse the
993:                     # logic so that timezone parsing code will get it
994:                     # right.
995:                     if i < len_l and l[i] in ('+', '-'):
996:                         l[i] = ('+', '-')[l[i] == '+']
997:                         res.tzoffset = None
998:                         if info.utczone(res.tzname):
999:                             # With something like GMT+3, the timezone
1000:                             # is *not* GMT.
1001:                             res.tzname = None
1002: 
1003:                     continue
1004: 
1005:                 # Check for a numbered timezone
1006:                 if res.hour is not None and l[i] in ('+', '-'):
1007:                     signal = (-1, 1)[l[i] == '+']
1008:                     i += 1
1009:                     len_li = len(l[i])
1010: 
1011:                     if len_li == 4:
1012:                         # -0300
1013:                         res.tzoffset = int(l[i][:2])*3600+int(l[i][2:])*60
1014:                     elif i+1 < len_l and l[i+1] == ':':
1015:                         # -03:00
1016:                         res.tzoffset = int(l[i])*3600+int(l[i+2])*60
1017:                         i += 2
1018:                     elif len_li <= 2:
1019:                         # -[0]3
1020:                         res.tzoffset = int(l[i][:2])*3600
1021:                     else:
1022:                         return None, None
1023:                     i += 1
1024: 
1025:                     res.tzoffset *= signal
1026: 
1027:                     # Look for a timezone name between parenthesis
1028:                     if (i+3 < len_l and
1029:                         info.jump(l[i]) and l[i+1] == '(' and l[i+3] == ')' and
1030:                         3 <= len(l[i+2]) <= 5 and
1031:                         not [x for x in l[i+2]
1032:                              if x not in string.ascii_uppercase]):
1033:                         # -0300 (BRST)
1034:                         res.tzname = l[i+2]
1035:                         i += 4
1036:                     continue
1037: 
1038:                 # Check jumps
1039:                 if not (info.jump(l[i]) or fuzzy):
1040:                     return None, None
1041: 
1042:                 last_skipped_token_i = self._skip_token(skipped_tokens,
1043:                                                 last_skipped_token_i, i, l)
1044:                 i += 1
1045: 
1046:             # Process year/month/day
1047:             year, month, day = ymd.resolve_ymd(mstridx, yearfirst, dayfirst)
1048:             if year is not None:
1049:                 res.year = year
1050:                 res.century_specified = ymd.century_specified
1051: 
1052:             if month is not None:
1053:                 res.month = month
1054: 
1055:             if day is not None:
1056:                 res.day = day
1057: 
1058:         except (IndexError, ValueError, AssertionError):
1059:             return None, None
1060: 
1061:         if not info.validate(res):
1062:             return None, None
1063: 
1064:         if fuzzy_with_tokens:
1065:             return res, tuple(skipped_tokens)
1066:         else:
1067:             return res, None
1068: 
1069:     @staticmethod
1070:     def _skip_token(skipped_tokens, last_skipped_token_i, i, l):
1071:         if last_skipped_token_i == i - 1:
1072:             # recombine the tokens
1073:             skipped_tokens[-1] += l[i]
1074:         else:
1075:             # just append
1076:             skipped_tokens.append(l[i])
1077:         last_skipped_token_i = i
1078:         return last_skipped_token_i
1079: 
1080: 
1081: DEFAULTPARSER = parser()
1082: 
1083: 
1084: def parse(timestr, parserinfo=None, **kwargs):
1085:     '''
1086: 
1087:     Parse a string in one of the supported formats, using the
1088:     ``parserinfo`` parameters.
1089: 
1090:     :param timestr:
1091:         A string containing a date/time stamp.
1092: 
1093:     :param parserinfo:
1094:         A :class:`parserinfo` object containing parameters for the parser.
1095:         If ``None``, the default arguments to the :class:`parserinfo`
1096:         constructor are used.
1097: 
1098:     The ``**kwargs`` parameter takes the following keyword arguments:
1099: 
1100:     :param default:
1101:         The default datetime object, if this is a datetime object and not
1102:         ``None``, elements specified in ``timestr`` replace elements in the
1103:         default object.
1104: 
1105:     :param ignoretz:
1106:         If set ``True``, time zones in parsed strings are ignored and a naive
1107:         :class:`datetime` object is returned.
1108: 
1109:     :param tzinfos:
1110:             Additional time zone names / aliases which may be present in the
1111:             string. This argument maps time zone names (and optionally offsets
1112:             from those time zones) to time zones. This parameter can be a
1113:             dictionary with timezone aliases mapping time zone names to time
1114:             zones or a function taking two parameters (``tzname`` and
1115:             ``tzoffset``) and returning a time zone.
1116: 
1117:             The timezones to which the names are mapped can be an integer
1118:             offset from UTC in minutes or a :class:`tzinfo` object.
1119: 
1120:             .. doctest::
1121:                :options: +NORMALIZE_WHITESPACE
1122: 
1123:                 >>> from dateutil.parser import parse
1124:                 >>> from dateutil.tz import gettz
1125:                 >>> tzinfos = {"BRST": -10800, "CST": gettz("America/Chicago")}
1126:                 >>> parse("2012-01-19 17:21:00 BRST", tzinfos=tzinfos)
1127:                 datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -10800))
1128:                 >>> parse("2012-01-19 17:21:00 CST", tzinfos=tzinfos)
1129:                 datetime.datetime(2012, 1, 19, 17, 21,
1130:                                   tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))
1131: 
1132:             This parameter is ignored if ``ignoretz`` is set.
1133: 
1134:     :param dayfirst:
1135:         Whether to interpret the first value in an ambiguous 3-integer date
1136:         (e.g. 01/05/09) as the day (``True``) or month (``False``). If
1137:         ``yearfirst`` is set to ``True``, this distinguishes between YDM and
1138:         YMD. If set to ``None``, this value is retrieved from the current
1139:         :class:`parserinfo` object (which itself defaults to ``False``).
1140: 
1141:     :param yearfirst:
1142:         Whether to interpret the first value in an ambiguous 3-integer date
1143:         (e.g. 01/05/09) as the year. If ``True``, the first number is taken to
1144:         be the year, otherwise the last number is taken to be the year. If
1145:         this is set to ``None``, the value is retrieved from the current
1146:         :class:`parserinfo` object (which itself defaults to ``False``).
1147: 
1148:     :param fuzzy:
1149:         Whether to allow fuzzy parsing, allowing for string like "Today is
1150:         January 1, 2047 at 8:21:00AM".
1151: 
1152:     :param fuzzy_with_tokens:
1153:         If ``True``, ``fuzzy`` is automatically set to True, and the parser
1154:         will return a tuple where the first element is the parsed
1155:         :class:`datetime.datetime` datetimestamp and the second element is
1156:         a tuple containing the portions of the string which were ignored:
1157: 
1158:         .. doctest::
1159: 
1160:             >>> from dateutil.parser import parse
1161:             >>> parse("Today is January 1, 2047 at 8:21:00AM", fuzzy_with_tokens=True)
1162:             (datetime.datetime(2047, 1, 1, 8, 21), (u'Today is ', u' ', u'at '))
1163: 
1164:     :return:
1165:         Returns a :class:`datetime.datetime` object or, if the
1166:         ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the
1167:         first element being a :class:`datetime.datetime` object, the second
1168:         a tuple containing the fuzzy tokens.
1169: 
1170:     :raises ValueError:
1171:         Raised for invalid or unknown string format, if the provided
1172:         :class:`tzinfo` is not in a valid format, or if an invalid date
1173:         would be created.
1174: 
1175:     :raises OverflowError:
1176:         Raised if the parsed date exceeds the largest valid C integer on
1177:         your system.
1178:     '''
1179:     if parserinfo:
1180:         return parser(parserinfo).parse(timestr, **kwargs)
1181:     else:
1182:         return DEFAULTPARSER.parse(timestr, **kwargs)
1183: 
1184: 
1185: class _tzparser(object):
1186: 
1187:     class _result(_resultbase):
1188: 
1189:         __slots__ = ["stdabbr", "stdoffset", "dstabbr", "dstoffset",
1190:                      "start", "end"]
1191: 
1192:         class _attr(_resultbase):
1193:             __slots__ = ["month", "week", "weekday",
1194:                          "yday", "jyday", "day", "time"]
1195: 
1196:         def __repr__(self):
1197:             return self._repr("")
1198: 
1199:         def __init__(self):
1200:             _resultbase.__init__(self)
1201:             self.start = self._attr()
1202:             self.end = self._attr()
1203: 
1204:     def parse(self, tzstr):
1205:         res = self._result()
1206:         l = _timelex.split(tzstr)
1207:         try:
1208: 
1209:             len_l = len(l)
1210: 
1211:             i = 0
1212:             while i < len_l:
1213:                 # BRST+3[BRDT[+2]]
1214:                 j = i
1215:                 while j < len_l and not [x for x in l[j]
1216:                                          if x in "0123456789:,-+"]:
1217:                     j += 1
1218:                 if j != i:
1219:                     if not res.stdabbr:
1220:                         offattr = "stdoffset"
1221:                         res.stdabbr = "".join(l[i:j])
1222:                     else:
1223:                         offattr = "dstoffset"
1224:                         res.dstabbr = "".join(l[i:j])
1225:                     i = j
1226:                     if (i < len_l and (l[i] in ('+', '-') or l[i][0] in
1227:                                        "0123456789")):
1228:                         if l[i] in ('+', '-'):
1229:                             # Yes, that's right.  See the TZ variable
1230:                             # documentation.
1231:                             signal = (1, -1)[l[i] == '+']
1232:                             i += 1
1233:                         else:
1234:                             signal = -1
1235:                         len_li = len(l[i])
1236:                         if len_li == 4:
1237:                             # -0300
1238:                             setattr(res, offattr, (int(l[i][:2])*3600 +
1239:                                                    int(l[i][2:])*60)*signal)
1240:                         elif i+1 < len_l and l[i+1] == ':':
1241:                             # -03:00
1242:                             setattr(res, offattr,
1243:                                     (int(l[i])*3600+int(l[i+2])*60)*signal)
1244:                             i += 2
1245:                         elif len_li <= 2:
1246:                             # -[0]3
1247:                             setattr(res, offattr,
1248:                                     int(l[i][:2])*3600*signal)
1249:                         else:
1250:                             return None
1251:                         i += 1
1252:                     if res.dstabbr:
1253:                         break
1254:                 else:
1255:                     break
1256: 
1257:             if i < len_l:
1258:                 for j in range(i, len_l):
1259:                     if l[j] == ';':
1260:                         l[j] = ','
1261: 
1262:                 assert l[i] == ','
1263: 
1264:                 i += 1
1265: 
1266:             if i >= len_l:
1267:                 pass
1268:             elif (8 <= l.count(',') <= 9 and
1269:                   not [y for x in l[i:] if x != ','
1270:                        for y in x if y not in "0123456789"]):
1271:                 # GMT0BST,3,0,30,3600,10,0,26,7200[,3600]
1272:                 for x in (res.start, res.end):
1273:                     x.month = int(l[i])
1274:                     i += 2
1275:                     if l[i] == '-':
1276:                         value = int(l[i+1])*-1
1277:                         i += 1
1278:                     else:
1279:                         value = int(l[i])
1280:                     i += 2
1281:                     if value:
1282:                         x.week = value
1283:                         x.weekday = (int(l[i])-1) % 7
1284:                     else:
1285:                         x.day = int(l[i])
1286:                     i += 2
1287:                     x.time = int(l[i])
1288:                     i += 2
1289:                 if i < len_l:
1290:                     if l[i] in ('-', '+'):
1291:                         signal = (-1, 1)[l[i] == "+"]
1292:                         i += 1
1293:                     else:
1294:                         signal = 1
1295:                     res.dstoffset = (res.stdoffset+int(l[i]))*signal
1296:             elif (l.count(',') == 2 and l[i:].count('/') <= 2 and
1297:                   not [y for x in l[i:] if x not in (',', '/', 'J', 'M',
1298:                                                      '.', '-', ':')
1299:                        for y in x if y not in "0123456789"]):
1300:                 for x in (res.start, res.end):
1301:                     if l[i] == 'J':
1302:                         # non-leap year day (1 based)
1303:                         i += 1
1304:                         x.jyday = int(l[i])
1305:                     elif l[i] == 'M':
1306:                         # month[-.]week[-.]weekday
1307:                         i += 1
1308:                         x.month = int(l[i])
1309:                         i += 1
1310:                         assert l[i] in ('-', '.')
1311:                         i += 1
1312:                         x.week = int(l[i])
1313:                         if x.week == 5:
1314:                             x.week = -1
1315:                         i += 1
1316:                         assert l[i] in ('-', '.')
1317:                         i += 1
1318:                         x.weekday = (int(l[i])-1) % 7
1319:                     else:
1320:                         # year day (zero based)
1321:                         x.yday = int(l[i])+1
1322: 
1323:                     i += 1
1324: 
1325:                     if i < len_l and l[i] == '/':
1326:                         i += 1
1327:                         # start time
1328:                         len_li = len(l[i])
1329:                         if len_li == 4:
1330:                             # -0300
1331:                             x.time = (int(l[i][:2])*3600+int(l[i][2:])*60)
1332:                         elif i+1 < len_l and l[i+1] == ':':
1333:                             # -03:00
1334:                             x.time = int(l[i])*3600+int(l[i+2])*60
1335:                             i += 2
1336:                             if i+1 < len_l and l[i+1] == ':':
1337:                                 i += 2
1338:                                 x.time += int(l[i])
1339:                         elif len_li <= 2:
1340:                             # -[0]3
1341:                             x.time = (int(l[i][:2])*3600)
1342:                         else:
1343:                             return None
1344:                         i += 1
1345: 
1346:                     assert i == len_l or l[i] == ','
1347: 
1348:                     i += 1
1349: 
1350:                 assert i >= len_l
1351: 
1352:         except (IndexError, ValueError, AssertionError):
1353:             return None
1354: 
1355:         return res
1356: 
1357: 
1358: DEFAULTTZPARSER = _tzparser()
1359: 
1360: 
1361: def _parsetz(tzstr):
1362:     return DEFAULTTZPARSER.parse(tzstr)
1363: 
1364: 
1365: def _parsems(value):
1366:     '''Parse a I[.F] seconds value into (seconds, microseconds).'''
1367:     if "." not in value:
1368:         return int(value), 0
1369:     else:
1370:         i, f = value.split(".")
1371:         return int(i), int(f.ljust(6, "0")[:6])
1372: 
1373: 
1374: # vim:ts=4:sw=4:et
1375: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

unicode_308918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, (-1)), 'unicode', u'\nThis module offers a generic date/time string parser which is able to parse\nmost known formats to represent a date and/or time.\n\nThis module attempts to be forgiving with regards to unlikely input formats,\nreturning a datetime object even for dates which are ambiguous. If an element\nof a date/time stamp is omitted, the following rules are applied:\n- If AM or PM is left unspecified, a 24-hour clock is assumed, however, an hour\n  on a 12-hour clock (``0 <= hour <= 12``) *must* be specified if AM or PM is\n  specified.\n- If a time zone is omitted, a timezone-naive datetime is returned.\n\nIf any other elements are missing, they are taken from the\n:class:`datetime.datetime` object passed to the parameter ``default``. If this\nresults in a day number exceeding the valid number of days per month, the\nvalue falls back to the end of the month.\n\nAdditional resources about date/time string formats can be found below:\n\n- `A summary of the international standard date and time notation\n  <http://www.cl.cam.ac.uk/~mgk25/iso-time.html>`_\n- `W3C Date and Time Formats <http://www.w3.org/TR/NOTE-datetime>`_\n- `Time Formats (Planetary Rings Node) <http://pds-rings.seti.org/tools/time_formats.html>`_\n- `CPAN ParseDate module\n  <http://search.cpan.org/~muir/Time-modules-2013.0912/lib/Time/ParseDate.pm>`_\n- `Java SimpleDateFormat Class\n  <https://docs.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html>`_\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 32, 0))

# 'import datetime' statement (line 32)
import datetime

import_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'datetime', datetime, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 33, 0))

# 'import string' statement (line 33)
import string

import_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'string', string, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 34, 0))

# 'import time' statement (line 34)
import time

import_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'time', time, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 35, 0))

# 'import collections' statement (line 35)
import collections

import_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'collections', collections, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 36, 0))

# 'import re' statement (line 36)
import re

import_module(stypy.reporting.localization.Localization(__file__, 36, 0), 're', re, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 37, 0))

# 'from io import StringIO' statement (line 37)
try:
    from io import StringIO

except:
    StringIO = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'io', None, module_type_store, ['StringIO'], [StringIO])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 38, 0))

# 'from calendar import monthrange' statement (line 38)
try:
    from calendar import monthrange

except:
    monthrange = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'calendar', None, module_type_store, ['monthrange'], [monthrange])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 40, 0))

# 'from six import text_type, binary_type, integer_types' statement (line 40)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/dateutil/')
import_308919 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'six')

if (type(import_308919) is not StypyTypeError):

    if (import_308919 != 'pyd_module'):
        __import__(import_308919)
        sys_modules_308920 = sys.modules[import_308919]
        import_from_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'six', sys_modules_308920.module_type_store, module_type_store, ['text_type', 'binary_type', 'integer_types'])
        nest_module(stypy.reporting.localization.Localization(__file__, 40, 0), __file__, sys_modules_308920, sys_modules_308920.module_type_store, module_type_store)
    else:
        from six import text_type, binary_type, integer_types

        import_from_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'six', None, module_type_store, ['text_type', 'binary_type', 'integer_types'], [text_type, binary_type, integer_types])

else:
    # Assigning a type to the variable 'six' (line 40)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 0), 'six', import_308919)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/dateutil/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 42, 0))

# 'from dateutil import relativedelta' statement (line 42)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/dateutil/')
import_308921 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'dateutil')

if (type(import_308921) is not StypyTypeError):

    if (import_308921 != 'pyd_module'):
        __import__(import_308921)
        sys_modules_308922 = sys.modules[import_308921]
        import_from_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'dateutil', sys_modules_308922.module_type_store, module_type_store, ['relativedelta'])
        nest_module(stypy.reporting.localization.Localization(__file__, 42, 0), __file__, sys_modules_308922, sys_modules_308922.module_type_store, module_type_store)
    else:
        from dateutil import relativedelta

        import_from_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'dateutil', None, module_type_store, ['relativedelta'], [relativedelta])

else:
    # Assigning a type to the variable 'dateutil' (line 42)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 42, 0), 'dateutil', import_308921)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/dateutil/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 43, 0))

# 'from dateutil import tz' statement (line 43)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/dateutil/')
import_308923 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 43, 0), 'dateutil')

if (type(import_308923) is not StypyTypeError):

    if (import_308923 != 'pyd_module'):
        __import__(import_308923)
        sys_modules_308924 = sys.modules[import_308923]
        import_from_module(stypy.reporting.localization.Localization(__file__, 43, 0), 'dateutil', sys_modules_308924.module_type_store, module_type_store, ['tz'])
        nest_module(stypy.reporting.localization.Localization(__file__, 43, 0), __file__, sys_modules_308924, sys_modules_308924.module_type_store, module_type_store)
    else:
        from dateutil import tz

        import_from_module(stypy.reporting.localization.Localization(__file__, 43, 0), 'dateutil', None, module_type_store, ['tz'], [tz])

else:
    # Assigning a type to the variable 'dateutil' (line 43)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 0), 'dateutil', import_308923)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/dateutil/')


# Assigning a List to a Name (line 45):

# Assigning a List to a Name (line 45):
__all__ = [u'parse', u'parserinfo']
module_type_store.set_exportable_members([u'parse', u'parserinfo'])

# Obtaining an instance of the builtin type 'list' (line 45)
list_308925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 45)
# Adding element type (line 45)
unicode_308926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 11), 'unicode', u'parse')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 45, 10), list_308925, unicode_308926)
# Adding element type (line 45)
unicode_308927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 20), 'unicode', u'parserinfo')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 45, 10), list_308925, unicode_308927)

# Assigning a type to the variable '__all__' (line 45)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 45, 0), '__all__', list_308925)
# Declaration of the '_timelex' class

class _timelex(object, ):
    
    # Assigning a Call to a Name (line 50):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 52, 4, False)
        # Assigning a type to the variable 'self' (line 53)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 53, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_timelex.__init__', ['instream'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['instream'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        
        # Call to isinstance(...): (line 53)
        # Processing the call arguments (line 53)
        # Getting the type of 'instream' (line 53)
        instream_308929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 22), 'instream', False)
        # Getting the type of 'binary_type' (line 53)
        binary_type_308930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 32), 'binary_type', False)
        # Processing the call keyword arguments (line 53)
        kwargs_308931 = {}
        # Getting the type of 'isinstance' (line 53)
        isinstance_308928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 53)
        isinstance_call_result_308932 = invoke(stypy.reporting.localization.Localization(__file__, 53, 11), isinstance_308928, *[instream_308929, binary_type_308930], **kwargs_308931)
        
        # Testing the type of an if condition (line 53)
        if_condition_308933 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 53, 8), isinstance_call_result_308932)
        # Assigning a type to the variable 'if_condition_308933' (line 53)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 53, 8), 'if_condition_308933', if_condition_308933)
        # SSA begins for if statement (line 53)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 54):
        
        # Assigning a Call to a Name (line 54):
        
        # Call to decode(...): (line 54)
        # Processing the call keyword arguments (line 54)
        kwargs_308936 = {}
        # Getting the type of 'instream' (line 54)
        instream_308934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 54, 23), 'instream', False)
        # Obtaining the member 'decode' of a type (line 54)
        decode_308935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 54, 23), instream_308934, 'decode')
        # Calling decode(args, kwargs) (line 54)
        decode_call_result_308937 = invoke(stypy.reporting.localization.Localization(__file__, 54, 23), decode_308935, *[], **kwargs_308936)
        
        # Assigning a type to the variable 'instream' (line 54)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 54, 12), 'instream', decode_call_result_308937)
        # SSA join for if statement (line 53)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to isinstance(...): (line 56)
        # Processing the call arguments (line 56)
        # Getting the type of 'instream' (line 56)
        instream_308939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 56, 22), 'instream', False)
        # Getting the type of 'text_type' (line 56)
        text_type_308940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 56, 32), 'text_type', False)
        # Processing the call keyword arguments (line 56)
        kwargs_308941 = {}
        # Getting the type of 'isinstance' (line 56)
        isinstance_308938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 56, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 56)
        isinstance_call_result_308942 = invoke(stypy.reporting.localization.Localization(__file__, 56, 11), isinstance_308938, *[instream_308939, text_type_308940], **kwargs_308941)
        
        # Testing the type of an if condition (line 56)
        if_condition_308943 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 56, 8), isinstance_call_result_308942)
        # Assigning a type to the variable 'if_condition_308943' (line 56)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 56, 8), 'if_condition_308943', if_condition_308943)
        # SSA begins for if statement (line 56)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 57):
        
        # Assigning a Call to a Name (line 57):
        
        # Call to StringIO(...): (line 57)
        # Processing the call arguments (line 57)
        # Getting the type of 'instream' (line 57)
        instream_308945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 57, 32), 'instream', False)
        # Processing the call keyword arguments (line 57)
        kwargs_308946 = {}
        # Getting the type of 'StringIO' (line 57)
        StringIO_308944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 57, 23), 'StringIO', False)
        # Calling StringIO(args, kwargs) (line 57)
        StringIO_call_result_308947 = invoke(stypy.reporting.localization.Localization(__file__, 57, 23), StringIO_308944, *[instream_308945], **kwargs_308946)
        
        # Assigning a type to the variable 'instream' (line 57)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 57, 12), 'instream', StringIO_call_result_308947)
        # SSA join for if statement (line 56)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 59)
        
        # Call to getattr(...): (line 59)
        # Processing the call arguments (line 59)
        # Getting the type of 'instream' (line 59)
        instream_308949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 19), 'instream', False)
        unicode_308950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 59, 29), 'unicode', u'read')
        # Getting the type of 'None' (line 59)
        None_308951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 37), 'None', False)
        # Processing the call keyword arguments (line 59)
        kwargs_308952 = {}
        # Getting the type of 'getattr' (line 59)
        getattr_308948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 11), 'getattr', False)
        # Calling getattr(args, kwargs) (line 59)
        getattr_call_result_308953 = invoke(stypy.reporting.localization.Localization(__file__, 59, 11), getattr_308948, *[instream_308949, unicode_308950, None_308951], **kwargs_308952)
        
        # Getting the type of 'None' (line 59)
        None_308954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 46), 'None')
        
        (may_be_308955, more_types_in_union_308956) = may_be_none(getattr_call_result_308953, None_308954)

        if may_be_308955:

            if more_types_in_union_308956:
                # Runtime conditional SSA (line 59)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to TypeError(...): (line 60)
            # Processing the call arguments (line 60)
            
            # Call to format(...): (line 60)
            # Processing the call keyword arguments (line 60)
            # Getting the type of 'instream' (line 61)
            instream_308960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 61, 51), 'instream', False)
            # Obtaining the member '__class__' of a type (line 61)
            class___308961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 61, 51), instream_308960, '__class__')
            # Obtaining the member '__name__' of a type (line 61)
            name___308962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 61, 51), class___308961, '__name__')
            keyword_308963 = name___308962
            kwargs_308964 = {'itype': keyword_308963}
            unicode_308958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 60, 28), 'unicode', u'Parser must be a string or character stream, not {itype}')
            # Obtaining the member 'format' of a type (line 60)
            format_308959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 60, 28), unicode_308958, 'format')
            # Calling format(args, kwargs) (line 60)
            format_call_result_308965 = invoke(stypy.reporting.localization.Localization(__file__, 60, 28), format_308959, *[], **kwargs_308964)
            
            # Processing the call keyword arguments (line 60)
            kwargs_308966 = {}
            # Getting the type of 'TypeError' (line 60)
            TypeError_308957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 18), 'TypeError', False)
            # Calling TypeError(args, kwargs) (line 60)
            TypeError_call_result_308967 = invoke(stypy.reporting.localization.Localization(__file__, 60, 18), TypeError_308957, *[format_call_result_308965], **kwargs_308966)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 60, 12), TypeError_call_result_308967, 'raise parameter', BaseException)

            if more_types_in_union_308956:
                # SSA join for if statement (line 59)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 63):
        
        # Assigning a Name to a Attribute (line 63):
        # Getting the type of 'instream' (line 63)
        instream_308968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 63, 24), 'instream')
        # Getting the type of 'self' (line 63)
        self_308969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 63, 8), 'self')
        # Setting the type of the member 'instream' of a type (line 63)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 63, 8), self_308969, 'instream', instream_308968)
        
        # Assigning a List to a Attribute (line 64):
        
        # Assigning a List to a Attribute (line 64):
        
        # Obtaining an instance of the builtin type 'list' (line 64)
        list_308970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 64, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 64)
        
        # Getting the type of 'self' (line 64)
        self_308971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 64, 8), 'self')
        # Setting the type of the member 'charstack' of a type (line 64)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 64, 8), self_308971, 'charstack', list_308970)
        
        # Assigning a List to a Attribute (line 65):
        
        # Assigning a List to a Attribute (line 65):
        
        # Obtaining an instance of the builtin type 'list' (line 65)
        list_308972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 65, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 65)
        
        # Getting the type of 'self' (line 65)
        self_308973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 8), 'self')
        # Setting the type of the member 'tokenstack' of a type (line 65)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 65, 8), self_308973, 'tokenstack', list_308972)
        
        # Assigning a Name to a Attribute (line 66):
        
        # Assigning a Name to a Attribute (line 66):
        # Getting the type of 'False' (line 66)
        False_308974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 66, 19), 'False')
        # Getting the type of 'self' (line 66)
        self_308975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 66, 8), 'self')
        # Setting the type of the member 'eof' of a type (line 66)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 66, 8), self_308975, 'eof', False_308974)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_token(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_token'
        module_type_store = module_type_store.open_function_context('get_token', 68, 4, False)
        # Assigning a type to the variable 'self' (line 69)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 69, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _timelex.get_token.__dict__.__setitem__('stypy_localization', localization)
        _timelex.get_token.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _timelex.get_token.__dict__.__setitem__('stypy_type_store', module_type_store)
        _timelex.get_token.__dict__.__setitem__('stypy_function_name', '_timelex.get_token')
        _timelex.get_token.__dict__.__setitem__('stypy_param_names_list', [])
        _timelex.get_token.__dict__.__setitem__('stypy_varargs_param_name', None)
        _timelex.get_token.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _timelex.get_token.__dict__.__setitem__('stypy_call_defaults', defaults)
        _timelex.get_token.__dict__.__setitem__('stypy_call_varargs', varargs)
        _timelex.get_token.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _timelex.get_token.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_timelex.get_token', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_token', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_token(...)' code ##################

        unicode_308976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 81, (-1)), 'unicode', u'\n        This function breaks the time string into lexical units (tokens), which\n        can be parsed by the parser. Lexical units are demarcated by changes in\n        the character set, so any continuous string of letters is considered\n        one unit, any continuous string of numbers is considered one unit.\n\n        The main complication arises from the fact that dots (\'.\') can be used\n        both as separators (e.g. "Sep.20.2009") or decimal points (e.g.\n        "4:30:21.447"). As such, it is necessary to read the full context of\n        any dot-separated strings before breaking it into tokens; as such, this\n        function maintains a "token stack", for when the ambiguous context\n        demands that multiple tokens be parsed at once.\n        ')
        
        # Getting the type of 'self' (line 82)
        self_308977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 11), 'self')
        # Obtaining the member 'tokenstack' of a type (line 82)
        tokenstack_308978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 82, 11), self_308977, 'tokenstack')
        # Testing the type of an if condition (line 82)
        if_condition_308979 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 82, 8), tokenstack_308978)
        # Assigning a type to the variable 'if_condition_308979' (line 82)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 82, 8), 'if_condition_308979', if_condition_308979)
        # SSA begins for if statement (line 82)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to pop(...): (line 83)
        # Processing the call arguments (line 83)
        int_308983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 83, 39), 'int')
        # Processing the call keyword arguments (line 83)
        kwargs_308984 = {}
        # Getting the type of 'self' (line 83)
        self_308980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 19), 'self', False)
        # Obtaining the member 'tokenstack' of a type (line 83)
        tokenstack_308981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 83, 19), self_308980, 'tokenstack')
        # Obtaining the member 'pop' of a type (line 83)
        pop_308982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 83, 19), tokenstack_308981, 'pop')
        # Calling pop(args, kwargs) (line 83)
        pop_call_result_308985 = invoke(stypy.reporting.localization.Localization(__file__, 83, 19), pop_308982, *[int_308983], **kwargs_308984)
        
        # Assigning a type to the variable 'stypy_return_type' (line 83)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 83, 12), 'stypy_return_type', pop_call_result_308985)
        # SSA join for if statement (line 82)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 85):
        
        # Assigning a Name to a Name (line 85):
        # Getting the type of 'False' (line 85)
        False_308986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 22), 'False')
        # Assigning a type to the variable 'seenletters' (line 85)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 85, 8), 'seenletters', False_308986)
        
        # Assigning a Name to a Name (line 86):
        
        # Assigning a Name to a Name (line 86):
        # Getting the type of 'None' (line 86)
        None_308987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 16), 'None')
        # Assigning a type to the variable 'token' (line 86)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 86, 8), 'token', None_308987)
        
        # Assigning a Name to a Name (line 87):
        
        # Assigning a Name to a Name (line 87):
        # Getting the type of 'None' (line 87)
        None_308988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 87, 16), 'None')
        # Assigning a type to the variable 'state' (line 87)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 87, 8), 'state', None_308988)
        
        
        # Getting the type of 'self' (line 89)
        self_308989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 18), 'self')
        # Obtaining the member 'eof' of a type (line 89)
        eof_308990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 89, 18), self_308989, 'eof')
        # Applying the 'not' unary operator (line 89)
        result_not__308991 = python_operator(stypy.reporting.localization.Localization(__file__, 89, 14), 'not', eof_308990)
        
        # Testing the type of an if condition (line 89)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 89, 8), result_not__308991)
        # SSA begins for while statement (line 89)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Getting the type of 'self' (line 94)
        self_308992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 15), 'self')
        # Obtaining the member 'charstack' of a type (line 94)
        charstack_308993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 94, 15), self_308992, 'charstack')
        # Testing the type of an if condition (line 94)
        if_condition_308994 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 94, 12), charstack_308993)
        # Assigning a type to the variable 'if_condition_308994' (line 94)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 94, 12), 'if_condition_308994', if_condition_308994)
        # SSA begins for if statement (line 94)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 95):
        
        # Assigning a Call to a Name (line 95):
        
        # Call to pop(...): (line 95)
        # Processing the call arguments (line 95)
        int_308998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 95, 46), 'int')
        # Processing the call keyword arguments (line 95)
        kwargs_308999 = {}
        # Getting the type of 'self' (line 95)
        self_308995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 27), 'self', False)
        # Obtaining the member 'charstack' of a type (line 95)
        charstack_308996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 95, 27), self_308995, 'charstack')
        # Obtaining the member 'pop' of a type (line 95)
        pop_308997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 95, 27), charstack_308996, 'pop')
        # Calling pop(args, kwargs) (line 95)
        pop_call_result_309000 = invoke(stypy.reporting.localization.Localization(__file__, 95, 27), pop_308997, *[int_308998], **kwargs_308999)
        
        # Assigning a type to the variable 'nextchar' (line 95)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 95, 16), 'nextchar', pop_call_result_309000)
        # SSA branch for the else part of an if statement (line 94)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 97):
        
        # Assigning a Call to a Name (line 97):
        
        # Call to read(...): (line 97)
        # Processing the call arguments (line 97)
        int_309004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 97, 46), 'int')
        # Processing the call keyword arguments (line 97)
        kwargs_309005 = {}
        # Getting the type of 'self' (line 97)
        self_309001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 27), 'self', False)
        # Obtaining the member 'instream' of a type (line 97)
        instream_309002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 97, 27), self_309001, 'instream')
        # Obtaining the member 'read' of a type (line 97)
        read_309003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 97, 27), instream_309002, 'read')
        # Calling read(args, kwargs) (line 97)
        read_call_result_309006 = invoke(stypy.reporting.localization.Localization(__file__, 97, 27), read_309003, *[int_309004], **kwargs_309005)
        
        # Assigning a type to the variable 'nextchar' (line 97)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 97, 16), 'nextchar', read_call_result_309006)
        
        
        # Getting the type of 'nextchar' (line 98)
        nextchar_309007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 22), 'nextchar')
        unicode_309008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 34), 'unicode', u'\x00')
        # Applying the binary operator '==' (line 98)
        result_eq_309009 = python_operator(stypy.reporting.localization.Localization(__file__, 98, 22), '==', nextchar_309007, unicode_309008)
        
        # Testing the type of an if condition (line 98)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 98, 16), result_eq_309009)
        # SSA begins for while statement (line 98)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Assigning a Call to a Name (line 99):
        
        # Assigning a Call to a Name (line 99):
        
        # Call to read(...): (line 99)
        # Processing the call arguments (line 99)
        int_309013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 99, 50), 'int')
        # Processing the call keyword arguments (line 99)
        kwargs_309014 = {}
        # Getting the type of 'self' (line 99)
        self_309010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 99, 31), 'self', False)
        # Obtaining the member 'instream' of a type (line 99)
        instream_309011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 99, 31), self_309010, 'instream')
        # Obtaining the member 'read' of a type (line 99)
        read_309012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 99, 31), instream_309011, 'read')
        # Calling read(args, kwargs) (line 99)
        read_call_result_309015 = invoke(stypy.reporting.localization.Localization(__file__, 99, 31), read_309012, *[int_309013], **kwargs_309014)
        
        # Assigning a type to the variable 'nextchar' (line 99)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 99, 20), 'nextchar', read_call_result_309015)
        # SSA join for while statement (line 98)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 94)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'nextchar' (line 101)
        nextchar_309016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 19), 'nextchar')
        # Applying the 'not' unary operator (line 101)
        result_not__309017 = python_operator(stypy.reporting.localization.Localization(__file__, 101, 15), 'not', nextchar_309016)
        
        # Testing the type of an if condition (line 101)
        if_condition_309018 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 101, 12), result_not__309017)
        # Assigning a type to the variable 'if_condition_309018' (line 101)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 101, 12), 'if_condition_309018', if_condition_309018)
        # SSA begins for if statement (line 101)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 102):
        
        # Assigning a Name to a Attribute (line 102):
        # Getting the type of 'True' (line 102)
        True_309019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 27), 'True')
        # Getting the type of 'self' (line 102)
        self_309020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 16), 'self')
        # Setting the type of the member 'eof' of a type (line 102)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 102, 16), self_309020, 'eof', True_309019)
        # SSA branch for the else part of an if statement (line 101)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'state' (line 104)
        state_309021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 21), 'state')
        # Applying the 'not' unary operator (line 104)
        result_not__309022 = python_operator(stypy.reporting.localization.Localization(__file__, 104, 17), 'not', state_309021)
        
        # Testing the type of an if condition (line 104)
        if_condition_309023 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 104, 17), result_not__309022)
        # Assigning a type to the variable 'if_condition_309023' (line 104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 17), 'if_condition_309023', if_condition_309023)
        # SSA begins for if statement (line 104)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 107):
        
        # Assigning a Name to a Name (line 107):
        # Getting the type of 'nextchar' (line 107)
        nextchar_309024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 24), 'nextchar')
        # Assigning a type to the variable 'token' (line 107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 107, 16), 'token', nextchar_309024)
        
        
        # Call to isword(...): (line 108)
        # Processing the call arguments (line 108)
        # Getting the type of 'nextchar' (line 108)
        nextchar_309027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 31), 'nextchar', False)
        # Processing the call keyword arguments (line 108)
        kwargs_309028 = {}
        # Getting the type of 'self' (line 108)
        self_309025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 19), 'self', False)
        # Obtaining the member 'isword' of a type (line 108)
        isword_309026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 108, 19), self_309025, 'isword')
        # Calling isword(args, kwargs) (line 108)
        isword_call_result_309029 = invoke(stypy.reporting.localization.Localization(__file__, 108, 19), isword_309026, *[nextchar_309027], **kwargs_309028)
        
        # Testing the type of an if condition (line 108)
        if_condition_309030 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 108, 16), isword_call_result_309029)
        # Assigning a type to the variable 'if_condition_309030' (line 108)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 108, 16), 'if_condition_309030', if_condition_309030)
        # SSA begins for if statement (line 108)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 109):
        
        # Assigning a Str to a Name (line 109):
        unicode_309031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 109, 28), 'unicode', u'a')
        # Assigning a type to the variable 'state' (line 109)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 109, 20), 'state', unicode_309031)
        # SSA branch for the else part of an if statement (line 108)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to isnum(...): (line 110)
        # Processing the call arguments (line 110)
        # Getting the type of 'nextchar' (line 110)
        nextchar_309034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 32), 'nextchar', False)
        # Processing the call keyword arguments (line 110)
        kwargs_309035 = {}
        # Getting the type of 'self' (line 110)
        self_309032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 21), 'self', False)
        # Obtaining the member 'isnum' of a type (line 110)
        isnum_309033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 110, 21), self_309032, 'isnum')
        # Calling isnum(args, kwargs) (line 110)
        isnum_call_result_309036 = invoke(stypy.reporting.localization.Localization(__file__, 110, 21), isnum_309033, *[nextchar_309034], **kwargs_309035)
        
        # Testing the type of an if condition (line 110)
        if_condition_309037 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 110, 21), isnum_call_result_309036)
        # Assigning a type to the variable 'if_condition_309037' (line 110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 110, 21), 'if_condition_309037', if_condition_309037)
        # SSA begins for if statement (line 110)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 111):
        
        # Assigning a Str to a Name (line 111):
        unicode_309038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 111, 28), 'unicode', u'0')
        # Assigning a type to the variable 'state' (line 111)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 111, 20), 'state', unicode_309038)
        # SSA branch for the else part of an if statement (line 110)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to isspace(...): (line 112)
        # Processing the call arguments (line 112)
        # Getting the type of 'nextchar' (line 112)
        nextchar_309041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 34), 'nextchar', False)
        # Processing the call keyword arguments (line 112)
        kwargs_309042 = {}
        # Getting the type of 'self' (line 112)
        self_309039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 21), 'self', False)
        # Obtaining the member 'isspace' of a type (line 112)
        isspace_309040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 112, 21), self_309039, 'isspace')
        # Calling isspace(args, kwargs) (line 112)
        isspace_call_result_309043 = invoke(stypy.reporting.localization.Localization(__file__, 112, 21), isspace_309040, *[nextchar_309041], **kwargs_309042)
        
        # Testing the type of an if condition (line 112)
        if_condition_309044 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 112, 21), isspace_call_result_309043)
        # Assigning a type to the variable 'if_condition_309044' (line 112)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 112, 21), 'if_condition_309044', if_condition_309044)
        # SSA begins for if statement (line 112)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 113):
        
        # Assigning a Str to a Name (line 113):
        unicode_309045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 113, 28), 'unicode', u' ')
        # Assigning a type to the variable 'token' (line 113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 20), 'token', unicode_309045)
        # SSA branch for the else part of an if statement (line 112)
        module_type_store.open_ssa_branch('else')
        # SSA join for if statement (line 112)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 110)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 108)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 104)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'state' (line 117)
        state_309046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 17), 'state')
        unicode_309047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 117, 26), 'unicode', u'a')
        # Applying the binary operator '==' (line 117)
        result_eq_309048 = python_operator(stypy.reporting.localization.Localization(__file__, 117, 17), '==', state_309046, unicode_309047)
        
        # Testing the type of an if condition (line 117)
        if_condition_309049 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 117, 17), result_eq_309048)
        # Assigning a type to the variable 'if_condition_309049' (line 117)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 117, 17), 'if_condition_309049', if_condition_309049)
        # SSA begins for if statement (line 117)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 120):
        
        # Assigning a Name to a Name (line 120):
        # Getting the type of 'True' (line 120)
        True_309050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 30), 'True')
        # Assigning a type to the variable 'seenletters' (line 120)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 120, 16), 'seenletters', True_309050)
        
        
        # Call to isword(...): (line 121)
        # Processing the call arguments (line 121)
        # Getting the type of 'nextchar' (line 121)
        nextchar_309053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 31), 'nextchar', False)
        # Processing the call keyword arguments (line 121)
        kwargs_309054 = {}
        # Getting the type of 'self' (line 121)
        self_309051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 19), 'self', False)
        # Obtaining the member 'isword' of a type (line 121)
        isword_309052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 121, 19), self_309051, 'isword')
        # Calling isword(args, kwargs) (line 121)
        isword_call_result_309055 = invoke(stypy.reporting.localization.Localization(__file__, 121, 19), isword_309052, *[nextchar_309053], **kwargs_309054)
        
        # Testing the type of an if condition (line 121)
        if_condition_309056 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 121, 16), isword_call_result_309055)
        # Assigning a type to the variable 'if_condition_309056' (line 121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 121, 16), 'if_condition_309056', if_condition_309056)
        # SSA begins for if statement (line 121)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'token' (line 122)
        token_309057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 20), 'token')
        # Getting the type of 'nextchar' (line 122)
        nextchar_309058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 29), 'nextchar')
        # Applying the binary operator '+=' (line 122)
        result_iadd_309059 = python_operator(stypy.reporting.localization.Localization(__file__, 122, 20), '+=', token_309057, nextchar_309058)
        # Assigning a type to the variable 'token' (line 122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 122, 20), 'token', result_iadd_309059)
        
        # SSA branch for the else part of an if statement (line 121)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'nextchar' (line 123)
        nextchar_309060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 21), 'nextchar')
        unicode_309061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 123, 33), 'unicode', u'.')
        # Applying the binary operator '==' (line 123)
        result_eq_309062 = python_operator(stypy.reporting.localization.Localization(__file__, 123, 21), '==', nextchar_309060, unicode_309061)
        
        # Testing the type of an if condition (line 123)
        if_condition_309063 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 123, 21), result_eq_309062)
        # Assigning a type to the variable 'if_condition_309063' (line 123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 123, 21), 'if_condition_309063', if_condition_309063)
        # SSA begins for if statement (line 123)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'token' (line 124)
        token_309064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 20), 'token')
        # Getting the type of 'nextchar' (line 124)
        nextchar_309065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 29), 'nextchar')
        # Applying the binary operator '+=' (line 124)
        result_iadd_309066 = python_operator(stypy.reporting.localization.Localization(__file__, 124, 20), '+=', token_309064, nextchar_309065)
        # Assigning a type to the variable 'token' (line 124)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 124, 20), 'token', result_iadd_309066)
        
        
        # Assigning a Str to a Name (line 125):
        
        # Assigning a Str to a Name (line 125):
        unicode_309067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 125, 28), 'unicode', u'a.')
        # Assigning a type to the variable 'state' (line 125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 125, 20), 'state', unicode_309067)
        # SSA branch for the else part of an if statement (line 123)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 127)
        # Processing the call arguments (line 127)
        # Getting the type of 'nextchar' (line 127)
        nextchar_309071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 42), 'nextchar', False)
        # Processing the call keyword arguments (line 127)
        kwargs_309072 = {}
        # Getting the type of 'self' (line 127)
        self_309068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 20), 'self', False)
        # Obtaining the member 'charstack' of a type (line 127)
        charstack_309069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 127, 20), self_309068, 'charstack')
        # Obtaining the member 'append' of a type (line 127)
        append_309070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 127, 20), charstack_309069, 'append')
        # Calling append(args, kwargs) (line 127)
        append_call_result_309073 = invoke(stypy.reporting.localization.Localization(__file__, 127, 20), append_309070, *[nextchar_309071], **kwargs_309072)
        
        # SSA join for if statement (line 123)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 121)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 117)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'state' (line 129)
        state_309074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 17), 'state')
        unicode_309075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 129, 26), 'unicode', u'0')
        # Applying the binary operator '==' (line 129)
        result_eq_309076 = python_operator(stypy.reporting.localization.Localization(__file__, 129, 17), '==', state_309074, unicode_309075)
        
        # Testing the type of an if condition (line 129)
        if_condition_309077 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 129, 17), result_eq_309076)
        # Assigning a type to the variable 'if_condition_309077' (line 129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 129, 17), 'if_condition_309077', if_condition_309077)
        # SSA begins for if statement (line 129)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to isnum(...): (line 132)
        # Processing the call arguments (line 132)
        # Getting the type of 'nextchar' (line 132)
        nextchar_309080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 30), 'nextchar', False)
        # Processing the call keyword arguments (line 132)
        kwargs_309081 = {}
        # Getting the type of 'self' (line 132)
        self_309078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 19), 'self', False)
        # Obtaining the member 'isnum' of a type (line 132)
        isnum_309079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 132, 19), self_309078, 'isnum')
        # Calling isnum(args, kwargs) (line 132)
        isnum_call_result_309082 = invoke(stypy.reporting.localization.Localization(__file__, 132, 19), isnum_309079, *[nextchar_309080], **kwargs_309081)
        
        # Testing the type of an if condition (line 132)
        if_condition_309083 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 132, 16), isnum_call_result_309082)
        # Assigning a type to the variable 'if_condition_309083' (line 132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 132, 16), 'if_condition_309083', if_condition_309083)
        # SSA begins for if statement (line 132)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'token' (line 133)
        token_309084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 20), 'token')
        # Getting the type of 'nextchar' (line 133)
        nextchar_309085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 29), 'nextchar')
        # Applying the binary operator '+=' (line 133)
        result_iadd_309086 = python_operator(stypy.reporting.localization.Localization(__file__, 133, 20), '+=', token_309084, nextchar_309085)
        # Assigning a type to the variable 'token' (line 133)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 133, 20), 'token', result_iadd_309086)
        
        # SSA branch for the else part of an if statement (line 132)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'nextchar' (line 134)
        nextchar_309087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 21), 'nextchar')
        unicode_309088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 134, 33), 'unicode', u'.')
        # Applying the binary operator '==' (line 134)
        result_eq_309089 = python_operator(stypy.reporting.localization.Localization(__file__, 134, 21), '==', nextchar_309087, unicode_309088)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'nextchar' (line 134)
        nextchar_309090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 41), 'nextchar')
        unicode_309091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 134, 53), 'unicode', u',')
        # Applying the binary operator '==' (line 134)
        result_eq_309092 = python_operator(stypy.reporting.localization.Localization(__file__, 134, 41), '==', nextchar_309090, unicode_309091)
        
        
        
        # Call to len(...): (line 134)
        # Processing the call arguments (line 134)
        # Getting the type of 'token' (line 134)
        token_309094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 65), 'token', False)
        # Processing the call keyword arguments (line 134)
        kwargs_309095 = {}
        # Getting the type of 'len' (line 134)
        len_309093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 61), 'len', False)
        # Calling len(args, kwargs) (line 134)
        len_call_result_309096 = invoke(stypy.reporting.localization.Localization(__file__, 134, 61), len_309093, *[token_309094], **kwargs_309095)
        
        int_309097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 134, 75), 'int')
        # Applying the binary operator '>=' (line 134)
        result_ge_309098 = python_operator(stypy.reporting.localization.Localization(__file__, 134, 61), '>=', len_call_result_309096, int_309097)
        
        # Applying the binary operator 'and' (line 134)
        result_and_keyword_309099 = python_operator(stypy.reporting.localization.Localization(__file__, 134, 41), 'and', result_eq_309092, result_ge_309098)
        
        # Applying the binary operator 'or' (line 134)
        result_or_keyword_309100 = python_operator(stypy.reporting.localization.Localization(__file__, 134, 21), 'or', result_eq_309089, result_and_keyword_309099)
        
        # Testing the type of an if condition (line 134)
        if_condition_309101 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 134, 21), result_or_keyword_309100)
        # Assigning a type to the variable 'if_condition_309101' (line 134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 134, 21), 'if_condition_309101', if_condition_309101)
        # SSA begins for if statement (line 134)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'token' (line 135)
        token_309102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 20), 'token')
        # Getting the type of 'nextchar' (line 135)
        nextchar_309103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 29), 'nextchar')
        # Applying the binary operator '+=' (line 135)
        result_iadd_309104 = python_operator(stypy.reporting.localization.Localization(__file__, 135, 20), '+=', token_309102, nextchar_309103)
        # Assigning a type to the variable 'token' (line 135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 135, 20), 'token', result_iadd_309104)
        
        
        # Assigning a Str to a Name (line 136):
        
        # Assigning a Str to a Name (line 136):
        unicode_309105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 136, 28), 'unicode', u'0.')
        # Assigning a type to the variable 'state' (line 136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 136, 20), 'state', unicode_309105)
        # SSA branch for the else part of an if statement (line 134)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 138)
        # Processing the call arguments (line 138)
        # Getting the type of 'nextchar' (line 138)
        nextchar_309109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 42), 'nextchar', False)
        # Processing the call keyword arguments (line 138)
        kwargs_309110 = {}
        # Getting the type of 'self' (line 138)
        self_309106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 20), 'self', False)
        # Obtaining the member 'charstack' of a type (line 138)
        charstack_309107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 138, 20), self_309106, 'charstack')
        # Obtaining the member 'append' of a type (line 138)
        append_309108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 138, 20), charstack_309107, 'append')
        # Calling append(args, kwargs) (line 138)
        append_call_result_309111 = invoke(stypy.reporting.localization.Localization(__file__, 138, 20), append_309108, *[nextchar_309109], **kwargs_309110)
        
        # SSA join for if statement (line 134)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 132)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 129)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'state' (line 140)
        state_309112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 17), 'state')
        unicode_309113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 140, 26), 'unicode', u'a.')
        # Applying the binary operator '==' (line 140)
        result_eq_309114 = python_operator(stypy.reporting.localization.Localization(__file__, 140, 17), '==', state_309112, unicode_309113)
        
        # Testing the type of an if condition (line 140)
        if_condition_309115 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 140, 17), result_eq_309114)
        # Assigning a type to the variable 'if_condition_309115' (line 140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 140, 17), 'if_condition_309115', if_condition_309115)
        # SSA begins for if statement (line 140)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 143):
        
        # Assigning a Name to a Name (line 143):
        # Getting the type of 'True' (line 143)
        True_309116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 30), 'True')
        # Assigning a type to the variable 'seenletters' (line 143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 143, 16), 'seenletters', True_309116)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'nextchar' (line 144)
        nextchar_309117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 19), 'nextchar')
        unicode_309118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 144, 31), 'unicode', u'.')
        # Applying the binary operator '==' (line 144)
        result_eq_309119 = python_operator(stypy.reporting.localization.Localization(__file__, 144, 19), '==', nextchar_309117, unicode_309118)
        
        
        # Call to isword(...): (line 144)
        # Processing the call arguments (line 144)
        # Getting the type of 'nextchar' (line 144)
        nextchar_309122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 50), 'nextchar', False)
        # Processing the call keyword arguments (line 144)
        kwargs_309123 = {}
        # Getting the type of 'self' (line 144)
        self_309120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 38), 'self', False)
        # Obtaining the member 'isword' of a type (line 144)
        isword_309121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 144, 38), self_309120, 'isword')
        # Calling isword(args, kwargs) (line 144)
        isword_call_result_309124 = invoke(stypy.reporting.localization.Localization(__file__, 144, 38), isword_309121, *[nextchar_309122], **kwargs_309123)
        
        # Applying the binary operator 'or' (line 144)
        result_or_keyword_309125 = python_operator(stypy.reporting.localization.Localization(__file__, 144, 19), 'or', result_eq_309119, isword_call_result_309124)
        
        # Testing the type of an if condition (line 144)
        if_condition_309126 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 144, 16), result_or_keyword_309125)
        # Assigning a type to the variable 'if_condition_309126' (line 144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 144, 16), 'if_condition_309126', if_condition_309126)
        # SSA begins for if statement (line 144)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'token' (line 145)
        token_309127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 20), 'token')
        # Getting the type of 'nextchar' (line 145)
        nextchar_309128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 29), 'nextchar')
        # Applying the binary operator '+=' (line 145)
        result_iadd_309129 = python_operator(stypy.reporting.localization.Localization(__file__, 145, 20), '+=', token_309127, nextchar_309128)
        # Assigning a type to the variable 'token' (line 145)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 145, 20), 'token', result_iadd_309129)
        
        # SSA branch for the else part of an if statement (line 144)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Call to isnum(...): (line 146)
        # Processing the call arguments (line 146)
        # Getting the type of 'nextchar' (line 146)
        nextchar_309132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 32), 'nextchar', False)
        # Processing the call keyword arguments (line 146)
        kwargs_309133 = {}
        # Getting the type of 'self' (line 146)
        self_309130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 21), 'self', False)
        # Obtaining the member 'isnum' of a type (line 146)
        isnum_309131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 146, 21), self_309130, 'isnum')
        # Calling isnum(args, kwargs) (line 146)
        isnum_call_result_309134 = invoke(stypy.reporting.localization.Localization(__file__, 146, 21), isnum_309131, *[nextchar_309132], **kwargs_309133)
        
        
        
        # Obtaining the type of the subscript
        int_309135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 146, 52), 'int')
        # Getting the type of 'token' (line 146)
        token_309136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 46), 'token')
        # Obtaining the member '__getitem__' of a type (line 146)
        getitem___309137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 146, 46), token_309136, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 146)
        subscript_call_result_309138 = invoke(stypy.reporting.localization.Localization(__file__, 146, 46), getitem___309137, int_309135)
        
        unicode_309139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 146, 59), 'unicode', u'.')
        # Applying the binary operator '==' (line 146)
        result_eq_309140 = python_operator(stypy.reporting.localization.Localization(__file__, 146, 46), '==', subscript_call_result_309138, unicode_309139)
        
        # Applying the binary operator 'and' (line 146)
        result_and_keyword_309141 = python_operator(stypy.reporting.localization.Localization(__file__, 146, 21), 'and', isnum_call_result_309134, result_eq_309140)
        
        # Testing the type of an if condition (line 146)
        if_condition_309142 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 146, 21), result_and_keyword_309141)
        # Assigning a type to the variable 'if_condition_309142' (line 146)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 146, 21), 'if_condition_309142', if_condition_309142)
        # SSA begins for if statement (line 146)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'token' (line 147)
        token_309143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 20), 'token')
        # Getting the type of 'nextchar' (line 147)
        nextchar_309144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 29), 'nextchar')
        # Applying the binary operator '+=' (line 147)
        result_iadd_309145 = python_operator(stypy.reporting.localization.Localization(__file__, 147, 20), '+=', token_309143, nextchar_309144)
        # Assigning a type to the variable 'token' (line 147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 147, 20), 'token', result_iadd_309145)
        
        
        # Assigning a Str to a Name (line 148):
        
        # Assigning a Str to a Name (line 148):
        unicode_309146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 28), 'unicode', u'0.')
        # Assigning a type to the variable 'state' (line 148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 148, 20), 'state', unicode_309146)
        # SSA branch for the else part of an if statement (line 146)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 150)
        # Processing the call arguments (line 150)
        # Getting the type of 'nextchar' (line 150)
        nextchar_309150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 42), 'nextchar', False)
        # Processing the call keyword arguments (line 150)
        kwargs_309151 = {}
        # Getting the type of 'self' (line 150)
        self_309147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 20), 'self', False)
        # Obtaining the member 'charstack' of a type (line 150)
        charstack_309148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 150, 20), self_309147, 'charstack')
        # Obtaining the member 'append' of a type (line 150)
        append_309149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 150, 20), charstack_309148, 'append')
        # Calling append(args, kwargs) (line 150)
        append_call_result_309152 = invoke(stypy.reporting.localization.Localization(__file__, 150, 20), append_309149, *[nextchar_309150], **kwargs_309151)
        
        # SSA join for if statement (line 146)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 144)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 140)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'state' (line 152)
        state_309153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 17), 'state')
        unicode_309154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 152, 26), 'unicode', u'0.')
        # Applying the binary operator '==' (line 152)
        result_eq_309155 = python_operator(stypy.reporting.localization.Localization(__file__, 152, 17), '==', state_309153, unicode_309154)
        
        # Testing the type of an if condition (line 152)
        if_condition_309156 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 152, 17), result_eq_309155)
        # Assigning a type to the variable 'if_condition_309156' (line 152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 152, 17), 'if_condition_309156', if_condition_309156)
        # SSA begins for if statement (line 152)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'nextchar' (line 155)
        nextchar_309157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 19), 'nextchar')
        unicode_309158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 155, 31), 'unicode', u'.')
        # Applying the binary operator '==' (line 155)
        result_eq_309159 = python_operator(stypy.reporting.localization.Localization(__file__, 155, 19), '==', nextchar_309157, unicode_309158)
        
        
        # Call to isnum(...): (line 155)
        # Processing the call arguments (line 155)
        # Getting the type of 'nextchar' (line 155)
        nextchar_309162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 49), 'nextchar', False)
        # Processing the call keyword arguments (line 155)
        kwargs_309163 = {}
        # Getting the type of 'self' (line 155)
        self_309160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 38), 'self', False)
        # Obtaining the member 'isnum' of a type (line 155)
        isnum_309161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 38), self_309160, 'isnum')
        # Calling isnum(args, kwargs) (line 155)
        isnum_call_result_309164 = invoke(stypy.reporting.localization.Localization(__file__, 155, 38), isnum_309161, *[nextchar_309162], **kwargs_309163)
        
        # Applying the binary operator 'or' (line 155)
        result_or_keyword_309165 = python_operator(stypy.reporting.localization.Localization(__file__, 155, 19), 'or', result_eq_309159, isnum_call_result_309164)
        
        # Testing the type of an if condition (line 155)
        if_condition_309166 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 155, 16), result_or_keyword_309165)
        # Assigning a type to the variable 'if_condition_309166' (line 155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 155, 16), 'if_condition_309166', if_condition_309166)
        # SSA begins for if statement (line 155)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'token' (line 156)
        token_309167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 20), 'token')
        # Getting the type of 'nextchar' (line 156)
        nextchar_309168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 29), 'nextchar')
        # Applying the binary operator '+=' (line 156)
        result_iadd_309169 = python_operator(stypy.reporting.localization.Localization(__file__, 156, 20), '+=', token_309167, nextchar_309168)
        # Assigning a type to the variable 'token' (line 156)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 156, 20), 'token', result_iadd_309169)
        
        # SSA branch for the else part of an if statement (line 155)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Call to isword(...): (line 157)
        # Processing the call arguments (line 157)
        # Getting the type of 'nextchar' (line 157)
        nextchar_309172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 33), 'nextchar', False)
        # Processing the call keyword arguments (line 157)
        kwargs_309173 = {}
        # Getting the type of 'self' (line 157)
        self_309170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 21), 'self', False)
        # Obtaining the member 'isword' of a type (line 157)
        isword_309171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 21), self_309170, 'isword')
        # Calling isword(args, kwargs) (line 157)
        isword_call_result_309174 = invoke(stypy.reporting.localization.Localization(__file__, 157, 21), isword_309171, *[nextchar_309172], **kwargs_309173)
        
        
        
        # Obtaining the type of the subscript
        int_309175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 157, 53), 'int')
        # Getting the type of 'token' (line 157)
        token_309176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 47), 'token')
        # Obtaining the member '__getitem__' of a type (line 157)
        getitem___309177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 47), token_309176, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 157)
        subscript_call_result_309178 = invoke(stypy.reporting.localization.Localization(__file__, 157, 47), getitem___309177, int_309175)
        
        unicode_309179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 157, 60), 'unicode', u'.')
        # Applying the binary operator '==' (line 157)
        result_eq_309180 = python_operator(stypy.reporting.localization.Localization(__file__, 157, 47), '==', subscript_call_result_309178, unicode_309179)
        
        # Applying the binary operator 'and' (line 157)
        result_and_keyword_309181 = python_operator(stypy.reporting.localization.Localization(__file__, 157, 21), 'and', isword_call_result_309174, result_eq_309180)
        
        # Testing the type of an if condition (line 157)
        if_condition_309182 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 157, 21), result_and_keyword_309181)
        # Assigning a type to the variable 'if_condition_309182' (line 157)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 157, 21), 'if_condition_309182', if_condition_309182)
        # SSA begins for if statement (line 157)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'token' (line 158)
        token_309183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 20), 'token')
        # Getting the type of 'nextchar' (line 158)
        nextchar_309184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 29), 'nextchar')
        # Applying the binary operator '+=' (line 158)
        result_iadd_309185 = python_operator(stypy.reporting.localization.Localization(__file__, 158, 20), '+=', token_309183, nextchar_309184)
        # Assigning a type to the variable 'token' (line 158)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 20), 'token', result_iadd_309185)
        
        
        # Assigning a Str to a Name (line 159):
        
        # Assigning a Str to a Name (line 159):
        unicode_309186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 28), 'unicode', u'a.')
        # Assigning a type to the variable 'state' (line 159)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 20), 'state', unicode_309186)
        # SSA branch for the else part of an if statement (line 157)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 161)
        # Processing the call arguments (line 161)
        # Getting the type of 'nextchar' (line 161)
        nextchar_309190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 42), 'nextchar', False)
        # Processing the call keyword arguments (line 161)
        kwargs_309191 = {}
        # Getting the type of 'self' (line 161)
        self_309187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 20), 'self', False)
        # Obtaining the member 'charstack' of a type (line 161)
        charstack_309188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 20), self_309187, 'charstack')
        # Obtaining the member 'append' of a type (line 161)
        append_309189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 20), charstack_309188, 'append')
        # Calling append(args, kwargs) (line 161)
        append_call_result_309192 = invoke(stypy.reporting.localization.Localization(__file__, 161, 20), append_309189, *[nextchar_309190], **kwargs_309191)
        
        # SSA join for if statement (line 157)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 155)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 152)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 140)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 129)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 117)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 104)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 101)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for while statement (line 89)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'state' (line 164)
        state_309193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 12), 'state')
        
        # Obtaining an instance of the builtin type 'tuple' (line 164)
        tuple_309194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 164)
        # Adding element type (line 164)
        unicode_309195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 22), 'unicode', u'a.')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 164, 22), tuple_309194, unicode_309195)
        # Adding element type (line 164)
        unicode_309196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 28), 'unicode', u'0.')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 164, 22), tuple_309194, unicode_309196)
        
        # Applying the binary operator 'in' (line 164)
        result_contains_309197 = python_operator(stypy.reporting.localization.Localization(__file__, 164, 12), 'in', state_309193, tuple_309194)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'seenletters' (line 164)
        seenletters_309198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 39), 'seenletters')
        
        
        # Call to count(...): (line 164)
        # Processing the call arguments (line 164)
        unicode_309201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 66), 'unicode', u'.')
        # Processing the call keyword arguments (line 164)
        kwargs_309202 = {}
        # Getting the type of 'token' (line 164)
        token_309199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 54), 'token', False)
        # Obtaining the member 'count' of a type (line 164)
        count_309200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 164, 54), token_309199, 'count')
        # Calling count(args, kwargs) (line 164)
        count_call_result_309203 = invoke(stypy.reporting.localization.Localization(__file__, 164, 54), count_309200, *[unicode_309201], **kwargs_309202)
        
        int_309204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 73), 'int')
        # Applying the binary operator '>' (line 164)
        result_gt_309205 = python_operator(stypy.reporting.localization.Localization(__file__, 164, 54), '>', count_call_result_309203, int_309204)
        
        # Applying the binary operator 'or' (line 164)
        result_or_keyword_309206 = python_operator(stypy.reporting.localization.Localization(__file__, 164, 39), 'or', seenletters_309198, result_gt_309205)
        
        
        # Obtaining the type of the subscript
        int_309207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 45), 'int')
        # Getting the type of 'token' (line 165)
        token_309208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 39), 'token')
        # Obtaining the member '__getitem__' of a type (line 165)
        getitem___309209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 39), token_309208, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 165)
        subscript_call_result_309210 = invoke(stypy.reporting.localization.Localization(__file__, 165, 39), getitem___309209, int_309207)
        
        unicode_309211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 52), 'unicode', u'.,')
        # Applying the binary operator 'in' (line 165)
        result_contains_309212 = python_operator(stypy.reporting.localization.Localization(__file__, 165, 39), 'in', subscript_call_result_309210, unicode_309211)
        
        # Applying the binary operator 'or' (line 164)
        result_or_keyword_309213 = python_operator(stypy.reporting.localization.Localization(__file__, 164, 39), 'or', result_or_keyword_309206, result_contains_309212)
        
        # Applying the binary operator 'and' (line 164)
        result_and_keyword_309214 = python_operator(stypy.reporting.localization.Localization(__file__, 164, 12), 'and', result_contains_309197, result_or_keyword_309213)
        
        # Testing the type of an if condition (line 164)
        if_condition_309215 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 164, 8), result_and_keyword_309214)
        # Assigning a type to the variable 'if_condition_309215' (line 164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 164, 8), 'if_condition_309215', if_condition_309215)
        # SSA begins for if statement (line 164)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 166):
        
        # Assigning a Call to a Name (line 166):
        
        # Call to split(...): (line 166)
        # Processing the call arguments (line 166)
        # Getting the type of 'token' (line 166)
        token_309219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 42), 'token', False)
        # Processing the call keyword arguments (line 166)
        kwargs_309220 = {}
        # Getting the type of 'self' (line 166)
        self_309216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 16), 'self', False)
        # Obtaining the member '_split_decimal' of a type (line 166)
        _split_decimal_309217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 166, 16), self_309216, '_split_decimal')
        # Obtaining the member 'split' of a type (line 166)
        split_309218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 166, 16), _split_decimal_309217, 'split')
        # Calling split(args, kwargs) (line 166)
        split_call_result_309221 = invoke(stypy.reporting.localization.Localization(__file__, 166, 16), split_309218, *[token_309219], **kwargs_309220)
        
        # Assigning a type to the variable 'l' (line 166)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 166, 12), 'l', split_call_result_309221)
        
        # Assigning a Subscript to a Name (line 167):
        
        # Assigning a Subscript to a Name (line 167):
        
        # Obtaining the type of the subscript
        int_309222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 167, 22), 'int')
        # Getting the type of 'l' (line 167)
        l_309223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 20), 'l')
        # Obtaining the member '__getitem__' of a type (line 167)
        getitem___309224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 167, 20), l_309223, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 167)
        subscript_call_result_309225 = invoke(stypy.reporting.localization.Localization(__file__, 167, 20), getitem___309224, int_309222)
        
        # Assigning a type to the variable 'token' (line 167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 167, 12), 'token', subscript_call_result_309225)
        
        
        # Obtaining the type of the subscript
        int_309226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 168, 25), 'int')
        slice_309227 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 168, 23), int_309226, None, None)
        # Getting the type of 'l' (line 168)
        l_309228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 23), 'l')
        # Obtaining the member '__getitem__' of a type (line 168)
        getitem___309229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 168, 23), l_309228, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 168)
        subscript_call_result_309230 = invoke(stypy.reporting.localization.Localization(__file__, 168, 23), getitem___309229, slice_309227)
        
        # Testing the type of a for loop iterable (line 168)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 168, 12), subscript_call_result_309230)
        # Getting the type of the for loop variable (line 168)
        for_loop_var_309231 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 168, 12), subscript_call_result_309230)
        # Assigning a type to the variable 'tok' (line 168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 12), 'tok', for_loop_var_309231)
        # SSA begins for a for statement (line 168)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'tok' (line 169)
        tok_309232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 19), 'tok')
        # Testing the type of an if condition (line 169)
        if_condition_309233 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 169, 16), tok_309232)
        # Assigning a type to the variable 'if_condition_309233' (line 169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 16), 'if_condition_309233', if_condition_309233)
        # SSA begins for if statement (line 169)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 170)
        # Processing the call arguments (line 170)
        # Getting the type of 'tok' (line 170)
        tok_309237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 43), 'tok', False)
        # Processing the call keyword arguments (line 170)
        kwargs_309238 = {}
        # Getting the type of 'self' (line 170)
        self_309234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 20), 'self', False)
        # Obtaining the member 'tokenstack' of a type (line 170)
        tokenstack_309235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 170, 20), self_309234, 'tokenstack')
        # Obtaining the member 'append' of a type (line 170)
        append_309236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 170, 20), tokenstack_309235, 'append')
        # Calling append(args, kwargs) (line 170)
        append_call_result_309239 = invoke(stypy.reporting.localization.Localization(__file__, 170, 20), append_309236, *[tok_309237], **kwargs_309238)
        
        # SSA join for if statement (line 169)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 164)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'state' (line 172)
        state_309240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 11), 'state')
        unicode_309241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 172, 20), 'unicode', u'0.')
        # Applying the binary operator '==' (line 172)
        result_eq_309242 = python_operator(stypy.reporting.localization.Localization(__file__, 172, 11), '==', state_309240, unicode_309241)
        
        
        
        # Call to count(...): (line 172)
        # Processing the call arguments (line 172)
        unicode_309245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 172, 41), 'unicode', u'.')
        # Processing the call keyword arguments (line 172)
        kwargs_309246 = {}
        # Getting the type of 'token' (line 172)
        token_309243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 29), 'token', False)
        # Obtaining the member 'count' of a type (line 172)
        count_309244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 29), token_309243, 'count')
        # Calling count(args, kwargs) (line 172)
        count_call_result_309247 = invoke(stypy.reporting.localization.Localization(__file__, 172, 29), count_309244, *[unicode_309245], **kwargs_309246)
        
        int_309248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 172, 49), 'int')
        # Applying the binary operator '==' (line 172)
        result_eq_309249 = python_operator(stypy.reporting.localization.Localization(__file__, 172, 29), '==', count_call_result_309247, int_309248)
        
        # Applying the binary operator 'and' (line 172)
        result_and_keyword_309250 = python_operator(stypy.reporting.localization.Localization(__file__, 172, 11), 'and', result_eq_309242, result_eq_309249)
        
        # Testing the type of an if condition (line 172)
        if_condition_309251 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 172, 8), result_and_keyword_309250)
        # Assigning a type to the variable 'if_condition_309251' (line 172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 172, 8), 'if_condition_309251', if_condition_309251)
        # SSA begins for if statement (line 172)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 173):
        
        # Assigning a Call to a Name (line 173):
        
        # Call to replace(...): (line 173)
        # Processing the call arguments (line 173)
        unicode_309254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 173, 34), 'unicode', u',')
        unicode_309255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 173, 39), 'unicode', u'.')
        # Processing the call keyword arguments (line 173)
        kwargs_309256 = {}
        # Getting the type of 'token' (line 173)
        token_309252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 20), 'token', False)
        # Obtaining the member 'replace' of a type (line 173)
        replace_309253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 20), token_309252, 'replace')
        # Calling replace(args, kwargs) (line 173)
        replace_call_result_309257 = invoke(stypy.reporting.localization.Localization(__file__, 173, 20), replace_309253, *[unicode_309254, unicode_309255], **kwargs_309256)
        
        # Assigning a type to the variable 'token' (line 173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 12), 'token', replace_call_result_309257)
        # SSA join for if statement (line 172)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'token' (line 175)
        token_309258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 15), 'token')
        # Assigning a type to the variable 'stypy_return_type' (line 175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 8), 'stypy_return_type', token_309258)
        
        # ################# End of 'get_token(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_token' in the type store
        # Getting the type of 'stypy_return_type' (line 68)
        stypy_return_type_309259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309259)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_token'
        return stypy_return_type_309259


    @norecursion
    def __iter__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__iter__'
        module_type_store = module_type_store.open_function_context('__iter__', 177, 4, False)
        # Assigning a type to the variable 'self' (line 178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _timelex.__iter__.__dict__.__setitem__('stypy_localization', localization)
        _timelex.__iter__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _timelex.__iter__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _timelex.__iter__.__dict__.__setitem__('stypy_function_name', '_timelex.__iter__')
        _timelex.__iter__.__dict__.__setitem__('stypy_param_names_list', [])
        _timelex.__iter__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _timelex.__iter__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _timelex.__iter__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _timelex.__iter__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _timelex.__iter__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _timelex.__iter__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_timelex.__iter__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__iter__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__iter__(...)' code ##################

        # Getting the type of 'self' (line 178)
        self_309260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 8), 'stypy_return_type', self_309260)
        
        # ################# End of '__iter__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__iter__' in the type store
        # Getting the type of 'stypy_return_type' (line 177)
        stypy_return_type_309261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309261)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__iter__'
        return stypy_return_type_309261


    @norecursion
    def __next__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__next__'
        module_type_store = module_type_store.open_function_context('__next__', 180, 4, False)
        # Assigning a type to the variable 'self' (line 181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 181, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _timelex.__next__.__dict__.__setitem__('stypy_localization', localization)
        _timelex.__next__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _timelex.__next__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _timelex.__next__.__dict__.__setitem__('stypy_function_name', '_timelex.__next__')
        _timelex.__next__.__dict__.__setitem__('stypy_param_names_list', [])
        _timelex.__next__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _timelex.__next__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _timelex.__next__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _timelex.__next__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _timelex.__next__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _timelex.__next__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_timelex.__next__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__next__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__next__(...)' code ##################

        
        # Assigning a Call to a Name (line 181):
        
        # Assigning a Call to a Name (line 181):
        
        # Call to get_token(...): (line 181)
        # Processing the call keyword arguments (line 181)
        kwargs_309264 = {}
        # Getting the type of 'self' (line 181)
        self_309262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 16), 'self', False)
        # Obtaining the member 'get_token' of a type (line 181)
        get_token_309263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 16), self_309262, 'get_token')
        # Calling get_token(args, kwargs) (line 181)
        get_token_call_result_309265 = invoke(stypy.reporting.localization.Localization(__file__, 181, 16), get_token_309263, *[], **kwargs_309264)
        
        # Assigning a type to the variable 'token' (line 181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 181, 8), 'token', get_token_call_result_309265)
        
        # Type idiom detected: calculating its left and rigth part (line 182)
        # Getting the type of 'token' (line 182)
        token_309266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 11), 'token')
        # Getting the type of 'None' (line 182)
        None_309267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 20), 'None')
        
        (may_be_309268, more_types_in_union_309269) = may_be_none(token_309266, None_309267)

        if may_be_309268:

            if more_types_in_union_309269:
                # Runtime conditional SSA (line 182)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'StopIteration' (line 183)
            StopIteration_309270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 18), 'StopIteration')
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 183, 12), StopIteration_309270, 'raise parameter', BaseException)

            if more_types_in_union_309269:
                # SSA join for if statement (line 182)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'token' (line 185)
        token_309271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 15), 'token')
        # Assigning a type to the variable 'stypy_return_type' (line 185)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 185, 8), 'stypy_return_type', token_309271)
        
        # ################# End of '__next__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__next__' in the type store
        # Getting the type of 'stypy_return_type' (line 180)
        stypy_return_type_309272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309272)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__next__'
        return stypy_return_type_309272


    @norecursion
    def next(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'next'
        module_type_store = module_type_store.open_function_context('next', 187, 4, False)
        # Assigning a type to the variable 'self' (line 188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 188, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _timelex.next.__dict__.__setitem__('stypy_localization', localization)
        _timelex.next.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _timelex.next.__dict__.__setitem__('stypy_type_store', module_type_store)
        _timelex.next.__dict__.__setitem__('stypy_function_name', '_timelex.next')
        _timelex.next.__dict__.__setitem__('stypy_param_names_list', [])
        _timelex.next.__dict__.__setitem__('stypy_varargs_param_name', None)
        _timelex.next.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _timelex.next.__dict__.__setitem__('stypy_call_defaults', defaults)
        _timelex.next.__dict__.__setitem__('stypy_call_varargs', varargs)
        _timelex.next.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _timelex.next.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_timelex.next', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'next', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'next(...)' code ##################

        
        # Call to __next__(...): (line 188)
        # Processing the call keyword arguments (line 188)
        kwargs_309275 = {}
        # Getting the type of 'self' (line 188)
        self_309273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 15), 'self', False)
        # Obtaining the member '__next__' of a type (line 188)
        next___309274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 15), self_309273, '__next__')
        # Calling __next__(args, kwargs) (line 188)
        next___call_result_309276 = invoke(stypy.reporting.localization.Localization(__file__, 188, 15), next___309274, *[], **kwargs_309275)
        
        # Assigning a type to the variable 'stypy_return_type' (line 188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 188, 8), 'stypy_return_type', next___call_result_309276)
        
        # ################# End of 'next(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'next' in the type store
        # Getting the type of 'stypy_return_type' (line 187)
        stypy_return_type_309277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309277)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'next'
        return stypy_return_type_309277


    @norecursion
    def split(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'split'
        module_type_store = module_type_store.open_function_context('split', 190, 4, False)
        # Assigning a type to the variable 'self' (line 191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 191, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _timelex.split.__dict__.__setitem__('stypy_localization', localization)
        _timelex.split.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _timelex.split.__dict__.__setitem__('stypy_type_store', module_type_store)
        _timelex.split.__dict__.__setitem__('stypy_function_name', '_timelex.split')
        _timelex.split.__dict__.__setitem__('stypy_param_names_list', ['s'])
        _timelex.split.__dict__.__setitem__('stypy_varargs_param_name', None)
        _timelex.split.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _timelex.split.__dict__.__setitem__('stypy_call_defaults', defaults)
        _timelex.split.__dict__.__setitem__('stypy_call_varargs', varargs)
        _timelex.split.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _timelex.split.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_timelex.split', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'split', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'split(...)' code ##################

        
        # Call to list(...): (line 192)
        # Processing the call arguments (line 192)
        
        # Call to cls(...): (line 192)
        # Processing the call arguments (line 192)
        # Getting the type of 's' (line 192)
        s_309280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 24), 's', False)
        # Processing the call keyword arguments (line 192)
        kwargs_309281 = {}
        # Getting the type of 'cls' (line 192)
        cls_309279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 20), 'cls', False)
        # Calling cls(args, kwargs) (line 192)
        cls_call_result_309282 = invoke(stypy.reporting.localization.Localization(__file__, 192, 20), cls_309279, *[s_309280], **kwargs_309281)
        
        # Processing the call keyword arguments (line 192)
        kwargs_309283 = {}
        # Getting the type of 'list' (line 192)
        list_309278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 15), 'list', False)
        # Calling list(args, kwargs) (line 192)
        list_call_result_309284 = invoke(stypy.reporting.localization.Localization(__file__, 192, 15), list_309278, *[cls_call_result_309282], **kwargs_309283)
        
        # Assigning a type to the variable 'stypy_return_type' (line 192)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 192, 8), 'stypy_return_type', list_call_result_309284)
        
        # ################# End of 'split(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'split' in the type store
        # Getting the type of 'stypy_return_type' (line 190)
        stypy_return_type_309285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309285)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'split'
        return stypy_return_type_309285


    @norecursion
    def isword(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'isword'
        module_type_store = module_type_store.open_function_context('isword', 194, 4, False)
        # Assigning a type to the variable 'self' (line 195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _timelex.isword.__dict__.__setitem__('stypy_localization', localization)
        _timelex.isword.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _timelex.isword.__dict__.__setitem__('stypy_type_store', module_type_store)
        _timelex.isword.__dict__.__setitem__('stypy_function_name', '_timelex.isword')
        _timelex.isword.__dict__.__setitem__('stypy_param_names_list', ['nextchar'])
        _timelex.isword.__dict__.__setitem__('stypy_varargs_param_name', None)
        _timelex.isword.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _timelex.isword.__dict__.__setitem__('stypy_call_defaults', defaults)
        _timelex.isword.__dict__.__setitem__('stypy_call_varargs', varargs)
        _timelex.isword.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _timelex.isword.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_timelex.isword', ['nextchar'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'isword', localization, ['nextchar'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'isword(...)' code ##################

        unicode_309286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 196, 8), 'unicode', u' Whether or not the next character is part of a word ')
        
        # Call to isalpha(...): (line 197)
        # Processing the call keyword arguments (line 197)
        kwargs_309289 = {}
        # Getting the type of 'nextchar' (line 197)
        nextchar_309287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 15), 'nextchar', False)
        # Obtaining the member 'isalpha' of a type (line 197)
        isalpha_309288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 197, 15), nextchar_309287, 'isalpha')
        # Calling isalpha(args, kwargs) (line 197)
        isalpha_call_result_309290 = invoke(stypy.reporting.localization.Localization(__file__, 197, 15), isalpha_309288, *[], **kwargs_309289)
        
        # Assigning a type to the variable 'stypy_return_type' (line 197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 197, 8), 'stypy_return_type', isalpha_call_result_309290)
        
        # ################# End of 'isword(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'isword' in the type store
        # Getting the type of 'stypy_return_type' (line 194)
        stypy_return_type_309291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309291)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'isword'
        return stypy_return_type_309291


    @norecursion
    def isnum(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'isnum'
        module_type_store = module_type_store.open_function_context('isnum', 199, 4, False)
        # Assigning a type to the variable 'self' (line 200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 200, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _timelex.isnum.__dict__.__setitem__('stypy_localization', localization)
        _timelex.isnum.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _timelex.isnum.__dict__.__setitem__('stypy_type_store', module_type_store)
        _timelex.isnum.__dict__.__setitem__('stypy_function_name', '_timelex.isnum')
        _timelex.isnum.__dict__.__setitem__('stypy_param_names_list', ['nextchar'])
        _timelex.isnum.__dict__.__setitem__('stypy_varargs_param_name', None)
        _timelex.isnum.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _timelex.isnum.__dict__.__setitem__('stypy_call_defaults', defaults)
        _timelex.isnum.__dict__.__setitem__('stypy_call_varargs', varargs)
        _timelex.isnum.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _timelex.isnum.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_timelex.isnum', ['nextchar'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'isnum', localization, ['nextchar'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'isnum(...)' code ##################

        unicode_309292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 201, 8), 'unicode', u' Whether the next character is part of a number ')
        
        # Call to isdigit(...): (line 202)
        # Processing the call keyword arguments (line 202)
        kwargs_309295 = {}
        # Getting the type of 'nextchar' (line 202)
        nextchar_309293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 15), 'nextchar', False)
        # Obtaining the member 'isdigit' of a type (line 202)
        isdigit_309294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 15), nextchar_309293, 'isdigit')
        # Calling isdigit(args, kwargs) (line 202)
        isdigit_call_result_309296 = invoke(stypy.reporting.localization.Localization(__file__, 202, 15), isdigit_309294, *[], **kwargs_309295)
        
        # Assigning a type to the variable 'stypy_return_type' (line 202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 202, 8), 'stypy_return_type', isdigit_call_result_309296)
        
        # ################# End of 'isnum(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'isnum' in the type store
        # Getting the type of 'stypy_return_type' (line 199)
        stypy_return_type_309297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309297)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'isnum'
        return stypy_return_type_309297


    @norecursion
    def isspace(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'isspace'
        module_type_store = module_type_store.open_function_context('isspace', 204, 4, False)
        # Assigning a type to the variable 'self' (line 205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _timelex.isspace.__dict__.__setitem__('stypy_localization', localization)
        _timelex.isspace.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _timelex.isspace.__dict__.__setitem__('stypy_type_store', module_type_store)
        _timelex.isspace.__dict__.__setitem__('stypy_function_name', '_timelex.isspace')
        _timelex.isspace.__dict__.__setitem__('stypy_param_names_list', ['nextchar'])
        _timelex.isspace.__dict__.__setitem__('stypy_varargs_param_name', None)
        _timelex.isspace.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _timelex.isspace.__dict__.__setitem__('stypy_call_defaults', defaults)
        _timelex.isspace.__dict__.__setitem__('stypy_call_varargs', varargs)
        _timelex.isspace.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _timelex.isspace.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_timelex.isspace', ['nextchar'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'isspace', localization, ['nextchar'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'isspace(...)' code ##################

        unicode_309298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 206, 8), 'unicode', u' Whether the next character is whitespace ')
        
        # Call to isspace(...): (line 207)
        # Processing the call keyword arguments (line 207)
        kwargs_309301 = {}
        # Getting the type of 'nextchar' (line 207)
        nextchar_309299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 15), 'nextchar', False)
        # Obtaining the member 'isspace' of a type (line 207)
        isspace_309300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 15), nextchar_309299, 'isspace')
        # Calling isspace(args, kwargs) (line 207)
        isspace_call_result_309302 = invoke(stypy.reporting.localization.Localization(__file__, 207, 15), isspace_309300, *[], **kwargs_309301)
        
        # Assigning a type to the variable 'stypy_return_type' (line 207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 207, 8), 'stypy_return_type', isspace_call_result_309302)
        
        # ################# End of 'isspace(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'isspace' in the type store
        # Getting the type of 'stypy_return_type' (line 204)
        stypy_return_type_309303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309303)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'isspace'
        return stypy_return_type_309303


# Assigning a type to the variable '_timelex' (line 48)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 48, 0), '_timelex', _timelex)

# Assigning a Call to a Name (line 50):

# Call to compile(...): (line 50)
# Processing the call arguments (line 50)
unicode_309306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 50, 32), 'unicode', u'([.,])')
# Processing the call keyword arguments (line 50)
kwargs_309307 = {}
# Getting the type of 're' (line 50)
re_309304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 50, 21), 're', False)
# Obtaining the member 'compile' of a type (line 50)
compile_309305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 50, 21), re_309304, 'compile')
# Calling compile(args, kwargs) (line 50)
compile_call_result_309308 = invoke(stypy.reporting.localization.Localization(__file__, 50, 21), compile_309305, *[unicode_309306], **kwargs_309307)

# Getting the type of '_timelex'
_timelex_309309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_timelex')
# Setting the type of the member '_split_decimal' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _timelex_309309, '_split_decimal', compile_call_result_309308)
# Declaration of the '_resultbase' class

class _resultbase(object, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 212, 4, False)
        # Assigning a type to the variable 'self' (line 213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_resultbase.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Getting the type of 'self' (line 213)
        self_309310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 20), 'self')
        # Obtaining the member '__slots__' of a type (line 213)
        slots___309311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 213, 20), self_309310, '__slots__')
        # Testing the type of a for loop iterable (line 213)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 213, 8), slots___309311)
        # Getting the type of the for loop variable (line 213)
        for_loop_var_309312 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 213, 8), slots___309311)
        # Assigning a type to the variable 'attr' (line 213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 8), 'attr', for_loop_var_309312)
        # SSA begins for a for statement (line 213)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to setattr(...): (line 214)
        # Processing the call arguments (line 214)
        # Getting the type of 'self' (line 214)
        self_309314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 20), 'self', False)
        # Getting the type of 'attr' (line 214)
        attr_309315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 26), 'attr', False)
        # Getting the type of 'None' (line 214)
        None_309316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 32), 'None', False)
        # Processing the call keyword arguments (line 214)
        kwargs_309317 = {}
        # Getting the type of 'setattr' (line 214)
        setattr_309313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 12), 'setattr', False)
        # Calling setattr(args, kwargs) (line 214)
        setattr_call_result_309318 = invoke(stypy.reporting.localization.Localization(__file__, 214, 12), setattr_309313, *[self_309314, attr_309315, None_309316], **kwargs_309317)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _repr(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_repr'
        module_type_store = module_type_store.open_function_context('_repr', 216, 4, False)
        # Assigning a type to the variable 'self' (line 217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _resultbase._repr.__dict__.__setitem__('stypy_localization', localization)
        _resultbase._repr.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _resultbase._repr.__dict__.__setitem__('stypy_type_store', module_type_store)
        _resultbase._repr.__dict__.__setitem__('stypy_function_name', '_resultbase._repr')
        _resultbase._repr.__dict__.__setitem__('stypy_param_names_list', ['classname'])
        _resultbase._repr.__dict__.__setitem__('stypy_varargs_param_name', None)
        _resultbase._repr.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _resultbase._repr.__dict__.__setitem__('stypy_call_defaults', defaults)
        _resultbase._repr.__dict__.__setitem__('stypy_call_varargs', varargs)
        _resultbase._repr.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _resultbase._repr.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_resultbase._repr', ['classname'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_repr', localization, ['classname'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_repr(...)' code ##################

        
        # Assigning a List to a Name (line 217):
        
        # Assigning a List to a Name (line 217):
        
        # Obtaining an instance of the builtin type 'list' (line 217)
        list_309319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 217, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 217)
        
        # Assigning a type to the variable 'l' (line 217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 8), 'l', list_309319)
        
        # Getting the type of 'self' (line 218)
        self_309320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 20), 'self')
        # Obtaining the member '__slots__' of a type (line 218)
        slots___309321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 218, 20), self_309320, '__slots__')
        # Testing the type of a for loop iterable (line 218)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 218, 8), slots___309321)
        # Getting the type of the for loop variable (line 218)
        for_loop_var_309322 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 218, 8), slots___309321)
        # Assigning a type to the variable 'attr' (line 218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 218, 8), 'attr', for_loop_var_309322)
        # SSA begins for a for statement (line 218)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 219):
        
        # Assigning a Call to a Name (line 219):
        
        # Call to getattr(...): (line 219)
        # Processing the call arguments (line 219)
        # Getting the type of 'self' (line 219)
        self_309324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 28), 'self', False)
        # Getting the type of 'attr' (line 219)
        attr_309325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 34), 'attr', False)
        # Processing the call keyword arguments (line 219)
        kwargs_309326 = {}
        # Getting the type of 'getattr' (line 219)
        getattr_309323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 20), 'getattr', False)
        # Calling getattr(args, kwargs) (line 219)
        getattr_call_result_309327 = invoke(stypy.reporting.localization.Localization(__file__, 219, 20), getattr_309323, *[self_309324, attr_309325], **kwargs_309326)
        
        # Assigning a type to the variable 'value' (line 219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 219, 12), 'value', getattr_call_result_309327)
        
        # Type idiom detected: calculating its left and rigth part (line 220)
        # Getting the type of 'value' (line 220)
        value_309328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 12), 'value')
        # Getting the type of 'None' (line 220)
        None_309329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 28), 'None')
        
        (may_be_309330, more_types_in_union_309331) = may_not_be_none(value_309328, None_309329)

        if may_be_309330:

            if more_types_in_union_309331:
                # Runtime conditional SSA (line 220)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to append(...): (line 221)
            # Processing the call arguments (line 221)
            unicode_309334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 221, 25), 'unicode', u'%s=%s')
            
            # Obtaining an instance of the builtin type 'tuple' (line 221)
            tuple_309335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 221, 36), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 221)
            # Adding element type (line 221)
            # Getting the type of 'attr' (line 221)
            attr_309336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 36), 'attr', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 221, 36), tuple_309335, attr_309336)
            # Adding element type (line 221)
            
            # Call to repr(...): (line 221)
            # Processing the call arguments (line 221)
            # Getting the type of 'value' (line 221)
            value_309338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 47), 'value', False)
            # Processing the call keyword arguments (line 221)
            kwargs_309339 = {}
            # Getting the type of 'repr' (line 221)
            repr_309337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 42), 'repr', False)
            # Calling repr(args, kwargs) (line 221)
            repr_call_result_309340 = invoke(stypy.reporting.localization.Localization(__file__, 221, 42), repr_309337, *[value_309338], **kwargs_309339)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 221, 36), tuple_309335, repr_call_result_309340)
            
            # Applying the binary operator '%' (line 221)
            result_mod_309341 = python_operator(stypy.reporting.localization.Localization(__file__, 221, 25), '%', unicode_309334, tuple_309335)
            
            # Processing the call keyword arguments (line 221)
            kwargs_309342 = {}
            # Getting the type of 'l' (line 221)
            l_309332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 16), 'l', False)
            # Obtaining the member 'append' of a type (line 221)
            append_309333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 16), l_309332, 'append')
            # Calling append(args, kwargs) (line 221)
            append_call_result_309343 = invoke(stypy.reporting.localization.Localization(__file__, 221, 16), append_309333, *[result_mod_309341], **kwargs_309342)
            

            if more_types_in_union_309331:
                # SSA join for if statement (line 220)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        unicode_309344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 222, 15), 'unicode', u'%s(%s)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 222)
        tuple_309345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 222, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 222)
        # Adding element type (line 222)
        # Getting the type of 'classname' (line 222)
        classname_309346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 27), 'classname')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 222, 27), tuple_309345, classname_309346)
        # Adding element type (line 222)
        
        # Call to join(...): (line 222)
        # Processing the call arguments (line 222)
        # Getting the type of 'l' (line 222)
        l_309349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 48), 'l', False)
        # Processing the call keyword arguments (line 222)
        kwargs_309350 = {}
        unicode_309347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 222, 38), 'unicode', u', ')
        # Obtaining the member 'join' of a type (line 222)
        join_309348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 38), unicode_309347, 'join')
        # Calling join(args, kwargs) (line 222)
        join_call_result_309351 = invoke(stypy.reporting.localization.Localization(__file__, 222, 38), join_309348, *[l_309349], **kwargs_309350)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 222, 27), tuple_309345, join_call_result_309351)
        
        # Applying the binary operator '%' (line 222)
        result_mod_309352 = python_operator(stypy.reporting.localization.Localization(__file__, 222, 15), '%', unicode_309344, tuple_309345)
        
        # Assigning a type to the variable 'stypy_return_type' (line 222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 8), 'stypy_return_type', result_mod_309352)
        
        # ################# End of '_repr(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_repr' in the type store
        # Getting the type of 'stypy_return_type' (line 216)
        stypy_return_type_309353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309353)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_repr'
        return stypy_return_type_309353


    @norecursion
    def __len__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__len__'
        module_type_store = module_type_store.open_function_context('__len__', 224, 4, False)
        # Assigning a type to the variable 'self' (line 225)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _resultbase.__len__.__dict__.__setitem__('stypy_localization', localization)
        _resultbase.__len__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _resultbase.__len__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _resultbase.__len__.__dict__.__setitem__('stypy_function_name', '_resultbase.__len__')
        _resultbase.__len__.__dict__.__setitem__('stypy_param_names_list', [])
        _resultbase.__len__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _resultbase.__len__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _resultbase.__len__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _resultbase.__len__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _resultbase.__len__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _resultbase.__len__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_resultbase.__len__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__len__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__len__(...)' code ##################

        
        # Call to sum(...): (line 225)
        # Processing the call arguments (line 225)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 225, 20, True)
        # Calculating comprehension expression
        # Getting the type of 'self' (line 226)
        self_309362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 32), 'self', False)
        # Obtaining the member '__slots__' of a type (line 226)
        slots___309363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 226, 32), self_309362, '__slots__')
        comprehension_309364 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 225, 20), slots___309363)
        # Assigning a type to the variable 'attr' (line 225)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 20), 'attr', comprehension_309364)
        
        
        # Call to getattr(...): (line 225)
        # Processing the call arguments (line 225)
        # Getting the type of 'self' (line 225)
        self_309356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 28), 'self', False)
        # Getting the type of 'attr' (line 225)
        attr_309357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 34), 'attr', False)
        # Processing the call keyword arguments (line 225)
        kwargs_309358 = {}
        # Getting the type of 'getattr' (line 225)
        getattr_309355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 20), 'getattr', False)
        # Calling getattr(args, kwargs) (line 225)
        getattr_call_result_309359 = invoke(stypy.reporting.localization.Localization(__file__, 225, 20), getattr_309355, *[self_309356, attr_309357], **kwargs_309358)
        
        # Getting the type of 'None' (line 225)
        None_309360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 47), 'None', False)
        # Applying the binary operator 'isnot' (line 225)
        result_is_not_309361 = python_operator(stypy.reporting.localization.Localization(__file__, 225, 20), 'isnot', getattr_call_result_309359, None_309360)
        
        list_309365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 20), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 225, 20), list_309365, result_is_not_309361)
        # Processing the call keyword arguments (line 225)
        kwargs_309366 = {}
        # Getting the type of 'sum' (line 225)
        sum_309354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 16), 'sum', False)
        # Calling sum(args, kwargs) (line 225)
        sum_call_result_309367 = invoke(stypy.reporting.localization.Localization(__file__, 225, 16), sum_309354, *[list_309365], **kwargs_309366)
        
        # Assigning a type to the variable 'stypy_return_type' (line 225)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 8), 'stypy_return_type', sum_call_result_309367)
        
        # ################# End of '__len__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__len__' in the type store
        # Getting the type of 'stypy_return_type' (line 224)
        stypy_return_type_309368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309368)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__len__'
        return stypy_return_type_309368


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 228, 4, False)
        # Assigning a type to the variable 'self' (line 229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 229, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _resultbase.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        _resultbase.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _resultbase.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _resultbase.stypy__repr__.__dict__.__setitem__('stypy_function_name', '_resultbase.stypy__repr__')
        _resultbase.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        _resultbase.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _resultbase.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _resultbase.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _resultbase.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _resultbase.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _resultbase.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_resultbase.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        
        # Call to _repr(...): (line 229)
        # Processing the call arguments (line 229)
        # Getting the type of 'self' (line 229)
        self_309371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 26), 'self', False)
        # Obtaining the member '__class__' of a type (line 229)
        class___309372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 229, 26), self_309371, '__class__')
        # Obtaining the member '__name__' of a type (line 229)
        name___309373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 229, 26), class___309372, '__name__')
        # Processing the call keyword arguments (line 229)
        kwargs_309374 = {}
        # Getting the type of 'self' (line 229)
        self_309369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 15), 'self', False)
        # Obtaining the member '_repr' of a type (line 229)
        _repr_309370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 229, 15), self_309369, '_repr')
        # Calling _repr(args, kwargs) (line 229)
        _repr_call_result_309375 = invoke(stypy.reporting.localization.Localization(__file__, 229, 15), _repr_309370, *[name___309373], **kwargs_309374)
        
        # Assigning a type to the variable 'stypy_return_type' (line 229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 229, 8), 'stypy_return_type', _repr_call_result_309375)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 228)
        stypy_return_type_309376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309376)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_309376


# Assigning a type to the variable '_resultbase' (line 210)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 0), '_resultbase', _resultbase)
# Declaration of the 'parserinfo' class

class parserinfo(object, ):
    unicode_309377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, (-1)), 'unicode', u'\n    Class which handles what inputs are accepted. Subclass this to customize\n    the language and acceptable values for each parameter.\n\n    :param dayfirst:\n            Whether to interpret the first value in an ambiguous 3-integer date\n            (e.g. 01/05/09) as the day (``True``) or month (``False``). If\n            ``yearfirst`` is set to ``True``, this distinguishes between YDM\n            and YMD. Default is ``False``.\n\n    :param yearfirst:\n            Whether to interpret the first value in an ambiguous 3-integer date\n            (e.g. 01/05/09) as the year. If ``True``, the first number is taken\n            to be the year, otherwise the last number is taken to be the year.\n            Default is ``False``.\n    ')
    
    # Assigning a List to a Name (line 251):
    
    # Assigning a List to a Name (line 255):
    
    # Assigning a List to a Name (line 262):
    
    # Assigning a List to a Name (line 274):
    
    # Assigning a List to a Name (line 277):
    
    # Assigning a List to a Name (line 279):
    
    # Assigning a List to a Name (line 280):
    
    # Assigning a Dict to a Name (line 281):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 283)
        False_309378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 32), 'False')
        # Getting the type of 'False' (line 283)
        False_309379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 49), 'False')
        defaults = [False_309378, False_309379]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 283, 4, False)
        # Assigning a type to the variable 'self' (line 284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 284, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'parserinfo.__init__', ['dayfirst', 'yearfirst'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['dayfirst', 'yearfirst'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 284):
        
        # Assigning a Call to a Attribute (line 284):
        
        # Call to _convert(...): (line 284)
        # Processing the call arguments (line 284)
        # Getting the type of 'self' (line 284)
        self_309382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 35), 'self', False)
        # Obtaining the member 'JUMP' of a type (line 284)
        JUMP_309383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 284, 35), self_309382, 'JUMP')
        # Processing the call keyword arguments (line 284)
        kwargs_309384 = {}
        # Getting the type of 'self' (line 284)
        self_309380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 21), 'self', False)
        # Obtaining the member '_convert' of a type (line 284)
        _convert_309381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 284, 21), self_309380, '_convert')
        # Calling _convert(args, kwargs) (line 284)
        _convert_call_result_309385 = invoke(stypy.reporting.localization.Localization(__file__, 284, 21), _convert_309381, *[JUMP_309383], **kwargs_309384)
        
        # Getting the type of 'self' (line 284)
        self_309386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 8), 'self')
        # Setting the type of the member '_jump' of a type (line 284)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 284, 8), self_309386, '_jump', _convert_call_result_309385)
        
        # Assigning a Call to a Attribute (line 285):
        
        # Assigning a Call to a Attribute (line 285):
        
        # Call to _convert(...): (line 285)
        # Processing the call arguments (line 285)
        # Getting the type of 'self' (line 285)
        self_309389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 39), 'self', False)
        # Obtaining the member 'WEEKDAYS' of a type (line 285)
        WEEKDAYS_309390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 285, 39), self_309389, 'WEEKDAYS')
        # Processing the call keyword arguments (line 285)
        kwargs_309391 = {}
        # Getting the type of 'self' (line 285)
        self_309387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 25), 'self', False)
        # Obtaining the member '_convert' of a type (line 285)
        _convert_309388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 285, 25), self_309387, '_convert')
        # Calling _convert(args, kwargs) (line 285)
        _convert_call_result_309392 = invoke(stypy.reporting.localization.Localization(__file__, 285, 25), _convert_309388, *[WEEKDAYS_309390], **kwargs_309391)
        
        # Getting the type of 'self' (line 285)
        self_309393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 8), 'self')
        # Setting the type of the member '_weekdays' of a type (line 285)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 285, 8), self_309393, '_weekdays', _convert_call_result_309392)
        
        # Assigning a Call to a Attribute (line 286):
        
        # Assigning a Call to a Attribute (line 286):
        
        # Call to _convert(...): (line 286)
        # Processing the call arguments (line 286)
        # Getting the type of 'self' (line 286)
        self_309396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 37), 'self', False)
        # Obtaining the member 'MONTHS' of a type (line 286)
        MONTHS_309397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 37), self_309396, 'MONTHS')
        # Processing the call keyword arguments (line 286)
        kwargs_309398 = {}
        # Getting the type of 'self' (line 286)
        self_309394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 23), 'self', False)
        # Obtaining the member '_convert' of a type (line 286)
        _convert_309395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 23), self_309394, '_convert')
        # Calling _convert(args, kwargs) (line 286)
        _convert_call_result_309399 = invoke(stypy.reporting.localization.Localization(__file__, 286, 23), _convert_309395, *[MONTHS_309397], **kwargs_309398)
        
        # Getting the type of 'self' (line 286)
        self_309400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 8), 'self')
        # Setting the type of the member '_months' of a type (line 286)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 8), self_309400, '_months', _convert_call_result_309399)
        
        # Assigning a Call to a Attribute (line 287):
        
        # Assigning a Call to a Attribute (line 287):
        
        # Call to _convert(...): (line 287)
        # Processing the call arguments (line 287)
        # Getting the type of 'self' (line 287)
        self_309403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 34), 'self', False)
        # Obtaining the member 'HMS' of a type (line 287)
        HMS_309404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 287, 34), self_309403, 'HMS')
        # Processing the call keyword arguments (line 287)
        kwargs_309405 = {}
        # Getting the type of 'self' (line 287)
        self_309401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 20), 'self', False)
        # Obtaining the member '_convert' of a type (line 287)
        _convert_309402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 287, 20), self_309401, '_convert')
        # Calling _convert(args, kwargs) (line 287)
        _convert_call_result_309406 = invoke(stypy.reporting.localization.Localization(__file__, 287, 20), _convert_309402, *[HMS_309404], **kwargs_309405)
        
        # Getting the type of 'self' (line 287)
        self_309407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 8), 'self')
        # Setting the type of the member '_hms' of a type (line 287)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 287, 8), self_309407, '_hms', _convert_call_result_309406)
        
        # Assigning a Call to a Attribute (line 288):
        
        # Assigning a Call to a Attribute (line 288):
        
        # Call to _convert(...): (line 288)
        # Processing the call arguments (line 288)
        # Getting the type of 'self' (line 288)
        self_309410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 35), 'self', False)
        # Obtaining the member 'AMPM' of a type (line 288)
        AMPM_309411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 288, 35), self_309410, 'AMPM')
        # Processing the call keyword arguments (line 288)
        kwargs_309412 = {}
        # Getting the type of 'self' (line 288)
        self_309408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 21), 'self', False)
        # Obtaining the member '_convert' of a type (line 288)
        _convert_309409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 288, 21), self_309408, '_convert')
        # Calling _convert(args, kwargs) (line 288)
        _convert_call_result_309413 = invoke(stypy.reporting.localization.Localization(__file__, 288, 21), _convert_309409, *[AMPM_309411], **kwargs_309412)
        
        # Getting the type of 'self' (line 288)
        self_309414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 8), 'self')
        # Setting the type of the member '_ampm' of a type (line 288)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 288, 8), self_309414, '_ampm', _convert_call_result_309413)
        
        # Assigning a Call to a Attribute (line 289):
        
        # Assigning a Call to a Attribute (line 289):
        
        # Call to _convert(...): (line 289)
        # Processing the call arguments (line 289)
        # Getting the type of 'self' (line 289)
        self_309417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 38), 'self', False)
        # Obtaining the member 'UTCZONE' of a type (line 289)
        UTCZONE_309418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 38), self_309417, 'UTCZONE')
        # Processing the call keyword arguments (line 289)
        kwargs_309419 = {}
        # Getting the type of 'self' (line 289)
        self_309415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 24), 'self', False)
        # Obtaining the member '_convert' of a type (line 289)
        _convert_309416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 24), self_309415, '_convert')
        # Calling _convert(args, kwargs) (line 289)
        _convert_call_result_309420 = invoke(stypy.reporting.localization.Localization(__file__, 289, 24), _convert_309416, *[UTCZONE_309418], **kwargs_309419)
        
        # Getting the type of 'self' (line 289)
        self_309421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 8), 'self')
        # Setting the type of the member '_utczone' of a type (line 289)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 8), self_309421, '_utczone', _convert_call_result_309420)
        
        # Assigning a Call to a Attribute (line 290):
        
        # Assigning a Call to a Attribute (line 290):
        
        # Call to _convert(...): (line 290)
        # Processing the call arguments (line 290)
        # Getting the type of 'self' (line 290)
        self_309424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 38), 'self', False)
        # Obtaining the member 'PERTAIN' of a type (line 290)
        PERTAIN_309425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 38), self_309424, 'PERTAIN')
        # Processing the call keyword arguments (line 290)
        kwargs_309426 = {}
        # Getting the type of 'self' (line 290)
        self_309422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 24), 'self', False)
        # Obtaining the member '_convert' of a type (line 290)
        _convert_309423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 24), self_309422, '_convert')
        # Calling _convert(args, kwargs) (line 290)
        _convert_call_result_309427 = invoke(stypy.reporting.localization.Localization(__file__, 290, 24), _convert_309423, *[PERTAIN_309425], **kwargs_309426)
        
        # Getting the type of 'self' (line 290)
        self_309428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 8), 'self')
        # Setting the type of the member '_pertain' of a type (line 290)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 8), self_309428, '_pertain', _convert_call_result_309427)
        
        # Assigning a Name to a Attribute (line 292):
        
        # Assigning a Name to a Attribute (line 292):
        # Getting the type of 'dayfirst' (line 292)
        dayfirst_309429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 24), 'dayfirst')
        # Getting the type of 'self' (line 292)
        self_309430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 8), 'self')
        # Setting the type of the member 'dayfirst' of a type (line 292)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 292, 8), self_309430, 'dayfirst', dayfirst_309429)
        
        # Assigning a Name to a Attribute (line 293):
        
        # Assigning a Name to a Attribute (line 293):
        # Getting the type of 'yearfirst' (line 293)
        yearfirst_309431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 25), 'yearfirst')
        # Getting the type of 'self' (line 293)
        self_309432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 8), 'self')
        # Setting the type of the member 'yearfirst' of a type (line 293)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 8), self_309432, 'yearfirst', yearfirst_309431)
        
        # Assigning a Attribute to a Attribute (line 295):
        
        # Assigning a Attribute to a Attribute (line 295):
        
        # Call to localtime(...): (line 295)
        # Processing the call keyword arguments (line 295)
        kwargs_309435 = {}
        # Getting the type of 'time' (line 295)
        time_309433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 21), 'time', False)
        # Obtaining the member 'localtime' of a type (line 295)
        localtime_309434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 21), time_309433, 'localtime')
        # Calling localtime(args, kwargs) (line 295)
        localtime_call_result_309436 = invoke(stypy.reporting.localization.Localization(__file__, 295, 21), localtime_309434, *[], **kwargs_309435)
        
        # Obtaining the member 'tm_year' of a type (line 295)
        tm_year_309437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 21), localtime_call_result_309436, 'tm_year')
        # Getting the type of 'self' (line 295)
        self_309438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 8), 'self')
        # Setting the type of the member '_year' of a type (line 295)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 8), self_309438, '_year', tm_year_309437)
        
        # Assigning a BinOp to a Attribute (line 296):
        
        # Assigning a BinOp to a Attribute (line 296):
        # Getting the type of 'self' (line 296)
        self_309439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 24), 'self')
        # Obtaining the member '_year' of a type (line 296)
        _year_309440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 24), self_309439, '_year')
        int_309441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 296, 38), 'int')
        # Applying the binary operator '//' (line 296)
        result_floordiv_309442 = python_operator(stypy.reporting.localization.Localization(__file__, 296, 24), '//', _year_309440, int_309441)
        
        int_309443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 296, 44), 'int')
        # Applying the binary operator '*' (line 296)
        result_mul_309444 = python_operator(stypy.reporting.localization.Localization(__file__, 296, 42), '*', result_floordiv_309442, int_309443)
        
        # Getting the type of 'self' (line 296)
        self_309445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 8), 'self')
        # Setting the type of the member '_century' of a type (line 296)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 8), self_309445, '_century', result_mul_309444)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _convert(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_convert'
        module_type_store = module_type_store.open_function_context('_convert', 298, 4, False)
        # Assigning a type to the variable 'self' (line 299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 299, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        parserinfo._convert.__dict__.__setitem__('stypy_localization', localization)
        parserinfo._convert.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        parserinfo._convert.__dict__.__setitem__('stypy_type_store', module_type_store)
        parserinfo._convert.__dict__.__setitem__('stypy_function_name', 'parserinfo._convert')
        parserinfo._convert.__dict__.__setitem__('stypy_param_names_list', ['lst'])
        parserinfo._convert.__dict__.__setitem__('stypy_varargs_param_name', None)
        parserinfo._convert.__dict__.__setitem__('stypy_kwargs_param_name', None)
        parserinfo._convert.__dict__.__setitem__('stypy_call_defaults', defaults)
        parserinfo._convert.__dict__.__setitem__('stypy_call_varargs', varargs)
        parserinfo._convert.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        parserinfo._convert.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'parserinfo._convert', ['lst'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_convert', localization, ['lst'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_convert(...)' code ##################

        
        # Assigning a Dict to a Name (line 299):
        
        # Assigning a Dict to a Name (line 299):
        
        # Obtaining an instance of the builtin type 'dict' (line 299)
        dict_309446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 299, 14), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 299)
        
        # Assigning a type to the variable 'dct' (line 299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 299, 8), 'dct', dict_309446)
        
        
        # Call to enumerate(...): (line 300)
        # Processing the call arguments (line 300)
        # Getting the type of 'lst' (line 300)
        lst_309448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 30), 'lst', False)
        # Processing the call keyword arguments (line 300)
        kwargs_309449 = {}
        # Getting the type of 'enumerate' (line 300)
        enumerate_309447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 20), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 300)
        enumerate_call_result_309450 = invoke(stypy.reporting.localization.Localization(__file__, 300, 20), enumerate_309447, *[lst_309448], **kwargs_309449)
        
        # Testing the type of a for loop iterable (line 300)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 300, 8), enumerate_call_result_309450)
        # Getting the type of the for loop variable (line 300)
        for_loop_var_309451 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 300, 8), enumerate_call_result_309450)
        # Assigning a type to the variable 'i' (line 300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 300, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 300, 8), for_loop_var_309451))
        # Assigning a type to the variable 'v' (line 300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 300, 8), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 300, 8), for_loop_var_309451))
        # SSA begins for a for statement (line 300)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Type idiom detected: calculating its left and rigth part (line 301)
        # Getting the type of 'tuple' (line 301)
        tuple_309452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 29), 'tuple')
        # Getting the type of 'v' (line 301)
        v_309453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 26), 'v')
        
        (may_be_309454, more_types_in_union_309455) = may_be_subtype(tuple_309452, v_309453)

        if may_be_309454:

            if more_types_in_union_309455:
                # Runtime conditional SSA (line 301)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'v' (line 301)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 12), 'v', remove_not_subtype_from_union(v_309453, tuple))
            
            # Getting the type of 'v' (line 302)
            v_309456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 25), 'v')
            # Testing the type of a for loop iterable (line 302)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 302, 16), v_309456)
            # Getting the type of the for loop variable (line 302)
            for_loop_var_309457 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 302, 16), v_309456)
            # Assigning a type to the variable 'v' (line 302)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 302, 16), 'v', for_loop_var_309457)
            # SSA begins for a for statement (line 302)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Assigning a Name to a Subscript (line 303):
            
            # Assigning a Name to a Subscript (line 303):
            # Getting the type of 'i' (line 303)
            i_309458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 37), 'i')
            # Getting the type of 'dct' (line 303)
            dct_309459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 20), 'dct')
            
            # Call to lower(...): (line 303)
            # Processing the call keyword arguments (line 303)
            kwargs_309462 = {}
            # Getting the type of 'v' (line 303)
            v_309460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 24), 'v', False)
            # Obtaining the member 'lower' of a type (line 303)
            lower_309461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 303, 24), v_309460, 'lower')
            # Calling lower(args, kwargs) (line 303)
            lower_call_result_309463 = invoke(stypy.reporting.localization.Localization(__file__, 303, 24), lower_309461, *[], **kwargs_309462)
            
            # Storing an element on a container (line 303)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 303, 20), dct_309459, (lower_call_result_309463, i_309458))
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_309455:
                # Runtime conditional SSA for else branch (line 301)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_309454) or more_types_in_union_309455):
            # Assigning a type to the variable 'v' (line 301)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 12), 'v', remove_subtype_from_union(v_309453, tuple))
            
            # Assigning a Name to a Subscript (line 305):
            
            # Assigning a Name to a Subscript (line 305):
            # Getting the type of 'i' (line 305)
            i_309464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 33), 'i')
            # Getting the type of 'dct' (line 305)
            dct_309465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 16), 'dct')
            
            # Call to lower(...): (line 305)
            # Processing the call keyword arguments (line 305)
            kwargs_309468 = {}
            # Getting the type of 'v' (line 305)
            v_309466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 20), 'v', False)
            # Obtaining the member 'lower' of a type (line 305)
            lower_309467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 20), v_309466, 'lower')
            # Calling lower(args, kwargs) (line 305)
            lower_call_result_309469 = invoke(stypy.reporting.localization.Localization(__file__, 305, 20), lower_309467, *[], **kwargs_309468)
            
            # Storing an element on a container (line 305)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 305, 16), dct_309465, (lower_call_result_309469, i_309464))

            if (may_be_309454 and more_types_in_union_309455):
                # SSA join for if statement (line 301)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'dct' (line 306)
        dct_309470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 15), 'dct')
        # Assigning a type to the variable 'stypy_return_type' (line 306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 306, 8), 'stypy_return_type', dct_309470)
        
        # ################# End of '_convert(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_convert' in the type store
        # Getting the type of 'stypy_return_type' (line 298)
        stypy_return_type_309471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309471)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_convert'
        return stypy_return_type_309471


    @norecursion
    def jump(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'jump'
        module_type_store = module_type_store.open_function_context('jump', 308, 4, False)
        # Assigning a type to the variable 'self' (line 309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 309, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        parserinfo.jump.__dict__.__setitem__('stypy_localization', localization)
        parserinfo.jump.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        parserinfo.jump.__dict__.__setitem__('stypy_type_store', module_type_store)
        parserinfo.jump.__dict__.__setitem__('stypy_function_name', 'parserinfo.jump')
        parserinfo.jump.__dict__.__setitem__('stypy_param_names_list', ['name'])
        parserinfo.jump.__dict__.__setitem__('stypy_varargs_param_name', None)
        parserinfo.jump.__dict__.__setitem__('stypy_kwargs_param_name', None)
        parserinfo.jump.__dict__.__setitem__('stypy_call_defaults', defaults)
        parserinfo.jump.__dict__.__setitem__('stypy_call_varargs', varargs)
        parserinfo.jump.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        parserinfo.jump.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'parserinfo.jump', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'jump', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'jump(...)' code ##################

        
        
        # Call to lower(...): (line 309)
        # Processing the call keyword arguments (line 309)
        kwargs_309474 = {}
        # Getting the type of 'name' (line 309)
        name_309472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 15), 'name', False)
        # Obtaining the member 'lower' of a type (line 309)
        lower_309473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 15), name_309472, 'lower')
        # Calling lower(args, kwargs) (line 309)
        lower_call_result_309475 = invoke(stypy.reporting.localization.Localization(__file__, 309, 15), lower_309473, *[], **kwargs_309474)
        
        # Getting the type of 'self' (line 309)
        self_309476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 31), 'self')
        # Obtaining the member '_jump' of a type (line 309)
        _jump_309477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 31), self_309476, '_jump')
        # Applying the binary operator 'in' (line 309)
        result_contains_309478 = python_operator(stypy.reporting.localization.Localization(__file__, 309, 15), 'in', lower_call_result_309475, _jump_309477)
        
        # Assigning a type to the variable 'stypy_return_type' (line 309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 309, 8), 'stypy_return_type', result_contains_309478)
        
        # ################# End of 'jump(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'jump' in the type store
        # Getting the type of 'stypy_return_type' (line 308)
        stypy_return_type_309479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309479)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'jump'
        return stypy_return_type_309479


    @norecursion
    def weekday(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'weekday'
        module_type_store = module_type_store.open_function_context('weekday', 311, 4, False)
        # Assigning a type to the variable 'self' (line 312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 312, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        parserinfo.weekday.__dict__.__setitem__('stypy_localization', localization)
        parserinfo.weekday.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        parserinfo.weekday.__dict__.__setitem__('stypy_type_store', module_type_store)
        parserinfo.weekday.__dict__.__setitem__('stypy_function_name', 'parserinfo.weekday')
        parserinfo.weekday.__dict__.__setitem__('stypy_param_names_list', ['name'])
        parserinfo.weekday.__dict__.__setitem__('stypy_varargs_param_name', None)
        parserinfo.weekday.__dict__.__setitem__('stypy_kwargs_param_name', None)
        parserinfo.weekday.__dict__.__setitem__('stypy_call_defaults', defaults)
        parserinfo.weekday.__dict__.__setitem__('stypy_call_varargs', varargs)
        parserinfo.weekday.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        parserinfo.weekday.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'parserinfo.weekday', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'weekday', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'weekday(...)' code ##################

        
        
        
        # Call to len(...): (line 312)
        # Processing the call arguments (line 312)
        # Getting the type of 'name' (line 312)
        name_309481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 15), 'name', False)
        # Processing the call keyword arguments (line 312)
        kwargs_309482 = {}
        # Getting the type of 'len' (line 312)
        len_309480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 11), 'len', False)
        # Calling len(args, kwargs) (line 312)
        len_call_result_309483 = invoke(stypy.reporting.localization.Localization(__file__, 312, 11), len_309480, *[name_309481], **kwargs_309482)
        
        
        # Call to min(...): (line 312)
        # Processing the call arguments (line 312)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 312, 28, True)
        # Calculating comprehension expression
        
        # Call to keys(...): (line 312)
        # Processing the call keyword arguments (line 312)
        kwargs_309492 = {}
        # Getting the type of 'self' (line 312)
        self_309489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 44), 'self', False)
        # Obtaining the member '_weekdays' of a type (line 312)
        _weekdays_309490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 312, 44), self_309489, '_weekdays')
        # Obtaining the member 'keys' of a type (line 312)
        keys_309491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 312, 44), _weekdays_309490, 'keys')
        # Calling keys(args, kwargs) (line 312)
        keys_call_result_309493 = invoke(stypy.reporting.localization.Localization(__file__, 312, 44), keys_309491, *[], **kwargs_309492)
        
        comprehension_309494 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 312, 28), keys_call_result_309493)
        # Assigning a type to the variable 'n' (line 312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 312, 28), 'n', comprehension_309494)
        
        # Call to len(...): (line 312)
        # Processing the call arguments (line 312)
        # Getting the type of 'n' (line 312)
        n_309486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 32), 'n', False)
        # Processing the call keyword arguments (line 312)
        kwargs_309487 = {}
        # Getting the type of 'len' (line 312)
        len_309485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 28), 'len', False)
        # Calling len(args, kwargs) (line 312)
        len_call_result_309488 = invoke(stypy.reporting.localization.Localization(__file__, 312, 28), len_309485, *[n_309486], **kwargs_309487)
        
        list_309495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 312, 28), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 312, 28), list_309495, len_call_result_309488)
        # Processing the call keyword arguments (line 312)
        kwargs_309496 = {}
        # Getting the type of 'min' (line 312)
        min_309484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 24), 'min', False)
        # Calling min(args, kwargs) (line 312)
        min_call_result_309497 = invoke(stypy.reporting.localization.Localization(__file__, 312, 24), min_309484, *[list_309495], **kwargs_309496)
        
        # Applying the binary operator '>=' (line 312)
        result_ge_309498 = python_operator(stypy.reporting.localization.Localization(__file__, 312, 11), '>=', len_call_result_309483, min_call_result_309497)
        
        # Testing the type of an if condition (line 312)
        if_condition_309499 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 312, 8), result_ge_309498)
        # Assigning a type to the variable 'if_condition_309499' (line 312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 312, 8), 'if_condition_309499', if_condition_309499)
        # SSA begins for if statement (line 312)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 313)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Obtaining the type of the subscript
        
        # Call to lower(...): (line 314)
        # Processing the call keyword arguments (line 314)
        kwargs_309502 = {}
        # Getting the type of 'name' (line 314)
        name_309500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 38), 'name', False)
        # Obtaining the member 'lower' of a type (line 314)
        lower_309501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 38), name_309500, 'lower')
        # Calling lower(args, kwargs) (line 314)
        lower_call_result_309503 = invoke(stypy.reporting.localization.Localization(__file__, 314, 38), lower_309501, *[], **kwargs_309502)
        
        # Getting the type of 'self' (line 314)
        self_309504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 23), 'self')
        # Obtaining the member '_weekdays' of a type (line 314)
        _weekdays_309505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 23), self_309504, '_weekdays')
        # Obtaining the member '__getitem__' of a type (line 314)
        getitem___309506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 23), _weekdays_309505, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 314)
        subscript_call_result_309507 = invoke(stypy.reporting.localization.Localization(__file__, 314, 23), getitem___309506, lower_call_result_309503)
        
        # Assigning a type to the variable 'stypy_return_type' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 16), 'stypy_return_type', subscript_call_result_309507)
        # SSA branch for the except part of a try statement (line 313)
        # SSA branch for the except 'KeyError' branch of a try statement (line 313)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 313)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 312)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'None' (line 317)
        None_309508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 15), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 317, 8), 'stypy_return_type', None_309508)
        
        # ################# End of 'weekday(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'weekday' in the type store
        # Getting the type of 'stypy_return_type' (line 311)
        stypy_return_type_309509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309509)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'weekday'
        return stypy_return_type_309509


    @norecursion
    def month(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'month'
        module_type_store = module_type_store.open_function_context('month', 319, 4, False)
        # Assigning a type to the variable 'self' (line 320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 320, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        parserinfo.month.__dict__.__setitem__('stypy_localization', localization)
        parserinfo.month.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        parserinfo.month.__dict__.__setitem__('stypy_type_store', module_type_store)
        parserinfo.month.__dict__.__setitem__('stypy_function_name', 'parserinfo.month')
        parserinfo.month.__dict__.__setitem__('stypy_param_names_list', ['name'])
        parserinfo.month.__dict__.__setitem__('stypy_varargs_param_name', None)
        parserinfo.month.__dict__.__setitem__('stypy_kwargs_param_name', None)
        parserinfo.month.__dict__.__setitem__('stypy_call_defaults', defaults)
        parserinfo.month.__dict__.__setitem__('stypy_call_varargs', varargs)
        parserinfo.month.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        parserinfo.month.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'parserinfo.month', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'month', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'month(...)' code ##################

        
        
        
        # Call to len(...): (line 320)
        # Processing the call arguments (line 320)
        # Getting the type of 'name' (line 320)
        name_309511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 15), 'name', False)
        # Processing the call keyword arguments (line 320)
        kwargs_309512 = {}
        # Getting the type of 'len' (line 320)
        len_309510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 11), 'len', False)
        # Calling len(args, kwargs) (line 320)
        len_call_result_309513 = invoke(stypy.reporting.localization.Localization(__file__, 320, 11), len_309510, *[name_309511], **kwargs_309512)
        
        
        # Call to min(...): (line 320)
        # Processing the call arguments (line 320)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 320, 28, True)
        # Calculating comprehension expression
        
        # Call to keys(...): (line 320)
        # Processing the call keyword arguments (line 320)
        kwargs_309522 = {}
        # Getting the type of 'self' (line 320)
        self_309519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 44), 'self', False)
        # Obtaining the member '_months' of a type (line 320)
        _months_309520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 320, 44), self_309519, '_months')
        # Obtaining the member 'keys' of a type (line 320)
        keys_309521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 320, 44), _months_309520, 'keys')
        # Calling keys(args, kwargs) (line 320)
        keys_call_result_309523 = invoke(stypy.reporting.localization.Localization(__file__, 320, 44), keys_309521, *[], **kwargs_309522)
        
        comprehension_309524 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 320, 28), keys_call_result_309523)
        # Assigning a type to the variable 'n' (line 320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 320, 28), 'n', comprehension_309524)
        
        # Call to len(...): (line 320)
        # Processing the call arguments (line 320)
        # Getting the type of 'n' (line 320)
        n_309516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 32), 'n', False)
        # Processing the call keyword arguments (line 320)
        kwargs_309517 = {}
        # Getting the type of 'len' (line 320)
        len_309515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 28), 'len', False)
        # Calling len(args, kwargs) (line 320)
        len_call_result_309518 = invoke(stypy.reporting.localization.Localization(__file__, 320, 28), len_309515, *[n_309516], **kwargs_309517)
        
        list_309525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 320, 28), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 320, 28), list_309525, len_call_result_309518)
        # Processing the call keyword arguments (line 320)
        kwargs_309526 = {}
        # Getting the type of 'min' (line 320)
        min_309514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 24), 'min', False)
        # Calling min(args, kwargs) (line 320)
        min_call_result_309527 = invoke(stypy.reporting.localization.Localization(__file__, 320, 24), min_309514, *[list_309525], **kwargs_309526)
        
        # Applying the binary operator '>=' (line 320)
        result_ge_309528 = python_operator(stypy.reporting.localization.Localization(__file__, 320, 11), '>=', len_call_result_309513, min_call_result_309527)
        
        # Testing the type of an if condition (line 320)
        if_condition_309529 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 320, 8), result_ge_309528)
        # Assigning a type to the variable 'if_condition_309529' (line 320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 320, 8), 'if_condition_309529', if_condition_309529)
        # SSA begins for if statement (line 320)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 321)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Obtaining the type of the subscript
        
        # Call to lower(...): (line 322)
        # Processing the call keyword arguments (line 322)
        kwargs_309532 = {}
        # Getting the type of 'name' (line 322)
        name_309530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 36), 'name', False)
        # Obtaining the member 'lower' of a type (line 322)
        lower_309531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 36), name_309530, 'lower')
        # Calling lower(args, kwargs) (line 322)
        lower_call_result_309533 = invoke(stypy.reporting.localization.Localization(__file__, 322, 36), lower_309531, *[], **kwargs_309532)
        
        # Getting the type of 'self' (line 322)
        self_309534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 23), 'self')
        # Obtaining the member '_months' of a type (line 322)
        _months_309535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 23), self_309534, '_months')
        # Obtaining the member '__getitem__' of a type (line 322)
        getitem___309536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 23), _months_309535, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 322)
        subscript_call_result_309537 = invoke(stypy.reporting.localization.Localization(__file__, 322, 23), getitem___309536, lower_call_result_309533)
        
        int_309538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 322, 52), 'int')
        # Applying the binary operator '+' (line 322)
        result_add_309539 = python_operator(stypy.reporting.localization.Localization(__file__, 322, 23), '+', subscript_call_result_309537, int_309538)
        
        # Assigning a type to the variable 'stypy_return_type' (line 322)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 16), 'stypy_return_type', result_add_309539)
        # SSA branch for the except part of a try statement (line 321)
        # SSA branch for the except 'KeyError' branch of a try statement (line 321)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 321)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 320)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'None' (line 325)
        None_309540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 15), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 325)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 325, 8), 'stypy_return_type', None_309540)
        
        # ################# End of 'month(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'month' in the type store
        # Getting the type of 'stypy_return_type' (line 319)
        stypy_return_type_309541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309541)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'month'
        return stypy_return_type_309541


    @norecursion
    def hms(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'hms'
        module_type_store = module_type_store.open_function_context('hms', 327, 4, False)
        # Assigning a type to the variable 'self' (line 328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 328, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        parserinfo.hms.__dict__.__setitem__('stypy_localization', localization)
        parserinfo.hms.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        parserinfo.hms.__dict__.__setitem__('stypy_type_store', module_type_store)
        parserinfo.hms.__dict__.__setitem__('stypy_function_name', 'parserinfo.hms')
        parserinfo.hms.__dict__.__setitem__('stypy_param_names_list', ['name'])
        parserinfo.hms.__dict__.__setitem__('stypy_varargs_param_name', None)
        parserinfo.hms.__dict__.__setitem__('stypy_kwargs_param_name', None)
        parserinfo.hms.__dict__.__setitem__('stypy_call_defaults', defaults)
        parserinfo.hms.__dict__.__setitem__('stypy_call_varargs', varargs)
        parserinfo.hms.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        parserinfo.hms.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'parserinfo.hms', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'hms', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'hms(...)' code ##################

        
        
        # SSA begins for try-except statement (line 328)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Obtaining the type of the subscript
        
        # Call to lower(...): (line 329)
        # Processing the call keyword arguments (line 329)
        kwargs_309544 = {}
        # Getting the type of 'name' (line 329)
        name_309542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 29), 'name', False)
        # Obtaining the member 'lower' of a type (line 329)
        lower_309543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 329, 29), name_309542, 'lower')
        # Calling lower(args, kwargs) (line 329)
        lower_call_result_309545 = invoke(stypy.reporting.localization.Localization(__file__, 329, 29), lower_309543, *[], **kwargs_309544)
        
        # Getting the type of 'self' (line 329)
        self_309546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 19), 'self')
        # Obtaining the member '_hms' of a type (line 329)
        _hms_309547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 329, 19), self_309546, '_hms')
        # Obtaining the member '__getitem__' of a type (line 329)
        getitem___309548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 329, 19), _hms_309547, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 329)
        subscript_call_result_309549 = invoke(stypy.reporting.localization.Localization(__file__, 329, 19), getitem___309548, lower_call_result_309545)
        
        # Assigning a type to the variable 'stypy_return_type' (line 329)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 329, 12), 'stypy_return_type', subscript_call_result_309549)
        # SSA branch for the except part of a try statement (line 328)
        # SSA branch for the except 'KeyError' branch of a try statement (line 328)
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'None' (line 331)
        None_309550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 331)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 331, 12), 'stypy_return_type', None_309550)
        # SSA join for try-except statement (line 328)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'hms(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'hms' in the type store
        # Getting the type of 'stypy_return_type' (line 327)
        stypy_return_type_309551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309551)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'hms'
        return stypy_return_type_309551


    @norecursion
    def ampm(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'ampm'
        module_type_store = module_type_store.open_function_context('ampm', 333, 4, False)
        # Assigning a type to the variable 'self' (line 334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 334, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        parserinfo.ampm.__dict__.__setitem__('stypy_localization', localization)
        parserinfo.ampm.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        parserinfo.ampm.__dict__.__setitem__('stypy_type_store', module_type_store)
        parserinfo.ampm.__dict__.__setitem__('stypy_function_name', 'parserinfo.ampm')
        parserinfo.ampm.__dict__.__setitem__('stypy_param_names_list', ['name'])
        parserinfo.ampm.__dict__.__setitem__('stypy_varargs_param_name', None)
        parserinfo.ampm.__dict__.__setitem__('stypy_kwargs_param_name', None)
        parserinfo.ampm.__dict__.__setitem__('stypy_call_defaults', defaults)
        parserinfo.ampm.__dict__.__setitem__('stypy_call_varargs', varargs)
        parserinfo.ampm.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        parserinfo.ampm.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'parserinfo.ampm', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'ampm', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'ampm(...)' code ##################

        
        
        # SSA begins for try-except statement (line 334)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Obtaining the type of the subscript
        
        # Call to lower(...): (line 335)
        # Processing the call keyword arguments (line 335)
        kwargs_309554 = {}
        # Getting the type of 'name' (line 335)
        name_309552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 30), 'name', False)
        # Obtaining the member 'lower' of a type (line 335)
        lower_309553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 335, 30), name_309552, 'lower')
        # Calling lower(args, kwargs) (line 335)
        lower_call_result_309555 = invoke(stypy.reporting.localization.Localization(__file__, 335, 30), lower_309553, *[], **kwargs_309554)
        
        # Getting the type of 'self' (line 335)
        self_309556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 19), 'self')
        # Obtaining the member '_ampm' of a type (line 335)
        _ampm_309557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 335, 19), self_309556, '_ampm')
        # Obtaining the member '__getitem__' of a type (line 335)
        getitem___309558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 335, 19), _ampm_309557, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 335)
        subscript_call_result_309559 = invoke(stypy.reporting.localization.Localization(__file__, 335, 19), getitem___309558, lower_call_result_309555)
        
        # Assigning a type to the variable 'stypy_return_type' (line 335)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 335, 12), 'stypy_return_type', subscript_call_result_309559)
        # SSA branch for the except part of a try statement (line 334)
        # SSA branch for the except 'KeyError' branch of a try statement (line 334)
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'None' (line 337)
        None_309560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 337, 12), 'stypy_return_type', None_309560)
        # SSA join for try-except statement (line 334)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'ampm(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'ampm' in the type store
        # Getting the type of 'stypy_return_type' (line 333)
        stypy_return_type_309561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309561)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'ampm'
        return stypy_return_type_309561


    @norecursion
    def pertain(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pertain'
        module_type_store = module_type_store.open_function_context('pertain', 339, 4, False)
        # Assigning a type to the variable 'self' (line 340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 340, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        parserinfo.pertain.__dict__.__setitem__('stypy_localization', localization)
        parserinfo.pertain.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        parserinfo.pertain.__dict__.__setitem__('stypy_type_store', module_type_store)
        parserinfo.pertain.__dict__.__setitem__('stypy_function_name', 'parserinfo.pertain')
        parserinfo.pertain.__dict__.__setitem__('stypy_param_names_list', ['name'])
        parserinfo.pertain.__dict__.__setitem__('stypy_varargs_param_name', None)
        parserinfo.pertain.__dict__.__setitem__('stypy_kwargs_param_name', None)
        parserinfo.pertain.__dict__.__setitem__('stypy_call_defaults', defaults)
        parserinfo.pertain.__dict__.__setitem__('stypy_call_varargs', varargs)
        parserinfo.pertain.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        parserinfo.pertain.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'parserinfo.pertain', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pertain', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pertain(...)' code ##################

        
        
        # Call to lower(...): (line 340)
        # Processing the call keyword arguments (line 340)
        kwargs_309564 = {}
        # Getting the type of 'name' (line 340)
        name_309562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 15), 'name', False)
        # Obtaining the member 'lower' of a type (line 340)
        lower_309563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 340, 15), name_309562, 'lower')
        # Calling lower(args, kwargs) (line 340)
        lower_call_result_309565 = invoke(stypy.reporting.localization.Localization(__file__, 340, 15), lower_309563, *[], **kwargs_309564)
        
        # Getting the type of 'self' (line 340)
        self_309566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 31), 'self')
        # Obtaining the member '_pertain' of a type (line 340)
        _pertain_309567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 340, 31), self_309566, '_pertain')
        # Applying the binary operator 'in' (line 340)
        result_contains_309568 = python_operator(stypy.reporting.localization.Localization(__file__, 340, 15), 'in', lower_call_result_309565, _pertain_309567)
        
        # Assigning a type to the variable 'stypy_return_type' (line 340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 340, 8), 'stypy_return_type', result_contains_309568)
        
        # ################# End of 'pertain(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pertain' in the type store
        # Getting the type of 'stypy_return_type' (line 339)
        stypy_return_type_309569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309569)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pertain'
        return stypy_return_type_309569


    @norecursion
    def utczone(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'utczone'
        module_type_store = module_type_store.open_function_context('utczone', 342, 4, False)
        # Assigning a type to the variable 'self' (line 343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        parserinfo.utczone.__dict__.__setitem__('stypy_localization', localization)
        parserinfo.utczone.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        parserinfo.utczone.__dict__.__setitem__('stypy_type_store', module_type_store)
        parserinfo.utczone.__dict__.__setitem__('stypy_function_name', 'parserinfo.utczone')
        parserinfo.utczone.__dict__.__setitem__('stypy_param_names_list', ['name'])
        parserinfo.utczone.__dict__.__setitem__('stypy_varargs_param_name', None)
        parserinfo.utczone.__dict__.__setitem__('stypy_kwargs_param_name', None)
        parserinfo.utczone.__dict__.__setitem__('stypy_call_defaults', defaults)
        parserinfo.utczone.__dict__.__setitem__('stypy_call_varargs', varargs)
        parserinfo.utczone.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        parserinfo.utczone.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'parserinfo.utczone', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'utczone', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'utczone(...)' code ##################

        
        
        # Call to lower(...): (line 343)
        # Processing the call keyword arguments (line 343)
        kwargs_309572 = {}
        # Getting the type of 'name' (line 343)
        name_309570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 15), 'name', False)
        # Obtaining the member 'lower' of a type (line 343)
        lower_309571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 15), name_309570, 'lower')
        # Calling lower(args, kwargs) (line 343)
        lower_call_result_309573 = invoke(stypy.reporting.localization.Localization(__file__, 343, 15), lower_309571, *[], **kwargs_309572)
        
        # Getting the type of 'self' (line 343)
        self_309574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 31), 'self')
        # Obtaining the member '_utczone' of a type (line 343)
        _utczone_309575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 31), self_309574, '_utczone')
        # Applying the binary operator 'in' (line 343)
        result_contains_309576 = python_operator(stypy.reporting.localization.Localization(__file__, 343, 15), 'in', lower_call_result_309573, _utczone_309575)
        
        # Assigning a type to the variable 'stypy_return_type' (line 343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 8), 'stypy_return_type', result_contains_309576)
        
        # ################# End of 'utczone(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'utczone' in the type store
        # Getting the type of 'stypy_return_type' (line 342)
        stypy_return_type_309577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309577)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'utczone'
        return stypy_return_type_309577


    @norecursion
    def tzoffset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tzoffset'
        module_type_store = module_type_store.open_function_context('tzoffset', 345, 4, False)
        # Assigning a type to the variable 'self' (line 346)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 346, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        parserinfo.tzoffset.__dict__.__setitem__('stypy_localization', localization)
        parserinfo.tzoffset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        parserinfo.tzoffset.__dict__.__setitem__('stypy_type_store', module_type_store)
        parserinfo.tzoffset.__dict__.__setitem__('stypy_function_name', 'parserinfo.tzoffset')
        parserinfo.tzoffset.__dict__.__setitem__('stypy_param_names_list', ['name'])
        parserinfo.tzoffset.__dict__.__setitem__('stypy_varargs_param_name', None)
        parserinfo.tzoffset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        parserinfo.tzoffset.__dict__.__setitem__('stypy_call_defaults', defaults)
        parserinfo.tzoffset.__dict__.__setitem__('stypy_call_varargs', varargs)
        parserinfo.tzoffset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        parserinfo.tzoffset.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'parserinfo.tzoffset', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tzoffset', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tzoffset(...)' code ##################

        
        
        # Getting the type of 'name' (line 346)
        name_309578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 11), 'name')
        # Getting the type of 'self' (line 346)
        self_309579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 19), 'self')
        # Obtaining the member '_utczone' of a type (line 346)
        _utczone_309580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 19), self_309579, '_utczone')
        # Applying the binary operator 'in' (line 346)
        result_contains_309581 = python_operator(stypy.reporting.localization.Localization(__file__, 346, 11), 'in', name_309578, _utczone_309580)
        
        # Testing the type of an if condition (line 346)
        if_condition_309582 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 346, 8), result_contains_309581)
        # Assigning a type to the variable 'if_condition_309582' (line 346)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 346, 8), 'if_condition_309582', if_condition_309582)
        # SSA begins for if statement (line 346)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        int_309583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 347, 19), 'int')
        # Assigning a type to the variable 'stypy_return_type' (line 347)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 347, 12), 'stypy_return_type', int_309583)
        # SSA join for if statement (line 346)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to get(...): (line 349)
        # Processing the call arguments (line 349)
        # Getting the type of 'name' (line 349)
        name_309587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 33), 'name', False)
        # Processing the call keyword arguments (line 349)
        kwargs_309588 = {}
        # Getting the type of 'self' (line 349)
        self_309584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 15), 'self', False)
        # Obtaining the member 'TZOFFSET' of a type (line 349)
        TZOFFSET_309585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 15), self_309584, 'TZOFFSET')
        # Obtaining the member 'get' of a type (line 349)
        get_309586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 15), TZOFFSET_309585, 'get')
        # Calling get(args, kwargs) (line 349)
        get_call_result_309589 = invoke(stypy.reporting.localization.Localization(__file__, 349, 15), get_309586, *[name_309587], **kwargs_309588)
        
        # Assigning a type to the variable 'stypy_return_type' (line 349)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 349, 8), 'stypy_return_type', get_call_result_309589)
        
        # ################# End of 'tzoffset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tzoffset' in the type store
        # Getting the type of 'stypy_return_type' (line 345)
        stypy_return_type_309590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309590)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tzoffset'
        return stypy_return_type_309590


    @norecursion
    def convertyear(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 351)
        False_309591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 50), 'False')
        defaults = [False_309591]
        # Create a new context for function 'convertyear'
        module_type_store = module_type_store.open_function_context('convertyear', 351, 4, False)
        # Assigning a type to the variable 'self' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        parserinfo.convertyear.__dict__.__setitem__('stypy_localization', localization)
        parserinfo.convertyear.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        parserinfo.convertyear.__dict__.__setitem__('stypy_type_store', module_type_store)
        parserinfo.convertyear.__dict__.__setitem__('stypy_function_name', 'parserinfo.convertyear')
        parserinfo.convertyear.__dict__.__setitem__('stypy_param_names_list', ['year', 'century_specified'])
        parserinfo.convertyear.__dict__.__setitem__('stypy_varargs_param_name', None)
        parserinfo.convertyear.__dict__.__setitem__('stypy_kwargs_param_name', None)
        parserinfo.convertyear.__dict__.__setitem__('stypy_call_defaults', defaults)
        parserinfo.convertyear.__dict__.__setitem__('stypy_call_varargs', varargs)
        parserinfo.convertyear.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        parserinfo.convertyear.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'parserinfo.convertyear', ['year', 'century_specified'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'convertyear', localization, ['year', 'century_specified'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'convertyear(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'year' (line 352)
        year_309592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 11), 'year')
        int_309593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 18), 'int')
        # Applying the binary operator '<' (line 352)
        result_lt_309594 = python_operator(stypy.reporting.localization.Localization(__file__, 352, 11), '<', year_309592, int_309593)
        
        
        # Getting the type of 'century_specified' (line 352)
        century_specified_309595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 30), 'century_specified')
        # Applying the 'not' unary operator (line 352)
        result_not__309596 = python_operator(stypy.reporting.localization.Localization(__file__, 352, 26), 'not', century_specified_309595)
        
        # Applying the binary operator 'and' (line 352)
        result_and_keyword_309597 = python_operator(stypy.reporting.localization.Localization(__file__, 352, 11), 'and', result_lt_309594, result_not__309596)
        
        # Testing the type of an if condition (line 352)
        if_condition_309598 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 352, 8), result_and_keyword_309597)
        # Assigning a type to the variable 'if_condition_309598' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'if_condition_309598', if_condition_309598)
        # SSA begins for if statement (line 352)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'year' (line 353)
        year_309599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 12), 'year')
        # Getting the type of 'self' (line 353)
        self_309600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 20), 'self')
        # Obtaining the member '_century' of a type (line 353)
        _century_309601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 353, 20), self_309600, '_century')
        # Applying the binary operator '+=' (line 353)
        result_iadd_309602 = python_operator(stypy.reporting.localization.Localization(__file__, 353, 12), '+=', year_309599, _century_309601)
        # Assigning a type to the variable 'year' (line 353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 353, 12), 'year', result_iadd_309602)
        
        
        
        
        # Call to abs(...): (line 354)
        # Processing the call arguments (line 354)
        # Getting the type of 'year' (line 354)
        year_309604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 19), 'year', False)
        # Getting the type of 'self' (line 354)
        self_309605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 26), 'self', False)
        # Obtaining the member '_year' of a type (line 354)
        _year_309606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 354, 26), self_309605, '_year')
        # Applying the binary operator '-' (line 354)
        result_sub_309607 = python_operator(stypy.reporting.localization.Localization(__file__, 354, 19), '-', year_309604, _year_309606)
        
        # Processing the call keyword arguments (line 354)
        kwargs_309608 = {}
        # Getting the type of 'abs' (line 354)
        abs_309603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 15), 'abs', False)
        # Calling abs(args, kwargs) (line 354)
        abs_call_result_309609 = invoke(stypy.reporting.localization.Localization(__file__, 354, 15), abs_309603, *[result_sub_309607], **kwargs_309608)
        
        int_309610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 354, 41), 'int')
        # Applying the binary operator '>=' (line 354)
        result_ge_309611 = python_operator(stypy.reporting.localization.Localization(__file__, 354, 15), '>=', abs_call_result_309609, int_309610)
        
        # Testing the type of an if condition (line 354)
        if_condition_309612 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 354, 12), result_ge_309611)
        # Assigning a type to the variable 'if_condition_309612' (line 354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 354, 12), 'if_condition_309612', if_condition_309612)
        # SSA begins for if statement (line 354)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'year' (line 355)
        year_309613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 19), 'year')
        # Getting the type of 'self' (line 355)
        self_309614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 26), 'self')
        # Obtaining the member '_year' of a type (line 355)
        _year_309615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 26), self_309614, '_year')
        # Applying the binary operator '<' (line 355)
        result_lt_309616 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 19), '<', year_309613, _year_309615)
        
        # Testing the type of an if condition (line 355)
        if_condition_309617 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 355, 16), result_lt_309616)
        # Assigning a type to the variable 'if_condition_309617' (line 355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 355, 16), 'if_condition_309617', if_condition_309617)
        # SSA begins for if statement (line 355)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'year' (line 356)
        year_309618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 20), 'year')
        int_309619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 356, 28), 'int')
        # Applying the binary operator '+=' (line 356)
        result_iadd_309620 = python_operator(stypy.reporting.localization.Localization(__file__, 356, 20), '+=', year_309618, int_309619)
        # Assigning a type to the variable 'year' (line 356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 20), 'year', result_iadd_309620)
        
        # SSA branch for the else part of an if statement (line 355)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'year' (line 358)
        year_309621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 20), 'year')
        int_309622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 358, 28), 'int')
        # Applying the binary operator '-=' (line 358)
        result_isub_309623 = python_operator(stypy.reporting.localization.Localization(__file__, 358, 20), '-=', year_309621, int_309622)
        # Assigning a type to the variable 'year' (line 358)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 358, 20), 'year', result_isub_309623)
        
        # SSA join for if statement (line 355)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 354)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 352)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'year' (line 359)
        year_309624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 15), 'year')
        # Assigning a type to the variable 'stypy_return_type' (line 359)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 8), 'stypy_return_type', year_309624)
        
        # ################# End of 'convertyear(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'convertyear' in the type store
        # Getting the type of 'stypy_return_type' (line 351)
        stypy_return_type_309625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309625)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'convertyear'
        return stypy_return_type_309625


    @norecursion
    def validate(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'validate'
        module_type_store = module_type_store.open_function_context('validate', 361, 4, False)
        # Assigning a type to the variable 'self' (line 362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 362, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        parserinfo.validate.__dict__.__setitem__('stypy_localization', localization)
        parserinfo.validate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        parserinfo.validate.__dict__.__setitem__('stypy_type_store', module_type_store)
        parserinfo.validate.__dict__.__setitem__('stypy_function_name', 'parserinfo.validate')
        parserinfo.validate.__dict__.__setitem__('stypy_param_names_list', ['res'])
        parserinfo.validate.__dict__.__setitem__('stypy_varargs_param_name', None)
        parserinfo.validate.__dict__.__setitem__('stypy_kwargs_param_name', None)
        parserinfo.validate.__dict__.__setitem__('stypy_call_defaults', defaults)
        parserinfo.validate.__dict__.__setitem__('stypy_call_varargs', varargs)
        parserinfo.validate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        parserinfo.validate.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'parserinfo.validate', ['res'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'validate', localization, ['res'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'validate(...)' code ##################

        
        
        # Getting the type of 'res' (line 363)
        res_309626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 11), 'res')
        # Obtaining the member 'year' of a type (line 363)
        year_309627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 363, 11), res_309626, 'year')
        # Getting the type of 'None' (line 363)
        None_309628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 27), 'None')
        # Applying the binary operator 'isnot' (line 363)
        result_is_not_309629 = python_operator(stypy.reporting.localization.Localization(__file__, 363, 11), 'isnot', year_309627, None_309628)
        
        # Testing the type of an if condition (line 363)
        if_condition_309630 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 363, 8), result_is_not_309629)
        # Assigning a type to the variable 'if_condition_309630' (line 363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 363, 8), 'if_condition_309630', if_condition_309630)
        # SSA begins for if statement (line 363)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 364):
        
        # Assigning a Call to a Attribute (line 364):
        
        # Call to convertyear(...): (line 364)
        # Processing the call arguments (line 364)
        # Getting the type of 'res' (line 364)
        res_309633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 40), 'res', False)
        # Obtaining the member 'year' of a type (line 364)
        year_309634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 364, 40), res_309633, 'year')
        # Getting the type of 'res' (line 364)
        res_309635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 50), 'res', False)
        # Obtaining the member 'century_specified' of a type (line 364)
        century_specified_309636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 364, 50), res_309635, 'century_specified')
        # Processing the call keyword arguments (line 364)
        kwargs_309637 = {}
        # Getting the type of 'self' (line 364)
        self_309631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 23), 'self', False)
        # Obtaining the member 'convertyear' of a type (line 364)
        convertyear_309632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 364, 23), self_309631, 'convertyear')
        # Calling convertyear(args, kwargs) (line 364)
        convertyear_call_result_309638 = invoke(stypy.reporting.localization.Localization(__file__, 364, 23), convertyear_309632, *[year_309634, century_specified_309636], **kwargs_309637)
        
        # Getting the type of 'res' (line 364)
        res_309639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 12), 'res')
        # Setting the type of the member 'year' of a type (line 364)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 364, 12), res_309639, 'year', convertyear_call_result_309638)
        # SSA join for if statement (line 363)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Evaluating a boolean operation
        
        # Getting the type of 'res' (line 366)
        res_309640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 11), 'res')
        # Obtaining the member 'tzoffset' of a type (line 366)
        tzoffset_309641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 366, 11), res_309640, 'tzoffset')
        int_309642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 366, 27), 'int')
        # Applying the binary operator '==' (line 366)
        result_eq_309643 = python_operator(stypy.reporting.localization.Localization(__file__, 366, 11), '==', tzoffset_309641, int_309642)
        
        
        # Getting the type of 'res' (line 366)
        res_309644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 37), 'res')
        # Obtaining the member 'tzname' of a type (line 366)
        tzname_309645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 366, 37), res_309644, 'tzname')
        # Applying the 'not' unary operator (line 366)
        result_not__309646 = python_operator(stypy.reporting.localization.Localization(__file__, 366, 33), 'not', tzname_309645)
        
        # Applying the binary operator 'and' (line 366)
        result_and_keyword_309647 = python_operator(stypy.reporting.localization.Localization(__file__, 366, 11), 'and', result_eq_309643, result_not__309646)
        
        
        # Getting the type of 'res' (line 366)
        res_309648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 51), 'res')
        # Obtaining the member 'tzname' of a type (line 366)
        tzname_309649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 366, 51), res_309648, 'tzname')
        unicode_309650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 366, 65), 'unicode', u'Z')
        # Applying the binary operator '==' (line 366)
        result_eq_309651 = python_operator(stypy.reporting.localization.Localization(__file__, 366, 51), '==', tzname_309649, unicode_309650)
        
        # Applying the binary operator 'or' (line 366)
        result_or_keyword_309652 = python_operator(stypy.reporting.localization.Localization(__file__, 366, 11), 'or', result_and_keyword_309647, result_eq_309651)
        
        # Testing the type of an if condition (line 366)
        if_condition_309653 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 366, 8), result_or_keyword_309652)
        # Assigning a type to the variable 'if_condition_309653' (line 366)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 366, 8), 'if_condition_309653', if_condition_309653)
        # SSA begins for if statement (line 366)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Attribute (line 367):
        
        # Assigning a Str to a Attribute (line 367):
        unicode_309654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 367, 25), 'unicode', u'UTC')
        # Getting the type of 'res' (line 367)
        res_309655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 12), 'res')
        # Setting the type of the member 'tzname' of a type (line 367)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 367, 12), res_309655, 'tzname', unicode_309654)
        
        # Assigning a Num to a Attribute (line 368):
        
        # Assigning a Num to a Attribute (line 368):
        int_309656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 368, 27), 'int')
        # Getting the type of 'res' (line 368)
        res_309657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 12), 'res')
        # Setting the type of the member 'tzoffset' of a type (line 368)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 368, 12), res_309657, 'tzoffset', int_309656)
        # SSA branch for the else part of an if statement (line 366)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'res' (line 369)
        res_309658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 13), 'res')
        # Obtaining the member 'tzoffset' of a type (line 369)
        tzoffset_309659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 369, 13), res_309658, 'tzoffset')
        int_309660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 369, 29), 'int')
        # Applying the binary operator '!=' (line 369)
        result_ne_309661 = python_operator(stypy.reporting.localization.Localization(__file__, 369, 13), '!=', tzoffset_309659, int_309660)
        
        # Getting the type of 'res' (line 369)
        res_309662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 35), 'res')
        # Obtaining the member 'tzname' of a type (line 369)
        tzname_309663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 369, 35), res_309662, 'tzname')
        # Applying the binary operator 'and' (line 369)
        result_and_keyword_309664 = python_operator(stypy.reporting.localization.Localization(__file__, 369, 13), 'and', result_ne_309661, tzname_309663)
        
        # Call to utczone(...): (line 369)
        # Processing the call arguments (line 369)
        # Getting the type of 'res' (line 369)
        res_309667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 63), 'res', False)
        # Obtaining the member 'tzname' of a type (line 369)
        tzname_309668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 369, 63), res_309667, 'tzname')
        # Processing the call keyword arguments (line 369)
        kwargs_309669 = {}
        # Getting the type of 'self' (line 369)
        self_309665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 50), 'self', False)
        # Obtaining the member 'utczone' of a type (line 369)
        utczone_309666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 369, 50), self_309665, 'utczone')
        # Calling utczone(args, kwargs) (line 369)
        utczone_call_result_309670 = invoke(stypy.reporting.localization.Localization(__file__, 369, 50), utczone_309666, *[tzname_309668], **kwargs_309669)
        
        # Applying the binary operator 'and' (line 369)
        result_and_keyword_309671 = python_operator(stypy.reporting.localization.Localization(__file__, 369, 13), 'and', result_and_keyword_309664, utczone_call_result_309670)
        
        # Testing the type of an if condition (line 369)
        if_condition_309672 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 369, 13), result_and_keyword_309671)
        # Assigning a type to the variable 'if_condition_309672' (line 369)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 369, 13), 'if_condition_309672', if_condition_309672)
        # SSA begins for if statement (line 369)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Attribute (line 370):
        
        # Assigning a Num to a Attribute (line 370):
        int_309673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 370, 27), 'int')
        # Getting the type of 'res' (line 370)
        res_309674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 12), 'res')
        # Setting the type of the member 'tzoffset' of a type (line 370)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 12), res_309674, 'tzoffset', int_309673)
        # SSA join for if statement (line 369)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 366)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'True' (line 371)
        True_309675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 15), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 371)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 8), 'stypy_return_type', True_309675)
        
        # ################# End of 'validate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'validate' in the type store
        # Getting the type of 'stypy_return_type' (line 361)
        stypy_return_type_309676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309676)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'validate'
        return stypy_return_type_309676


# Assigning a type to the variable 'parserinfo' (line 232)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 232, 0), 'parserinfo', parserinfo)

# Assigning a List to a Name (line 251):

# Obtaining an instance of the builtin type 'list' (line 251)
list_309677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, 11), 'list')
# Adding type elements to the builtin type 'list' instance (line 251)
# Adding element type (line 251)
unicode_309678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, 12), 'unicode', u' ')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 11), list_309677, unicode_309678)
# Adding element type (line 251)
unicode_309679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, 17), 'unicode', u'.')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 11), list_309677, unicode_309679)
# Adding element type (line 251)
unicode_309680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, 22), 'unicode', u',')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 11), list_309677, unicode_309680)
# Adding element type (line 251)
unicode_309681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, 27), 'unicode', u';')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 11), list_309677, unicode_309681)
# Adding element type (line 251)
unicode_309682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, 32), 'unicode', u'-')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 11), list_309677, unicode_309682)
# Adding element type (line 251)
unicode_309683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, 37), 'unicode', u'/')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 11), list_309677, unicode_309683)
# Adding element type (line 251)
unicode_309684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, 42), 'unicode', u"'")
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 11), list_309677, unicode_309684)
# Adding element type (line 251)
unicode_309685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, 12), 'unicode', u'at')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 11), list_309677, unicode_309685)
# Adding element type (line 251)
unicode_309686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, 18), 'unicode', u'on')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 11), list_309677, unicode_309686)
# Adding element type (line 251)
unicode_309687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, 24), 'unicode', u'and')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 11), list_309677, unicode_309687)
# Adding element type (line 251)
unicode_309688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, 31), 'unicode', u'ad')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 11), list_309677, unicode_309688)
# Adding element type (line 251)
unicode_309689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, 37), 'unicode', u'm')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 11), list_309677, unicode_309689)
# Adding element type (line 251)
unicode_309690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, 42), 'unicode', u't')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 11), list_309677, unicode_309690)
# Adding element type (line 251)
unicode_309691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, 47), 'unicode', u'of')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 11), list_309677, unicode_309691)
# Adding element type (line 251)
unicode_309692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 253, 12), 'unicode', u'st')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 11), list_309677, unicode_309692)
# Adding element type (line 251)
unicode_309693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 253, 18), 'unicode', u'nd')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 11), list_309677, unicode_309693)
# Adding element type (line 251)
unicode_309694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 253, 24), 'unicode', u'rd')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 11), list_309677, unicode_309694)
# Adding element type (line 251)
unicode_309695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 253, 30), 'unicode', u'th')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 11), list_309677, unicode_309695)

# Getting the type of 'parserinfo'
parserinfo_309696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'parserinfo')
# Setting the type of the member 'JUMP' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), parserinfo_309696, 'JUMP', list_309677)

# Assigning a List to a Name (line 255):

# Obtaining an instance of the builtin type 'list' (line 255)
list_309697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 15), 'list')
# Adding type elements to the builtin type 'list' instance (line 255)
# Adding element type (line 255)

# Obtaining an instance of the builtin type 'tuple' (line 255)
tuple_309698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 17), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 255)
# Adding element type (line 255)
unicode_309699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 17), 'unicode', u'Mon')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 17), tuple_309698, unicode_309699)
# Adding element type (line 255)
unicode_309700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 24), 'unicode', u'Monday')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 17), tuple_309698, unicode_309700)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 15), list_309697, tuple_309698)
# Adding element type (line 255)

# Obtaining an instance of the builtin type 'tuple' (line 256)
tuple_309701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 17), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 256)
# Adding element type (line 256)
unicode_309702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 17), 'unicode', u'Tue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 256, 17), tuple_309701, unicode_309702)
# Adding element type (line 256)
unicode_309703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 24), 'unicode', u'Tuesday')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 256, 17), tuple_309701, unicode_309703)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 15), list_309697, tuple_309701)
# Adding element type (line 255)

# Obtaining an instance of the builtin type 'tuple' (line 257)
tuple_309704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 257, 17), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 257)
# Adding element type (line 257)
unicode_309705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 257, 17), 'unicode', u'Wed')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 257, 17), tuple_309704, unicode_309705)
# Adding element type (line 257)
unicode_309706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 257, 24), 'unicode', u'Wednesday')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 257, 17), tuple_309704, unicode_309706)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 15), list_309697, tuple_309704)
# Adding element type (line 255)

# Obtaining an instance of the builtin type 'tuple' (line 258)
tuple_309707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, 17), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 258)
# Adding element type (line 258)
unicode_309708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, 17), 'unicode', u'Thu')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 258, 17), tuple_309707, unicode_309708)
# Adding element type (line 258)
unicode_309709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, 24), 'unicode', u'Thursday')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 258, 17), tuple_309707, unicode_309709)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 15), list_309697, tuple_309707)
# Adding element type (line 255)

# Obtaining an instance of the builtin type 'tuple' (line 259)
tuple_309710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 259, 17), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 259)
# Adding element type (line 259)
unicode_309711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 259, 17), 'unicode', u'Fri')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 259, 17), tuple_309710, unicode_309711)
# Adding element type (line 259)
unicode_309712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 259, 24), 'unicode', u'Friday')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 259, 17), tuple_309710, unicode_309712)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 15), list_309697, tuple_309710)
# Adding element type (line 255)

# Obtaining an instance of the builtin type 'tuple' (line 260)
tuple_309713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 260, 17), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 260)
# Adding element type (line 260)
unicode_309714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 260, 17), 'unicode', u'Sat')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 260, 17), tuple_309713, unicode_309714)
# Adding element type (line 260)
unicode_309715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 260, 24), 'unicode', u'Saturday')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 260, 17), tuple_309713, unicode_309715)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 15), list_309697, tuple_309713)
# Adding element type (line 255)

# Obtaining an instance of the builtin type 'tuple' (line 261)
tuple_309716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 261, 17), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 261)
# Adding element type (line 261)
unicode_309717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 261, 17), 'unicode', u'Sun')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 261, 17), tuple_309716, unicode_309717)
# Adding element type (line 261)
unicode_309718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 261, 24), 'unicode', u'Sunday')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 261, 17), tuple_309716, unicode_309718)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 15), list_309697, tuple_309716)

# Getting the type of 'parserinfo'
parserinfo_309719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'parserinfo')
# Setting the type of the member 'WEEKDAYS' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), parserinfo_309719, 'WEEKDAYS', list_309697)

# Assigning a List to a Name (line 262):

# Obtaining an instance of the builtin type 'list' (line 262)
list_309720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 262, 13), 'list')
# Adding type elements to the builtin type 'list' instance (line 262)
# Adding element type (line 262)

# Obtaining an instance of the builtin type 'tuple' (line 262)
tuple_309721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 262, 15), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 262)
# Adding element type (line 262)
unicode_309722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 262, 15), 'unicode', u'Jan')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 262, 15), tuple_309721, unicode_309722)
# Adding element type (line 262)
unicode_309723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 262, 22), 'unicode', u'January')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 262, 15), tuple_309721, unicode_309723)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 262, 13), list_309720, tuple_309721)
# Adding element type (line 262)

# Obtaining an instance of the builtin type 'tuple' (line 263)
tuple_309724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 263, 15), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 263)
# Adding element type (line 263)
unicode_309725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 263, 15), 'unicode', u'Feb')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 263, 15), tuple_309724, unicode_309725)
# Adding element type (line 263)
unicode_309726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 263, 22), 'unicode', u'February')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 263, 15), tuple_309724, unicode_309726)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 262, 13), list_309720, tuple_309724)
# Adding element type (line 262)

# Obtaining an instance of the builtin type 'tuple' (line 264)
tuple_309727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 264, 15), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 264)
# Adding element type (line 264)
unicode_309728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 264, 15), 'unicode', u'Mar')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 264, 15), tuple_309727, unicode_309728)
# Adding element type (line 264)
unicode_309729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 264, 22), 'unicode', u'March')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 264, 15), tuple_309727, unicode_309729)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 262, 13), list_309720, tuple_309727)
# Adding element type (line 262)

# Obtaining an instance of the builtin type 'tuple' (line 265)
tuple_309730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 265, 15), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 265)
# Adding element type (line 265)
unicode_309731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 265, 15), 'unicode', u'Apr')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 265, 15), tuple_309730, unicode_309731)
# Adding element type (line 265)
unicode_309732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 265, 22), 'unicode', u'April')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 265, 15), tuple_309730, unicode_309732)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 262, 13), list_309720, tuple_309730)
# Adding element type (line 262)

# Obtaining an instance of the builtin type 'tuple' (line 266)
tuple_309733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 266, 15), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 266)
# Adding element type (line 266)
unicode_309734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 266, 15), 'unicode', u'May')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 266, 15), tuple_309733, unicode_309734)
# Adding element type (line 266)
unicode_309735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 266, 22), 'unicode', u'May')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 266, 15), tuple_309733, unicode_309735)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 262, 13), list_309720, tuple_309733)
# Adding element type (line 262)

# Obtaining an instance of the builtin type 'tuple' (line 267)
tuple_309736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 267, 15), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 267)
# Adding element type (line 267)
unicode_309737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 267, 15), 'unicode', u'Jun')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 267, 15), tuple_309736, unicode_309737)
# Adding element type (line 267)
unicode_309738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 267, 22), 'unicode', u'June')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 267, 15), tuple_309736, unicode_309738)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 262, 13), list_309720, tuple_309736)
# Adding element type (line 262)

# Obtaining an instance of the builtin type 'tuple' (line 268)
tuple_309739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 15), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 268)
# Adding element type (line 268)
unicode_309740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 15), 'unicode', u'Jul')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 268, 15), tuple_309739, unicode_309740)
# Adding element type (line 268)
unicode_309741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 22), 'unicode', u'July')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 268, 15), tuple_309739, unicode_309741)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 262, 13), list_309720, tuple_309739)
# Adding element type (line 262)

# Obtaining an instance of the builtin type 'tuple' (line 269)
tuple_309742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 269, 15), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 269)
# Adding element type (line 269)
unicode_309743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 269, 15), 'unicode', u'Aug')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 269, 15), tuple_309742, unicode_309743)
# Adding element type (line 269)
unicode_309744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 269, 22), 'unicode', u'August')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 269, 15), tuple_309742, unicode_309744)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 262, 13), list_309720, tuple_309742)
# Adding element type (line 262)

# Obtaining an instance of the builtin type 'tuple' (line 270)
tuple_309745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 270, 15), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 270)
# Adding element type (line 270)
unicode_309746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 270, 15), 'unicode', u'Sep')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 270, 15), tuple_309745, unicode_309746)
# Adding element type (line 270)
unicode_309747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 270, 22), 'unicode', u'Sept')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 270, 15), tuple_309745, unicode_309747)
# Adding element type (line 270)
unicode_309748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 270, 30), 'unicode', u'September')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 270, 15), tuple_309745, unicode_309748)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 262, 13), list_309720, tuple_309745)
# Adding element type (line 262)

# Obtaining an instance of the builtin type 'tuple' (line 271)
tuple_309749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, 15), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 271)
# Adding element type (line 271)
unicode_309750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, 15), 'unicode', u'Oct')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 271, 15), tuple_309749, unicode_309750)
# Adding element type (line 271)
unicode_309751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, 22), 'unicode', u'October')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 271, 15), tuple_309749, unicode_309751)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 262, 13), list_309720, tuple_309749)
# Adding element type (line 262)

# Obtaining an instance of the builtin type 'tuple' (line 272)
tuple_309752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 272, 15), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 272)
# Adding element type (line 272)
unicode_309753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 272, 15), 'unicode', u'Nov')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 272, 15), tuple_309752, unicode_309753)
# Adding element type (line 272)
unicode_309754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 272, 22), 'unicode', u'November')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 272, 15), tuple_309752, unicode_309754)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 262, 13), list_309720, tuple_309752)
# Adding element type (line 262)

# Obtaining an instance of the builtin type 'tuple' (line 273)
tuple_309755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 15), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 273)
# Adding element type (line 273)
unicode_309756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 15), 'unicode', u'Dec')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 273, 15), tuple_309755, unicode_309756)
# Adding element type (line 273)
unicode_309757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 22), 'unicode', u'December')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 273, 15), tuple_309755, unicode_309757)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 262, 13), list_309720, tuple_309755)

# Getting the type of 'parserinfo'
parserinfo_309758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'parserinfo')
# Setting the type of the member 'MONTHS' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), parserinfo_309758, 'MONTHS', list_309720)

# Assigning a List to a Name (line 274):

# Obtaining an instance of the builtin type 'list' (line 274)
list_309759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 274, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 274)
# Adding element type (line 274)

# Obtaining an instance of the builtin type 'tuple' (line 274)
tuple_309760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 274, 12), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 274)
# Adding element type (line 274)
unicode_309761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 274, 12), 'unicode', u'h')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 274, 12), tuple_309760, unicode_309761)
# Adding element type (line 274)
unicode_309762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 274, 17), 'unicode', u'hour')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 274, 12), tuple_309760, unicode_309762)
# Adding element type (line 274)
unicode_309763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 274, 25), 'unicode', u'hours')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 274, 12), tuple_309760, unicode_309763)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 274, 10), list_309759, tuple_309760)
# Adding element type (line 274)

# Obtaining an instance of the builtin type 'tuple' (line 275)
tuple_309764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 275, 12), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 275)
# Adding element type (line 275)
unicode_309765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 275, 12), 'unicode', u'm')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 275, 12), tuple_309764, unicode_309765)
# Adding element type (line 275)
unicode_309766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 275, 17), 'unicode', u'minute')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 275, 12), tuple_309764, unicode_309766)
# Adding element type (line 275)
unicode_309767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 275, 27), 'unicode', u'minutes')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 275, 12), tuple_309764, unicode_309767)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 274, 10), list_309759, tuple_309764)
# Adding element type (line 274)

# Obtaining an instance of the builtin type 'tuple' (line 276)
tuple_309768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 276, 12), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 276)
# Adding element type (line 276)
unicode_309769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 276, 12), 'unicode', u's')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 276, 12), tuple_309768, unicode_309769)
# Adding element type (line 276)
unicode_309770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 276, 17), 'unicode', u'second')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 276, 12), tuple_309768, unicode_309770)
# Adding element type (line 276)
unicode_309771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 276, 27), 'unicode', u'seconds')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 276, 12), tuple_309768, unicode_309771)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 274, 10), list_309759, tuple_309768)

# Getting the type of 'parserinfo'
parserinfo_309772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'parserinfo')
# Setting the type of the member 'HMS' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), parserinfo_309772, 'HMS', list_309759)

# Assigning a List to a Name (line 277):

# Obtaining an instance of the builtin type 'list' (line 277)
list_309773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 11), 'list')
# Adding type elements to the builtin type 'list' instance (line 277)
# Adding element type (line 277)

# Obtaining an instance of the builtin type 'tuple' (line 277)
tuple_309774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 13), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 277)
# Adding element type (line 277)
unicode_309775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 13), 'unicode', u'am')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 277, 13), tuple_309774, unicode_309775)
# Adding element type (line 277)
unicode_309776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 19), 'unicode', u'a')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 277, 13), tuple_309774, unicode_309776)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 277, 11), list_309773, tuple_309774)
# Adding element type (line 277)

# Obtaining an instance of the builtin type 'tuple' (line 278)
tuple_309777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 13), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 278)
# Adding element type (line 278)
unicode_309778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 13), 'unicode', u'pm')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 278, 13), tuple_309777, unicode_309778)
# Adding element type (line 278)
unicode_309779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 19), 'unicode', u'p')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 278, 13), tuple_309777, unicode_309779)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 277, 11), list_309773, tuple_309777)

# Getting the type of 'parserinfo'
parserinfo_309780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'parserinfo')
# Setting the type of the member 'AMPM' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), parserinfo_309780, 'AMPM', list_309773)

# Assigning a List to a Name (line 279):

# Obtaining an instance of the builtin type 'list' (line 279)
list_309781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 14), 'list')
# Adding type elements to the builtin type 'list' instance (line 279)
# Adding element type (line 279)
unicode_309782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 15), 'unicode', u'UTC')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 279, 14), list_309781, unicode_309782)
# Adding element type (line 279)
unicode_309783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 22), 'unicode', u'GMT')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 279, 14), list_309781, unicode_309783)
# Adding element type (line 279)
unicode_309784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 29), 'unicode', u'Z')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 279, 14), list_309781, unicode_309784)

# Getting the type of 'parserinfo'
parserinfo_309785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'parserinfo')
# Setting the type of the member 'UTCZONE' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), parserinfo_309785, 'UTCZONE', list_309781)

# Assigning a List to a Name (line 280):

# Obtaining an instance of the builtin type 'list' (line 280)
list_309786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 280, 14), 'list')
# Adding type elements to the builtin type 'list' instance (line 280)
# Adding element type (line 280)
unicode_309787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 280, 15), 'unicode', u'of')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 280, 14), list_309786, unicode_309787)

# Getting the type of 'parserinfo'
parserinfo_309788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'parserinfo')
# Setting the type of the member 'PERTAIN' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), parserinfo_309788, 'PERTAIN', list_309786)

# Assigning a Dict to a Name (line 281):

# Obtaining an instance of the builtin type 'dict' (line 281)
dict_309789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 281, 15), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 281)

# Getting the type of 'parserinfo'
parserinfo_309790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'parserinfo')
# Setting the type of the member 'TZOFFSET' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), parserinfo_309790, 'TZOFFSET', dict_309789)
# Declaration of the '_ymd' class
# Getting the type of 'list' (line 374)
list_309791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 11), 'list')

class _ymd(list_309791, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 375, 4, False)
        # Assigning a type to the variable 'self' (line 376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ymd.__init__', ['tzstr'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['tzstr'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 376)
        # Getting the type of 'args' (line 376)
        args_309799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 46), 'args', False)
        # Processing the call keyword arguments (line 376)
        # Getting the type of 'kwargs' (line 376)
        kwargs_309800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 54), 'kwargs', False)
        kwargs_309801 = {'kwargs_309800': kwargs_309800}
        
        # Call to super(...): (line 376)
        # Processing the call arguments (line 376)
        # Getting the type of 'self' (line 376)
        self_309793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 14), 'self', False)
        # Obtaining the member '__class__' of a type (line 376)
        class___309794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 14), self_309793, '__class__')
        # Getting the type of 'self' (line 376)
        self_309795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 30), 'self', False)
        # Processing the call keyword arguments (line 376)
        kwargs_309796 = {}
        # Getting the type of 'super' (line 376)
        super_309792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 8), 'super', False)
        # Calling super(args, kwargs) (line 376)
        super_call_result_309797 = invoke(stypy.reporting.localization.Localization(__file__, 376, 8), super_309792, *[class___309794, self_309795], **kwargs_309796)
        
        # Obtaining the member '__init__' of a type (line 376)
        init___309798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 8), super_call_result_309797, '__init__')
        # Calling __init__(args, kwargs) (line 376)
        init___call_result_309802 = invoke(stypy.reporting.localization.Localization(__file__, 376, 8), init___309798, *[args_309799], **kwargs_309801)
        
        
        # Assigning a Name to a Attribute (line 377):
        
        # Assigning a Name to a Attribute (line 377):
        # Getting the type of 'False' (line 377)
        False_309803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 33), 'False')
        # Getting the type of 'self' (line 377)
        self_309804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'self')
        # Setting the type of the member 'century_specified' of a type (line 377)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 377, 8), self_309804, 'century_specified', False_309803)
        
        # Assigning a Name to a Attribute (line 378):
        
        # Assigning a Name to a Attribute (line 378):
        # Getting the type of 'tzstr' (line 378)
        tzstr_309805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 21), 'tzstr')
        # Getting the type of 'self' (line 378)
        self_309806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 8), 'self')
        # Setting the type of the member 'tzstr' of a type (line 378)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 378, 8), self_309806, 'tzstr', tzstr_309805)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @staticmethod
    @norecursion
    def token_could_be_year(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'token_could_be_year'
        module_type_store = module_type_store.open_function_context('token_could_be_year', 380, 4, False)
        
        # Passed parameters checking function
        _ymd.token_could_be_year.__dict__.__setitem__('stypy_localization', localization)
        _ymd.token_could_be_year.__dict__.__setitem__('stypy_type_of_self', None)
        _ymd.token_could_be_year.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ymd.token_could_be_year.__dict__.__setitem__('stypy_function_name', 'token_could_be_year')
        _ymd.token_could_be_year.__dict__.__setitem__('stypy_param_names_list', ['token', 'year'])
        _ymd.token_could_be_year.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ymd.token_could_be_year.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ymd.token_could_be_year.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ymd.token_could_be_year.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ymd.token_could_be_year.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ymd.token_could_be_year.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, None, module_type_store, 'token_could_be_year', ['token', 'year'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'token_could_be_year', localization, ['year'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'token_could_be_year(...)' code ##################

        
        
        # SSA begins for try-except statement (line 382)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        
        # Call to int(...): (line 383)
        # Processing the call arguments (line 383)
        # Getting the type of 'token' (line 383)
        token_309808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 23), 'token', False)
        # Processing the call keyword arguments (line 383)
        kwargs_309809 = {}
        # Getting the type of 'int' (line 383)
        int_309807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 19), 'int', False)
        # Calling int(args, kwargs) (line 383)
        int_call_result_309810 = invoke(stypy.reporting.localization.Localization(__file__, 383, 19), int_309807, *[token_309808], **kwargs_309809)
        
        # Getting the type of 'year' (line 383)
        year_309811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 33), 'year')
        # Applying the binary operator '==' (line 383)
        result_eq_309812 = python_operator(stypy.reporting.localization.Localization(__file__, 383, 19), '==', int_call_result_309810, year_309811)
        
        # Assigning a type to the variable 'stypy_return_type' (line 383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 12), 'stypy_return_type', result_eq_309812)
        # SSA branch for the except part of a try statement (line 382)
        # SSA branch for the except 'ValueError' branch of a try statement (line 382)
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'False' (line 385)
        False_309813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 19), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 385)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 385, 12), 'stypy_return_type', False_309813)
        # SSA join for try-except statement (line 382)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'token_could_be_year(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'token_could_be_year' in the type store
        # Getting the type of 'stypy_return_type' (line 380)
        stypy_return_type_309814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309814)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'token_could_be_year'
        return stypy_return_type_309814


    @staticmethod
    @norecursion
    def find_potential_year_tokens(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'find_potential_year_tokens'
        module_type_store = module_type_store.open_function_context('find_potential_year_tokens', 387, 4, False)
        
        # Passed parameters checking function
        _ymd.find_potential_year_tokens.__dict__.__setitem__('stypy_localization', localization)
        _ymd.find_potential_year_tokens.__dict__.__setitem__('stypy_type_of_self', None)
        _ymd.find_potential_year_tokens.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ymd.find_potential_year_tokens.__dict__.__setitem__('stypy_function_name', 'find_potential_year_tokens')
        _ymd.find_potential_year_tokens.__dict__.__setitem__('stypy_param_names_list', ['year', 'tokens'])
        _ymd.find_potential_year_tokens.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ymd.find_potential_year_tokens.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ymd.find_potential_year_tokens.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ymd.find_potential_year_tokens.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ymd.find_potential_year_tokens.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ymd.find_potential_year_tokens.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, None, module_type_store, 'find_potential_year_tokens', ['year', 'tokens'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'find_potential_year_tokens', localization, ['tokens'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'find_potential_year_tokens(...)' code ##################

        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'tokens' (line 389)
        tokens_309822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 35), 'tokens')
        comprehension_309823 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 389, 16), tokens_309822)
        # Assigning a type to the variable 'token' (line 389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 16), 'token', comprehension_309823)
        
        # Call to token_could_be_year(...): (line 389)
        # Processing the call arguments (line 389)
        # Getting the type of 'token' (line 389)
        token_309818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 70), 'token', False)
        # Getting the type of 'year' (line 389)
        year_309819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 77), 'year', False)
        # Processing the call keyword arguments (line 389)
        kwargs_309820 = {}
        # Getting the type of '_ymd' (line 389)
        _ymd_309816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 45), '_ymd', False)
        # Obtaining the member 'token_could_be_year' of a type (line 389)
        token_could_be_year_309817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 45), _ymd_309816, 'token_could_be_year')
        # Calling token_could_be_year(args, kwargs) (line 389)
        token_could_be_year_call_result_309821 = invoke(stypy.reporting.localization.Localization(__file__, 389, 45), token_could_be_year_309817, *[token_309818, year_309819], **kwargs_309820)
        
        # Getting the type of 'token' (line 389)
        token_309815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 16), 'token')
        list_309824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 389, 16), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 389, 16), list_309824, token_309815)
        # Assigning a type to the variable 'stypy_return_type' (line 389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'stypy_return_type', list_309824)
        
        # ################# End of 'find_potential_year_tokens(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'find_potential_year_tokens' in the type store
        # Getting the type of 'stypy_return_type' (line 387)
        stypy_return_type_309825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309825)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'find_potential_year_tokens'
        return stypy_return_type_309825


    @norecursion
    def find_probable_year_index(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'find_probable_year_index'
        module_type_store = module_type_store.open_function_context('find_probable_year_index', 391, 4, False)
        # Assigning a type to the variable 'self' (line 392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 392, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ymd.find_probable_year_index.__dict__.__setitem__('stypy_localization', localization)
        _ymd.find_probable_year_index.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ymd.find_probable_year_index.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ymd.find_probable_year_index.__dict__.__setitem__('stypy_function_name', '_ymd.find_probable_year_index')
        _ymd.find_probable_year_index.__dict__.__setitem__('stypy_param_names_list', ['tokens'])
        _ymd.find_probable_year_index.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ymd.find_probable_year_index.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ymd.find_probable_year_index.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ymd.find_probable_year_index.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ymd.find_probable_year_index.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ymd.find_probable_year_index.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ymd.find_probable_year_index', ['tokens'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'find_probable_year_index', localization, ['tokens'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'find_probable_year_index(...)' code ##################

        unicode_309826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 395, (-1)), 'unicode', u'\n        attempt to deduce if a pre 100 year was lost\n         due to padded zeros being taken off\n        ')
        
        
        # Call to enumerate(...): (line 396)
        # Processing the call arguments (line 396)
        # Getting the type of 'self' (line 396)
        self_309828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 38), 'self', False)
        # Processing the call keyword arguments (line 396)
        kwargs_309829 = {}
        # Getting the type of 'enumerate' (line 396)
        enumerate_309827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 28), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 396)
        enumerate_call_result_309830 = invoke(stypy.reporting.localization.Localization(__file__, 396, 28), enumerate_309827, *[self_309828], **kwargs_309829)
        
        # Testing the type of a for loop iterable (line 396)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 396, 8), enumerate_call_result_309830)
        # Getting the type of the for loop variable (line 396)
        for_loop_var_309831 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 396, 8), enumerate_call_result_309830)
        # Assigning a type to the variable 'index' (line 396)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 396, 8), 'index', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 396, 8), for_loop_var_309831))
        # Assigning a type to the variable 'token' (line 396)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 396, 8), 'token', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 396, 8), for_loop_var_309831))
        # SSA begins for a for statement (line 396)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 397):
        
        # Assigning a Call to a Name (line 397):
        
        # Call to find_potential_year_tokens(...): (line 397)
        # Processing the call arguments (line 397)
        # Getting the type of 'token' (line 397)
        token_309834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 68), 'token', False)
        # Getting the type of 'tokens' (line 397)
        tokens_309835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 75), 'tokens', False)
        # Processing the call keyword arguments (line 397)
        kwargs_309836 = {}
        # Getting the type of '_ymd' (line 397)
        _ymd_309832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 36), '_ymd', False)
        # Obtaining the member 'find_potential_year_tokens' of a type (line 397)
        find_potential_year_tokens_309833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 397, 36), _ymd_309832, 'find_potential_year_tokens')
        # Calling find_potential_year_tokens(args, kwargs) (line 397)
        find_potential_year_tokens_call_result_309837 = invoke(stypy.reporting.localization.Localization(__file__, 397, 36), find_potential_year_tokens_309833, *[token_309834, tokens_309835], **kwargs_309836)
        
        # Assigning a type to the variable 'potential_year_tokens' (line 397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 397, 12), 'potential_year_tokens', find_potential_year_tokens_call_result_309837)
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 398)
        # Processing the call arguments (line 398)
        # Getting the type of 'potential_year_tokens' (line 398)
        potential_year_tokens_309839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 19), 'potential_year_tokens', False)
        # Processing the call keyword arguments (line 398)
        kwargs_309840 = {}
        # Getting the type of 'len' (line 398)
        len_309838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 15), 'len', False)
        # Calling len(args, kwargs) (line 398)
        len_call_result_309841 = invoke(stypy.reporting.localization.Localization(__file__, 398, 15), len_309838, *[potential_year_tokens_309839], **kwargs_309840)
        
        int_309842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 398, 45), 'int')
        # Applying the binary operator '==' (line 398)
        result_eq_309843 = python_operator(stypy.reporting.localization.Localization(__file__, 398, 15), '==', len_call_result_309841, int_309842)
        
        
        
        # Call to len(...): (line 398)
        # Processing the call arguments (line 398)
        
        # Obtaining the type of the subscript
        int_309845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 398, 77), 'int')
        # Getting the type of 'potential_year_tokens' (line 398)
        potential_year_tokens_309846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 55), 'potential_year_tokens', False)
        # Obtaining the member '__getitem__' of a type (line 398)
        getitem___309847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 398, 55), potential_year_tokens_309846, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 398)
        subscript_call_result_309848 = invoke(stypy.reporting.localization.Localization(__file__, 398, 55), getitem___309847, int_309845)
        
        # Processing the call keyword arguments (line 398)
        kwargs_309849 = {}
        # Getting the type of 'len' (line 398)
        len_309844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 51), 'len', False)
        # Calling len(args, kwargs) (line 398)
        len_call_result_309850 = invoke(stypy.reporting.localization.Localization(__file__, 398, 51), len_309844, *[subscript_call_result_309848], **kwargs_309849)
        
        int_309851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 398, 83), 'int')
        # Applying the binary operator '>' (line 398)
        result_gt_309852 = python_operator(stypy.reporting.localization.Localization(__file__, 398, 51), '>', len_call_result_309850, int_309851)
        
        # Applying the binary operator 'and' (line 398)
        result_and_keyword_309853 = python_operator(stypy.reporting.localization.Localization(__file__, 398, 15), 'and', result_eq_309843, result_gt_309852)
        
        # Testing the type of an if condition (line 398)
        if_condition_309854 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 398, 12), result_and_keyword_309853)
        # Assigning a type to the variable 'if_condition_309854' (line 398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 398, 12), 'if_condition_309854', if_condition_309854)
        # SSA begins for if statement (line 398)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'index' (line 399)
        index_309855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 23), 'index')
        # Assigning a type to the variable 'stypy_return_type' (line 399)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 399, 16), 'stypy_return_type', index_309855)
        # SSA join for if statement (line 398)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'find_probable_year_index(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'find_probable_year_index' in the type store
        # Getting the type of 'stypy_return_type' (line 391)
        stypy_return_type_309856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309856)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'find_probable_year_index'
        return stypy_return_type_309856


    @norecursion
    def append(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'append'
        module_type_store = module_type_store.open_function_context('append', 401, 4, False)
        # Assigning a type to the variable 'self' (line 402)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 402, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ymd.append.__dict__.__setitem__('stypy_localization', localization)
        _ymd.append.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ymd.append.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ymd.append.__dict__.__setitem__('stypy_function_name', '_ymd.append')
        _ymd.append.__dict__.__setitem__('stypy_param_names_list', ['val'])
        _ymd.append.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ymd.append.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ymd.append.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ymd.append.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ymd.append.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ymd.append.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ymd.append', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'append', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'append(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 402)
        unicode_309857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 402, 24), 'unicode', u'__len__')
        # Getting the type of 'val' (line 402)
        val_309858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 19), 'val')
        
        (may_be_309859, more_types_in_union_309860) = may_provide_member(unicode_309857, val_309858)

        if may_be_309859:

            if more_types_in_union_309860:
                # Runtime conditional SSA (line 402)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'val' (line 402)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 402, 8), 'val', remove_not_member_provider_from_union(val_309858, u'__len__'))
            
            
            # Evaluating a boolean operation
            
            # Call to isdigit(...): (line 403)
            # Processing the call keyword arguments (line 403)
            kwargs_309863 = {}
            # Getting the type of 'val' (line 403)
            val_309861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 15), 'val', False)
            # Obtaining the member 'isdigit' of a type (line 403)
            isdigit_309862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 15), val_309861, 'isdigit')
            # Calling isdigit(args, kwargs) (line 403)
            isdigit_call_result_309864 = invoke(stypy.reporting.localization.Localization(__file__, 403, 15), isdigit_309862, *[], **kwargs_309863)
            
            
            
            # Call to len(...): (line 403)
            # Processing the call arguments (line 403)
            # Getting the type of 'val' (line 403)
            val_309866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 37), 'val', False)
            # Processing the call keyword arguments (line 403)
            kwargs_309867 = {}
            # Getting the type of 'len' (line 403)
            len_309865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 33), 'len', False)
            # Calling len(args, kwargs) (line 403)
            len_call_result_309868 = invoke(stypy.reporting.localization.Localization(__file__, 403, 33), len_309865, *[val_309866], **kwargs_309867)
            
            int_309869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 44), 'int')
            # Applying the binary operator '>' (line 403)
            result_gt_309870 = python_operator(stypy.reporting.localization.Localization(__file__, 403, 33), '>', len_call_result_309868, int_309869)
            
            # Applying the binary operator 'and' (line 403)
            result_and_keyword_309871 = python_operator(stypy.reporting.localization.Localization(__file__, 403, 15), 'and', isdigit_call_result_309864, result_gt_309870)
            
            # Testing the type of an if condition (line 403)
            if_condition_309872 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 403, 12), result_and_keyword_309871)
            # Assigning a type to the variable 'if_condition_309872' (line 403)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 12), 'if_condition_309872', if_condition_309872)
            # SSA begins for if statement (line 403)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Attribute (line 404):
            
            # Assigning a Name to a Attribute (line 404):
            # Getting the type of 'True' (line 404)
            True_309873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 41), 'True')
            # Getting the type of 'self' (line 404)
            self_309874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 16), 'self')
            # Setting the type of the member 'century_specified' of a type (line 404)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 404, 16), self_309874, 'century_specified', True_309873)
            # SSA join for if statement (line 403)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_309860:
                # Runtime conditional SSA for else branch (line 402)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_309859) or more_types_in_union_309860):
            # Assigning a type to the variable 'val' (line 402)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 402, 8), 'val', remove_member_provider_from_union(val_309858, u'__len__'))
            
            
            # Getting the type of 'val' (line 405)
            val_309875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 13), 'val')
            int_309876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 405, 19), 'int')
            # Applying the binary operator '>' (line 405)
            result_gt_309877 = python_operator(stypy.reporting.localization.Localization(__file__, 405, 13), '>', val_309875, int_309876)
            
            # Testing the type of an if condition (line 405)
            if_condition_309878 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 405, 13), result_gt_309877)
            # Assigning a type to the variable 'if_condition_309878' (line 405)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 405, 13), 'if_condition_309878', if_condition_309878)
            # SSA begins for if statement (line 405)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Attribute (line 406):
            
            # Assigning a Name to a Attribute (line 406):
            # Getting the type of 'True' (line 406)
            True_309879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 37), 'True')
            # Getting the type of 'self' (line 406)
            self_309880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 12), 'self')
            # Setting the type of the member 'century_specified' of a type (line 406)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 406, 12), self_309880, 'century_specified', True_309879)
            # SSA join for if statement (line 405)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_309859 and more_types_in_union_309860):
                # SSA join for if statement (line 402)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to append(...): (line 408)
        # Processing the call arguments (line 408)
        
        # Call to int(...): (line 408)
        # Processing the call arguments (line 408)
        # Getting the type of 'val' (line 408)
        val_309889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 47), 'val', False)
        # Processing the call keyword arguments (line 408)
        kwargs_309890 = {}
        # Getting the type of 'int' (line 408)
        int_309888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 43), 'int', False)
        # Calling int(args, kwargs) (line 408)
        int_call_result_309891 = invoke(stypy.reporting.localization.Localization(__file__, 408, 43), int_309888, *[val_309889], **kwargs_309890)
        
        # Processing the call keyword arguments (line 408)
        kwargs_309892 = {}
        
        # Call to super(...): (line 408)
        # Processing the call arguments (line 408)
        # Getting the type of 'self' (line 408)
        self_309882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 14), 'self', False)
        # Obtaining the member '__class__' of a type (line 408)
        class___309883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 14), self_309882, '__class__')
        # Getting the type of 'self' (line 408)
        self_309884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 30), 'self', False)
        # Processing the call keyword arguments (line 408)
        kwargs_309885 = {}
        # Getting the type of 'super' (line 408)
        super_309881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 8), 'super', False)
        # Calling super(args, kwargs) (line 408)
        super_call_result_309886 = invoke(stypy.reporting.localization.Localization(__file__, 408, 8), super_309881, *[class___309883, self_309884], **kwargs_309885)
        
        # Obtaining the member 'append' of a type (line 408)
        append_309887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 8), super_call_result_309886, 'append')
        # Calling append(args, kwargs) (line 408)
        append_call_result_309893 = invoke(stypy.reporting.localization.Localization(__file__, 408, 8), append_309887, *[int_call_result_309891], **kwargs_309892)
        
        
        # ################# End of 'append(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'append' in the type store
        # Getting the type of 'stypy_return_type' (line 401)
        stypy_return_type_309894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_309894)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'append'
        return stypy_return_type_309894


    @norecursion
    def resolve_ymd(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'resolve_ymd'
        module_type_store = module_type_store.open_function_context('resolve_ymd', 410, 4, False)
        # Assigning a type to the variable 'self' (line 411)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ymd.resolve_ymd.__dict__.__setitem__('stypy_localization', localization)
        _ymd.resolve_ymd.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ymd.resolve_ymd.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ymd.resolve_ymd.__dict__.__setitem__('stypy_function_name', '_ymd.resolve_ymd')
        _ymd.resolve_ymd.__dict__.__setitem__('stypy_param_names_list', ['mstridx', 'yearfirst', 'dayfirst'])
        _ymd.resolve_ymd.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ymd.resolve_ymd.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ymd.resolve_ymd.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ymd.resolve_ymd.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ymd.resolve_ymd.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ymd.resolve_ymd.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ymd.resolve_ymd', ['mstridx', 'yearfirst', 'dayfirst'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'resolve_ymd', localization, ['mstridx', 'yearfirst', 'dayfirst'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'resolve_ymd(...)' code ##################

        
        # Assigning a Call to a Name (line 411):
        
        # Assigning a Call to a Name (line 411):
        
        # Call to len(...): (line 411)
        # Processing the call arguments (line 411)
        # Getting the type of 'self' (line 411)
        self_309896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 22), 'self', False)
        # Processing the call keyword arguments (line 411)
        kwargs_309897 = {}
        # Getting the type of 'len' (line 411)
        len_309895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 18), 'len', False)
        # Calling len(args, kwargs) (line 411)
        len_call_result_309898 = invoke(stypy.reporting.localization.Localization(__file__, 411, 18), len_309895, *[self_309896], **kwargs_309897)
        
        # Assigning a type to the variable 'len_ymd' (line 411)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 8), 'len_ymd', len_call_result_309898)
        
        # Assigning a Tuple to a Tuple (line 412):
        
        # Assigning a Name to a Name (line 412):
        # Getting the type of 'None' (line 412)
        None_309899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 28), 'None')
        # Assigning a type to the variable 'tuple_assignment_308858' (line 412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 8), 'tuple_assignment_308858', None_309899)
        
        # Assigning a Name to a Name (line 412):
        # Getting the type of 'None' (line 412)
        None_309900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 34), 'None')
        # Assigning a type to the variable 'tuple_assignment_308859' (line 412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 8), 'tuple_assignment_308859', None_309900)
        
        # Assigning a Name to a Name (line 412):
        # Getting the type of 'None' (line 412)
        None_309901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 40), 'None')
        # Assigning a type to the variable 'tuple_assignment_308860' (line 412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 8), 'tuple_assignment_308860', None_309901)
        
        # Assigning a Name to a Name (line 412):
        # Getting the type of 'tuple_assignment_308858' (line 412)
        tuple_assignment_308858_309902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 8), 'tuple_assignment_308858')
        # Assigning a type to the variable 'year' (line 412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 8), 'year', tuple_assignment_308858_309902)
        
        # Assigning a Name to a Name (line 412):
        # Getting the type of 'tuple_assignment_308859' (line 412)
        tuple_assignment_308859_309903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 8), 'tuple_assignment_308859')
        # Assigning a type to the variable 'month' (line 412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 14), 'month', tuple_assignment_308859_309903)
        
        # Assigning a Name to a Name (line 412):
        # Getting the type of 'tuple_assignment_308860' (line 412)
        tuple_assignment_308860_309904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 8), 'tuple_assignment_308860')
        # Assigning a type to the variable 'day' (line 412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 21), 'day', tuple_assignment_308860_309904)
        
        
        # Getting the type of 'len_ymd' (line 414)
        len_ymd_309905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 11), 'len_ymd')
        int_309906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 414, 21), 'int')
        # Applying the binary operator '>' (line 414)
        result_gt_309907 = python_operator(stypy.reporting.localization.Localization(__file__, 414, 11), '>', len_ymd_309905, int_309906)
        
        # Testing the type of an if condition (line 414)
        if_condition_309908 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 414, 8), result_gt_309907)
        # Assigning a type to the variable 'if_condition_309908' (line 414)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 414, 8), 'if_condition_309908', if_condition_309908)
        # SSA begins for if statement (line 414)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 415)
        # Processing the call arguments (line 415)
        unicode_309910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 415, 29), 'unicode', u'More than three YMD values')
        # Processing the call keyword arguments (line 415)
        kwargs_309911 = {}
        # Getting the type of 'ValueError' (line 415)
        ValueError_309909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 415)
        ValueError_call_result_309912 = invoke(stypy.reporting.localization.Localization(__file__, 415, 18), ValueError_309909, *[unicode_309910], **kwargs_309911)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 415, 12), ValueError_call_result_309912, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 414)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'len_ymd' (line 416)
        len_ymd_309913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 13), 'len_ymd')
        int_309914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 416, 24), 'int')
        # Applying the binary operator '==' (line 416)
        result_eq_309915 = python_operator(stypy.reporting.localization.Localization(__file__, 416, 13), '==', len_ymd_309913, int_309914)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'mstridx' (line 416)
        mstridx_309916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 30), 'mstridx')
        int_309917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 416, 41), 'int')
        # Applying the binary operator '!=' (line 416)
        result_ne_309918 = python_operator(stypy.reporting.localization.Localization(__file__, 416, 30), '!=', mstridx_309916, int_309917)
        
        
        # Getting the type of 'len_ymd' (line 416)
        len_ymd_309919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 48), 'len_ymd')
        int_309920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 416, 59), 'int')
        # Applying the binary operator '==' (line 416)
        result_eq_309921 = python_operator(stypy.reporting.localization.Localization(__file__, 416, 48), '==', len_ymd_309919, int_309920)
        
        # Applying the binary operator 'and' (line 416)
        result_and_keyword_309922 = python_operator(stypy.reporting.localization.Localization(__file__, 416, 30), 'and', result_ne_309918, result_eq_309921)
        
        # Applying the binary operator 'or' (line 416)
        result_or_keyword_309923 = python_operator(stypy.reporting.localization.Localization(__file__, 416, 13), 'or', result_eq_309915, result_and_keyword_309922)
        
        # Testing the type of an if condition (line 416)
        if_condition_309924 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 416, 13), result_or_keyword_309923)
        # Assigning a type to the variable 'if_condition_309924' (line 416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 416, 13), 'if_condition_309924', if_condition_309924)
        # SSA begins for if statement (line 416)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'mstridx' (line 418)
        mstridx_309925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 15), 'mstridx')
        int_309926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 26), 'int')
        # Applying the binary operator '!=' (line 418)
        result_ne_309927 = python_operator(stypy.reporting.localization.Localization(__file__, 418, 15), '!=', mstridx_309925, int_309926)
        
        # Testing the type of an if condition (line 418)
        if_condition_309928 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 418, 12), result_ne_309927)
        # Assigning a type to the variable 'if_condition_309928' (line 418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 418, 12), 'if_condition_309928', if_condition_309928)
        # SSA begins for if statement (line 418)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 419):
        
        # Assigning a Subscript to a Name (line 419):
        
        # Obtaining the type of the subscript
        # Getting the type of 'mstridx' (line 419)
        mstridx_309929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 29), 'mstridx')
        # Getting the type of 'self' (line 419)
        self_309930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 24), 'self')
        # Obtaining the member '__getitem__' of a type (line 419)
        getitem___309931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 419, 24), self_309930, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 419)
        subscript_call_result_309932 = invoke(stypy.reporting.localization.Localization(__file__, 419, 24), getitem___309931, mstridx_309929)
        
        # Assigning a type to the variable 'month' (line 419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 419, 16), 'month', subscript_call_result_309932)
        # Deleting a member
        # Getting the type of 'self' (line 420)
        self_309933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 20), 'self')
        
        # Obtaining the type of the subscript
        # Getting the type of 'mstridx' (line 420)
        mstridx_309934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 25), 'mstridx')
        # Getting the type of 'self' (line 420)
        self_309935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 20), 'self')
        # Obtaining the member '__getitem__' of a type (line 420)
        getitem___309936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 420, 20), self_309935, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 420)
        subscript_call_result_309937 = invoke(stypy.reporting.localization.Localization(__file__, 420, 20), getitem___309936, mstridx_309934)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 420, 16), self_309933, subscript_call_result_309937)
        # SSA join for if statement (line 418)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'len_ymd' (line 422)
        len_ymd_309938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 15), 'len_ymd')
        int_309939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 422, 25), 'int')
        # Applying the binary operator '>' (line 422)
        result_gt_309940 = python_operator(stypy.reporting.localization.Localization(__file__, 422, 15), '>', len_ymd_309938, int_309939)
        
        
        # Getting the type of 'mstridx' (line 422)
        mstridx_309941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 30), 'mstridx')
        int_309942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 422, 41), 'int')
        # Applying the binary operator '==' (line 422)
        result_eq_309943 = python_operator(stypy.reporting.localization.Localization(__file__, 422, 30), '==', mstridx_309941, int_309942)
        
        # Applying the binary operator 'or' (line 422)
        result_or_keyword_309944 = python_operator(stypy.reporting.localization.Localization(__file__, 422, 15), 'or', result_gt_309940, result_eq_309943)
        
        # Testing the type of an if condition (line 422)
        if_condition_309945 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 422, 12), result_or_keyword_309944)
        # Assigning a type to the variable 'if_condition_309945' (line 422)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 422, 12), 'if_condition_309945', if_condition_309945)
        # SSA begins for if statement (line 422)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Obtaining the type of the subscript
        int_309946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 423, 24), 'int')
        # Getting the type of 'self' (line 423)
        self_309947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 19), 'self')
        # Obtaining the member '__getitem__' of a type (line 423)
        getitem___309948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 423, 19), self_309947, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 423)
        subscript_call_result_309949 = invoke(stypy.reporting.localization.Localization(__file__, 423, 19), getitem___309948, int_309946)
        
        int_309950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 423, 29), 'int')
        # Applying the binary operator '>' (line 423)
        result_gt_309951 = python_operator(stypy.reporting.localization.Localization(__file__, 423, 19), '>', subscript_call_result_309949, int_309950)
        
        # Testing the type of an if condition (line 423)
        if_condition_309952 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 423, 16), result_gt_309951)
        # Assigning a type to the variable 'if_condition_309952' (line 423)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 423, 16), 'if_condition_309952', if_condition_309952)
        # SSA begins for if statement (line 423)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 424):
        
        # Assigning a Subscript to a Name (line 424):
        
        # Obtaining the type of the subscript
        int_309953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 424, 32), 'int')
        # Getting the type of 'self' (line 424)
        self_309954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 27), 'self')
        # Obtaining the member '__getitem__' of a type (line 424)
        getitem___309955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 424, 27), self_309954, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 424)
        subscript_call_result_309956 = invoke(stypy.reporting.localization.Localization(__file__, 424, 27), getitem___309955, int_309953)
        
        # Assigning a type to the variable 'year' (line 424)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 424, 20), 'year', subscript_call_result_309956)
        # SSA branch for the else part of an if statement (line 423)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Subscript to a Name (line 426):
        
        # Assigning a Subscript to a Name (line 426):
        
        # Obtaining the type of the subscript
        int_309957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 31), 'int')
        # Getting the type of 'self' (line 426)
        self_309958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 26), 'self')
        # Obtaining the member '__getitem__' of a type (line 426)
        getitem___309959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 26), self_309958, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 426)
        subscript_call_result_309960 = invoke(stypy.reporting.localization.Localization(__file__, 426, 26), getitem___309959, int_309957)
        
        # Assigning a type to the variable 'day' (line 426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 20), 'day', subscript_call_result_309960)
        # SSA join for if statement (line 423)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 422)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 416)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'len_ymd' (line 428)
        len_ymd_309961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 13), 'len_ymd')
        int_309962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 428, 24), 'int')
        # Applying the binary operator '==' (line 428)
        result_eq_309963 = python_operator(stypy.reporting.localization.Localization(__file__, 428, 13), '==', len_ymd_309961, int_309962)
        
        # Testing the type of an if condition (line 428)
        if_condition_309964 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 428, 13), result_eq_309963)
        # Assigning a type to the variable 'if_condition_309964' (line 428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 13), 'if_condition_309964', if_condition_309964)
        # SSA begins for if statement (line 428)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Obtaining the type of the subscript
        int_309965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 430, 20), 'int')
        # Getting the type of 'self' (line 430)
        self_309966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 15), 'self')
        # Obtaining the member '__getitem__' of a type (line 430)
        getitem___309967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 430, 15), self_309966, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 430)
        subscript_call_result_309968 = invoke(stypy.reporting.localization.Localization(__file__, 430, 15), getitem___309967, int_309965)
        
        int_309969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 430, 25), 'int')
        # Applying the binary operator '>' (line 430)
        result_gt_309970 = python_operator(stypy.reporting.localization.Localization(__file__, 430, 15), '>', subscript_call_result_309968, int_309969)
        
        # Testing the type of an if condition (line 430)
        if_condition_309971 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 430, 12), result_gt_309970)
        # Assigning a type to the variable 'if_condition_309971' (line 430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 430, 12), 'if_condition_309971', if_condition_309971)
        # SSA begins for if statement (line 430)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 432):
        
        # Assigning a Subscript to a Name (line 432):
        
        # Obtaining the type of the subscript
        int_309972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 432, 16), 'int')
        # Getting the type of 'self' (line 432)
        self_309973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 30), 'self')
        # Obtaining the member '__getitem__' of a type (line 432)
        getitem___309974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 432, 16), self_309973, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 432)
        subscript_call_result_309975 = invoke(stypy.reporting.localization.Localization(__file__, 432, 16), getitem___309974, int_309972)
        
        # Assigning a type to the variable 'tuple_var_assignment_308861' (line 432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 16), 'tuple_var_assignment_308861', subscript_call_result_309975)
        
        # Assigning a Subscript to a Name (line 432):
        
        # Obtaining the type of the subscript
        int_309976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 432, 16), 'int')
        # Getting the type of 'self' (line 432)
        self_309977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 30), 'self')
        # Obtaining the member '__getitem__' of a type (line 432)
        getitem___309978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 432, 16), self_309977, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 432)
        subscript_call_result_309979 = invoke(stypy.reporting.localization.Localization(__file__, 432, 16), getitem___309978, int_309976)
        
        # Assigning a type to the variable 'tuple_var_assignment_308862' (line 432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 16), 'tuple_var_assignment_308862', subscript_call_result_309979)
        
        # Assigning a Name to a Name (line 432):
        # Getting the type of 'tuple_var_assignment_308861' (line 432)
        tuple_var_assignment_308861_309980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 16), 'tuple_var_assignment_308861')
        # Assigning a type to the variable 'year' (line 432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 16), 'year', tuple_var_assignment_308861_309980)
        
        # Assigning a Name to a Name (line 432):
        # Getting the type of 'tuple_var_assignment_308862' (line 432)
        tuple_var_assignment_308862_309981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 16), 'tuple_var_assignment_308862')
        # Assigning a type to the variable 'month' (line 432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 22), 'month', tuple_var_assignment_308862_309981)
        # SSA branch for the else part of an if statement (line 430)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Obtaining the type of the subscript
        int_309982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 433, 22), 'int')
        # Getting the type of 'self' (line 433)
        self_309983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 17), 'self')
        # Obtaining the member '__getitem__' of a type (line 433)
        getitem___309984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 17), self_309983, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 433)
        subscript_call_result_309985 = invoke(stypy.reporting.localization.Localization(__file__, 433, 17), getitem___309984, int_309982)
        
        int_309986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 433, 27), 'int')
        # Applying the binary operator '>' (line 433)
        result_gt_309987 = python_operator(stypy.reporting.localization.Localization(__file__, 433, 17), '>', subscript_call_result_309985, int_309986)
        
        # Testing the type of an if condition (line 433)
        if_condition_309988 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 433, 17), result_gt_309987)
        # Assigning a type to the variable 'if_condition_309988' (line 433)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 433, 17), 'if_condition_309988', if_condition_309988)
        # SSA begins for if statement (line 433)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 435):
        
        # Assigning a Subscript to a Name (line 435):
        
        # Obtaining the type of the subscript
        int_309989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 435, 16), 'int')
        # Getting the type of 'self' (line 435)
        self_309990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 30), 'self')
        # Obtaining the member '__getitem__' of a type (line 435)
        getitem___309991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 16), self_309990, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 435)
        subscript_call_result_309992 = invoke(stypy.reporting.localization.Localization(__file__, 435, 16), getitem___309991, int_309989)
        
        # Assigning a type to the variable 'tuple_var_assignment_308863' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 16), 'tuple_var_assignment_308863', subscript_call_result_309992)
        
        # Assigning a Subscript to a Name (line 435):
        
        # Obtaining the type of the subscript
        int_309993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 435, 16), 'int')
        # Getting the type of 'self' (line 435)
        self_309994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 30), 'self')
        # Obtaining the member '__getitem__' of a type (line 435)
        getitem___309995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 16), self_309994, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 435)
        subscript_call_result_309996 = invoke(stypy.reporting.localization.Localization(__file__, 435, 16), getitem___309995, int_309993)
        
        # Assigning a type to the variable 'tuple_var_assignment_308864' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 16), 'tuple_var_assignment_308864', subscript_call_result_309996)
        
        # Assigning a Name to a Name (line 435):
        # Getting the type of 'tuple_var_assignment_308863' (line 435)
        tuple_var_assignment_308863_309997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 16), 'tuple_var_assignment_308863')
        # Assigning a type to the variable 'month' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 16), 'month', tuple_var_assignment_308863_309997)
        
        # Assigning a Name to a Name (line 435):
        # Getting the type of 'tuple_var_assignment_308864' (line 435)
        tuple_var_assignment_308864_309998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 16), 'tuple_var_assignment_308864')
        # Assigning a type to the variable 'year' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 23), 'year', tuple_var_assignment_308864_309998)
        # SSA branch for the else part of an if statement (line 433)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        # Getting the type of 'dayfirst' (line 436)
        dayfirst_309999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 17), 'dayfirst')
        
        
        # Obtaining the type of the subscript
        int_310000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 436, 35), 'int')
        # Getting the type of 'self' (line 436)
        self_310001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 30), 'self')
        # Obtaining the member '__getitem__' of a type (line 436)
        getitem___310002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 436, 30), self_310001, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 436)
        subscript_call_result_310003 = invoke(stypy.reporting.localization.Localization(__file__, 436, 30), getitem___310002, int_310000)
        
        int_310004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 436, 41), 'int')
        # Applying the binary operator '<=' (line 436)
        result_le_310005 = python_operator(stypy.reporting.localization.Localization(__file__, 436, 30), '<=', subscript_call_result_310003, int_310004)
        
        # Applying the binary operator 'and' (line 436)
        result_and_keyword_310006 = python_operator(stypy.reporting.localization.Localization(__file__, 436, 17), 'and', dayfirst_309999, result_le_310005)
        
        # Testing the type of an if condition (line 436)
        if_condition_310007 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 436, 17), result_and_keyword_310006)
        # Assigning a type to the variable 'if_condition_310007' (line 436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 436, 17), 'if_condition_310007', if_condition_310007)
        # SSA begins for if statement (line 436)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 438):
        
        # Assigning a Subscript to a Name (line 438):
        
        # Obtaining the type of the subscript
        int_310008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 438, 16), 'int')
        # Getting the type of 'self' (line 438)
        self_310009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 29), 'self')
        # Obtaining the member '__getitem__' of a type (line 438)
        getitem___310010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 438, 16), self_310009, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 438)
        subscript_call_result_310011 = invoke(stypy.reporting.localization.Localization(__file__, 438, 16), getitem___310010, int_310008)
        
        # Assigning a type to the variable 'tuple_var_assignment_308865' (line 438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 438, 16), 'tuple_var_assignment_308865', subscript_call_result_310011)
        
        # Assigning a Subscript to a Name (line 438):
        
        # Obtaining the type of the subscript
        int_310012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 438, 16), 'int')
        # Getting the type of 'self' (line 438)
        self_310013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 29), 'self')
        # Obtaining the member '__getitem__' of a type (line 438)
        getitem___310014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 438, 16), self_310013, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 438)
        subscript_call_result_310015 = invoke(stypy.reporting.localization.Localization(__file__, 438, 16), getitem___310014, int_310012)
        
        # Assigning a type to the variable 'tuple_var_assignment_308866' (line 438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 438, 16), 'tuple_var_assignment_308866', subscript_call_result_310015)
        
        # Assigning a Name to a Name (line 438):
        # Getting the type of 'tuple_var_assignment_308865' (line 438)
        tuple_var_assignment_308865_310016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 16), 'tuple_var_assignment_308865')
        # Assigning a type to the variable 'day' (line 438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 438, 16), 'day', tuple_var_assignment_308865_310016)
        
        # Assigning a Name to a Name (line 438):
        # Getting the type of 'tuple_var_assignment_308866' (line 438)
        tuple_var_assignment_308866_310017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 16), 'tuple_var_assignment_308866')
        # Assigning a type to the variable 'month' (line 438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 438, 21), 'month', tuple_var_assignment_308866_310017)
        # SSA branch for the else part of an if statement (line 436)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Tuple (line 441):
        
        # Assigning a Subscript to a Name (line 441):
        
        # Obtaining the type of the subscript
        int_310018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 441, 16), 'int')
        # Getting the type of 'self' (line 441)
        self_310019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 29), 'self')
        # Obtaining the member '__getitem__' of a type (line 441)
        getitem___310020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 441, 16), self_310019, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 441)
        subscript_call_result_310021 = invoke(stypy.reporting.localization.Localization(__file__, 441, 16), getitem___310020, int_310018)
        
        # Assigning a type to the variable 'tuple_var_assignment_308867' (line 441)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 441, 16), 'tuple_var_assignment_308867', subscript_call_result_310021)
        
        # Assigning a Subscript to a Name (line 441):
        
        # Obtaining the type of the subscript
        int_310022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 441, 16), 'int')
        # Getting the type of 'self' (line 441)
        self_310023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 29), 'self')
        # Obtaining the member '__getitem__' of a type (line 441)
        getitem___310024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 441, 16), self_310023, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 441)
        subscript_call_result_310025 = invoke(stypy.reporting.localization.Localization(__file__, 441, 16), getitem___310024, int_310022)
        
        # Assigning a type to the variable 'tuple_var_assignment_308868' (line 441)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 441, 16), 'tuple_var_assignment_308868', subscript_call_result_310025)
        
        # Assigning a Name to a Name (line 441):
        # Getting the type of 'tuple_var_assignment_308867' (line 441)
        tuple_var_assignment_308867_310026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 16), 'tuple_var_assignment_308867')
        # Assigning a type to the variable 'month' (line 441)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 441, 16), 'month', tuple_var_assignment_308867_310026)
        
        # Assigning a Name to a Name (line 441):
        # Getting the type of 'tuple_var_assignment_308868' (line 441)
        tuple_var_assignment_308868_310027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 16), 'tuple_var_assignment_308868')
        # Assigning a type to the variable 'day' (line 441)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 441, 23), 'day', tuple_var_assignment_308868_310027)
        # SSA join for if statement (line 436)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 433)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 430)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 428)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'len_ymd' (line 443)
        len_ymd_310028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 13), 'len_ymd')
        int_310029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 443, 24), 'int')
        # Applying the binary operator '==' (line 443)
        result_eq_310030 = python_operator(stypy.reporting.localization.Localization(__file__, 443, 13), '==', len_ymd_310028, int_310029)
        
        # Testing the type of an if condition (line 443)
        if_condition_310031 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 443, 13), result_eq_310030)
        # Assigning a type to the variable 'if_condition_310031' (line 443)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 443, 13), 'if_condition_310031', if_condition_310031)
        # SSA begins for if statement (line 443)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'mstridx' (line 445)
        mstridx_310032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 15), 'mstridx')
        int_310033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 445, 26), 'int')
        # Applying the binary operator '==' (line 445)
        result_eq_310034 = python_operator(stypy.reporting.localization.Localization(__file__, 445, 15), '==', mstridx_310032, int_310033)
        
        # Testing the type of an if condition (line 445)
        if_condition_310035 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 445, 12), result_eq_310034)
        # Assigning a type to the variable 'if_condition_310035' (line 445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 445, 12), 'if_condition_310035', if_condition_310035)
        # SSA begins for if statement (line 445)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 446):
        
        # Assigning a Subscript to a Name (line 446):
        
        # Obtaining the type of the subscript
        int_310036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 446, 16), 'int')
        # Getting the type of 'self' (line 446)
        self_310037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 35), 'self')
        # Obtaining the member '__getitem__' of a type (line 446)
        getitem___310038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 16), self_310037, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 446)
        subscript_call_result_310039 = invoke(stypy.reporting.localization.Localization(__file__, 446, 16), getitem___310038, int_310036)
        
        # Assigning a type to the variable 'tuple_var_assignment_308869' (line 446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 16), 'tuple_var_assignment_308869', subscript_call_result_310039)
        
        # Assigning a Subscript to a Name (line 446):
        
        # Obtaining the type of the subscript
        int_310040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 446, 16), 'int')
        # Getting the type of 'self' (line 446)
        self_310041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 35), 'self')
        # Obtaining the member '__getitem__' of a type (line 446)
        getitem___310042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 16), self_310041, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 446)
        subscript_call_result_310043 = invoke(stypy.reporting.localization.Localization(__file__, 446, 16), getitem___310042, int_310040)
        
        # Assigning a type to the variable 'tuple_var_assignment_308870' (line 446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 16), 'tuple_var_assignment_308870', subscript_call_result_310043)
        
        # Assigning a Subscript to a Name (line 446):
        
        # Obtaining the type of the subscript
        int_310044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 446, 16), 'int')
        # Getting the type of 'self' (line 446)
        self_310045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 35), 'self')
        # Obtaining the member '__getitem__' of a type (line 446)
        getitem___310046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 16), self_310045, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 446)
        subscript_call_result_310047 = invoke(stypy.reporting.localization.Localization(__file__, 446, 16), getitem___310046, int_310044)
        
        # Assigning a type to the variable 'tuple_var_assignment_308871' (line 446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 16), 'tuple_var_assignment_308871', subscript_call_result_310047)
        
        # Assigning a Name to a Name (line 446):
        # Getting the type of 'tuple_var_assignment_308869' (line 446)
        tuple_var_assignment_308869_310048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 16), 'tuple_var_assignment_308869')
        # Assigning a type to the variable 'month' (line 446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 16), 'month', tuple_var_assignment_308869_310048)
        
        # Assigning a Name to a Name (line 446):
        # Getting the type of 'tuple_var_assignment_308870' (line 446)
        tuple_var_assignment_308870_310049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 16), 'tuple_var_assignment_308870')
        # Assigning a type to the variable 'day' (line 446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 23), 'day', tuple_var_assignment_308870_310049)
        
        # Assigning a Name to a Name (line 446):
        # Getting the type of 'tuple_var_assignment_308871' (line 446)
        tuple_var_assignment_308871_310050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 16), 'tuple_var_assignment_308871')
        # Assigning a type to the variable 'year' (line 446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 28), 'year', tuple_var_assignment_308871_310050)
        # SSA branch for the else part of an if statement (line 445)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'mstridx' (line 447)
        mstridx_310051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 17), 'mstridx')
        int_310052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 447, 28), 'int')
        # Applying the binary operator '==' (line 447)
        result_eq_310053 = python_operator(stypy.reporting.localization.Localization(__file__, 447, 17), '==', mstridx_310051, int_310052)
        
        # Testing the type of an if condition (line 447)
        if_condition_310054 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 447, 17), result_eq_310053)
        # Assigning a type to the variable 'if_condition_310054' (line 447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 17), 'if_condition_310054', if_condition_310054)
        # SSA begins for if statement (line 447)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        
        
        # Obtaining the type of the subscript
        int_310055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 448, 24), 'int')
        # Getting the type of 'self' (line 448)
        self_310056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 19), 'self')
        # Obtaining the member '__getitem__' of a type (line 448)
        getitem___310057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 448, 19), self_310056, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 448)
        subscript_call_result_310058 = invoke(stypy.reporting.localization.Localization(__file__, 448, 19), getitem___310057, int_310055)
        
        int_310059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 448, 29), 'int')
        # Applying the binary operator '>' (line 448)
        result_gt_310060 = python_operator(stypy.reporting.localization.Localization(__file__, 448, 19), '>', subscript_call_result_310058, int_310059)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'yearfirst' (line 448)
        yearfirst_310061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 36), 'yearfirst')
        
        
        # Obtaining the type of the subscript
        int_310062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 448, 55), 'int')
        # Getting the type of 'self' (line 448)
        self_310063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 50), 'self')
        # Obtaining the member '__getitem__' of a type (line 448)
        getitem___310064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 448, 50), self_310063, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 448)
        subscript_call_result_310065 = invoke(stypy.reporting.localization.Localization(__file__, 448, 50), getitem___310064, int_310062)
        
        int_310066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 448, 61), 'int')
        # Applying the binary operator '<=' (line 448)
        result_le_310067 = python_operator(stypy.reporting.localization.Localization(__file__, 448, 50), '<=', subscript_call_result_310065, int_310066)
        
        # Applying the binary operator 'and' (line 448)
        result_and_keyword_310068 = python_operator(stypy.reporting.localization.Localization(__file__, 448, 36), 'and', yearfirst_310061, result_le_310067)
        
        # Applying the binary operator 'or' (line 448)
        result_or_keyword_310069 = python_operator(stypy.reporting.localization.Localization(__file__, 448, 19), 'or', result_gt_310060, result_and_keyword_310068)
        
        # Testing the type of an if condition (line 448)
        if_condition_310070 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 448, 16), result_or_keyword_310069)
        # Assigning a type to the variable 'if_condition_310070' (line 448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 448, 16), 'if_condition_310070', if_condition_310070)
        # SSA begins for if statement (line 448)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 450):
        
        # Assigning a Subscript to a Name (line 450):
        
        # Obtaining the type of the subscript
        int_310071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 450, 20), 'int')
        # Getting the type of 'self' (line 450)
        self_310072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 39), 'self')
        # Obtaining the member '__getitem__' of a type (line 450)
        getitem___310073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 450, 20), self_310072, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 450)
        subscript_call_result_310074 = invoke(stypy.reporting.localization.Localization(__file__, 450, 20), getitem___310073, int_310071)
        
        # Assigning a type to the variable 'tuple_var_assignment_308872' (line 450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 450, 20), 'tuple_var_assignment_308872', subscript_call_result_310074)
        
        # Assigning a Subscript to a Name (line 450):
        
        # Obtaining the type of the subscript
        int_310075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 450, 20), 'int')
        # Getting the type of 'self' (line 450)
        self_310076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 39), 'self')
        # Obtaining the member '__getitem__' of a type (line 450)
        getitem___310077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 450, 20), self_310076, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 450)
        subscript_call_result_310078 = invoke(stypy.reporting.localization.Localization(__file__, 450, 20), getitem___310077, int_310075)
        
        # Assigning a type to the variable 'tuple_var_assignment_308873' (line 450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 450, 20), 'tuple_var_assignment_308873', subscript_call_result_310078)
        
        # Assigning a Subscript to a Name (line 450):
        
        # Obtaining the type of the subscript
        int_310079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 450, 20), 'int')
        # Getting the type of 'self' (line 450)
        self_310080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 39), 'self')
        # Obtaining the member '__getitem__' of a type (line 450)
        getitem___310081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 450, 20), self_310080, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 450)
        subscript_call_result_310082 = invoke(stypy.reporting.localization.Localization(__file__, 450, 20), getitem___310081, int_310079)
        
        # Assigning a type to the variable 'tuple_var_assignment_308874' (line 450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 450, 20), 'tuple_var_assignment_308874', subscript_call_result_310082)
        
        # Assigning a Name to a Name (line 450):
        # Getting the type of 'tuple_var_assignment_308872' (line 450)
        tuple_var_assignment_308872_310083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 20), 'tuple_var_assignment_308872')
        # Assigning a type to the variable 'year' (line 450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 450, 20), 'year', tuple_var_assignment_308872_310083)
        
        # Assigning a Name to a Name (line 450):
        # Getting the type of 'tuple_var_assignment_308873' (line 450)
        tuple_var_assignment_308873_310084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 20), 'tuple_var_assignment_308873')
        # Assigning a type to the variable 'month' (line 450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 450, 26), 'month', tuple_var_assignment_308873_310084)
        
        # Assigning a Name to a Name (line 450):
        # Getting the type of 'tuple_var_assignment_308874' (line 450)
        tuple_var_assignment_308874_310085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 20), 'tuple_var_assignment_308874')
        # Assigning a type to the variable 'day' (line 450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 450, 33), 'day', tuple_var_assignment_308874_310085)
        # SSA branch for the else part of an if statement (line 448)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Tuple (line 455):
        
        # Assigning a Subscript to a Name (line 455):
        
        # Obtaining the type of the subscript
        int_310086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 455, 20), 'int')
        # Getting the type of 'self' (line 455)
        self_310087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 39), 'self')
        # Obtaining the member '__getitem__' of a type (line 455)
        getitem___310088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 455, 20), self_310087, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 455)
        subscript_call_result_310089 = invoke(stypy.reporting.localization.Localization(__file__, 455, 20), getitem___310088, int_310086)
        
        # Assigning a type to the variable 'tuple_var_assignment_308875' (line 455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 20), 'tuple_var_assignment_308875', subscript_call_result_310089)
        
        # Assigning a Subscript to a Name (line 455):
        
        # Obtaining the type of the subscript
        int_310090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 455, 20), 'int')
        # Getting the type of 'self' (line 455)
        self_310091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 39), 'self')
        # Obtaining the member '__getitem__' of a type (line 455)
        getitem___310092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 455, 20), self_310091, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 455)
        subscript_call_result_310093 = invoke(stypy.reporting.localization.Localization(__file__, 455, 20), getitem___310092, int_310090)
        
        # Assigning a type to the variable 'tuple_var_assignment_308876' (line 455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 20), 'tuple_var_assignment_308876', subscript_call_result_310093)
        
        # Assigning a Subscript to a Name (line 455):
        
        # Obtaining the type of the subscript
        int_310094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 455, 20), 'int')
        # Getting the type of 'self' (line 455)
        self_310095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 39), 'self')
        # Obtaining the member '__getitem__' of a type (line 455)
        getitem___310096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 455, 20), self_310095, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 455)
        subscript_call_result_310097 = invoke(stypy.reporting.localization.Localization(__file__, 455, 20), getitem___310096, int_310094)
        
        # Assigning a type to the variable 'tuple_var_assignment_308877' (line 455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 20), 'tuple_var_assignment_308877', subscript_call_result_310097)
        
        # Assigning a Name to a Name (line 455):
        # Getting the type of 'tuple_var_assignment_308875' (line 455)
        tuple_var_assignment_308875_310098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 20), 'tuple_var_assignment_308875')
        # Assigning a type to the variable 'day' (line 455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 20), 'day', tuple_var_assignment_308875_310098)
        
        # Assigning a Name to a Name (line 455):
        # Getting the type of 'tuple_var_assignment_308876' (line 455)
        tuple_var_assignment_308876_310099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 20), 'tuple_var_assignment_308876')
        # Assigning a type to the variable 'month' (line 455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 25), 'month', tuple_var_assignment_308876_310099)
        
        # Assigning a Name to a Name (line 455):
        # Getting the type of 'tuple_var_assignment_308877' (line 455)
        tuple_var_assignment_308877_310100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 20), 'tuple_var_assignment_308877')
        # Assigning a type to the variable 'year' (line 455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 32), 'year', tuple_var_assignment_308877_310100)
        # SSA join for if statement (line 448)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 447)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'mstridx' (line 457)
        mstridx_310101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 17), 'mstridx')
        int_310102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 457, 28), 'int')
        # Applying the binary operator '==' (line 457)
        result_eq_310103 = python_operator(stypy.reporting.localization.Localization(__file__, 457, 17), '==', mstridx_310101, int_310102)
        
        # Testing the type of an if condition (line 457)
        if_condition_310104 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 457, 17), result_eq_310103)
        # Assigning a type to the variable 'if_condition_310104' (line 457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 457, 17), 'if_condition_310104', if_condition_310104)
        # SSA begins for if statement (line 457)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Obtaining the type of the subscript
        int_310105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 459, 24), 'int')
        # Getting the type of 'self' (line 459)
        self_310106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 19), 'self')
        # Obtaining the member '__getitem__' of a type (line 459)
        getitem___310107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 459, 19), self_310106, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 459)
        subscript_call_result_310108 = invoke(stypy.reporting.localization.Localization(__file__, 459, 19), getitem___310107, int_310105)
        
        int_310109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 459, 29), 'int')
        # Applying the binary operator '>' (line 459)
        result_gt_310110 = python_operator(stypy.reporting.localization.Localization(__file__, 459, 19), '>', subscript_call_result_310108, int_310109)
        
        # Testing the type of an if condition (line 459)
        if_condition_310111 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 459, 16), result_gt_310110)
        # Assigning a type to the variable 'if_condition_310111' (line 459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 459, 16), 'if_condition_310111', if_condition_310111)
        # SSA begins for if statement (line 459)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 461):
        
        # Assigning a Subscript to a Name (line 461):
        
        # Obtaining the type of the subscript
        int_310112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 461, 20), 'int')
        # Getting the type of 'self' (line 461)
        self_310113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 39), 'self')
        # Obtaining the member '__getitem__' of a type (line 461)
        getitem___310114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 461, 20), self_310113, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 461)
        subscript_call_result_310115 = invoke(stypy.reporting.localization.Localization(__file__, 461, 20), getitem___310114, int_310112)
        
        # Assigning a type to the variable 'tuple_var_assignment_308878' (line 461)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 461, 20), 'tuple_var_assignment_308878', subscript_call_result_310115)
        
        # Assigning a Subscript to a Name (line 461):
        
        # Obtaining the type of the subscript
        int_310116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 461, 20), 'int')
        # Getting the type of 'self' (line 461)
        self_310117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 39), 'self')
        # Obtaining the member '__getitem__' of a type (line 461)
        getitem___310118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 461, 20), self_310117, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 461)
        subscript_call_result_310119 = invoke(stypy.reporting.localization.Localization(__file__, 461, 20), getitem___310118, int_310116)
        
        # Assigning a type to the variable 'tuple_var_assignment_308879' (line 461)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 461, 20), 'tuple_var_assignment_308879', subscript_call_result_310119)
        
        # Assigning a Subscript to a Name (line 461):
        
        # Obtaining the type of the subscript
        int_310120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 461, 20), 'int')
        # Getting the type of 'self' (line 461)
        self_310121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 39), 'self')
        # Obtaining the member '__getitem__' of a type (line 461)
        getitem___310122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 461, 20), self_310121, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 461)
        subscript_call_result_310123 = invoke(stypy.reporting.localization.Localization(__file__, 461, 20), getitem___310122, int_310120)
        
        # Assigning a type to the variable 'tuple_var_assignment_308880' (line 461)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 461, 20), 'tuple_var_assignment_308880', subscript_call_result_310123)
        
        # Assigning a Name to a Name (line 461):
        # Getting the type of 'tuple_var_assignment_308878' (line 461)
        tuple_var_assignment_308878_310124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 20), 'tuple_var_assignment_308878')
        # Assigning a type to the variable 'day' (line 461)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 461, 20), 'day', tuple_var_assignment_308878_310124)
        
        # Assigning a Name to a Name (line 461):
        # Getting the type of 'tuple_var_assignment_308879' (line 461)
        tuple_var_assignment_308879_310125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 20), 'tuple_var_assignment_308879')
        # Assigning a type to the variable 'year' (line 461)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 461, 25), 'year', tuple_var_assignment_308879_310125)
        
        # Assigning a Name to a Name (line 461):
        # Getting the type of 'tuple_var_assignment_308880' (line 461)
        tuple_var_assignment_308880_310126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 20), 'tuple_var_assignment_308880')
        # Assigning a type to the variable 'month' (line 461)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 461, 31), 'month', tuple_var_assignment_308880_310126)
        # SSA branch for the else part of an if statement (line 459)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Tuple (line 464):
        
        # Assigning a Subscript to a Name (line 464):
        
        # Obtaining the type of the subscript
        int_310127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 20), 'int')
        # Getting the type of 'self' (line 464)
        self_310128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 39), 'self')
        # Obtaining the member '__getitem__' of a type (line 464)
        getitem___310129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 20), self_310128, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 464)
        subscript_call_result_310130 = invoke(stypy.reporting.localization.Localization(__file__, 464, 20), getitem___310129, int_310127)
        
        # Assigning a type to the variable 'tuple_var_assignment_308881' (line 464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 20), 'tuple_var_assignment_308881', subscript_call_result_310130)
        
        # Assigning a Subscript to a Name (line 464):
        
        # Obtaining the type of the subscript
        int_310131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 20), 'int')
        # Getting the type of 'self' (line 464)
        self_310132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 39), 'self')
        # Obtaining the member '__getitem__' of a type (line 464)
        getitem___310133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 20), self_310132, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 464)
        subscript_call_result_310134 = invoke(stypy.reporting.localization.Localization(__file__, 464, 20), getitem___310133, int_310131)
        
        # Assigning a type to the variable 'tuple_var_assignment_308882' (line 464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 20), 'tuple_var_assignment_308882', subscript_call_result_310134)
        
        # Assigning a Subscript to a Name (line 464):
        
        # Obtaining the type of the subscript
        int_310135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 20), 'int')
        # Getting the type of 'self' (line 464)
        self_310136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 39), 'self')
        # Obtaining the member '__getitem__' of a type (line 464)
        getitem___310137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 20), self_310136, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 464)
        subscript_call_result_310138 = invoke(stypy.reporting.localization.Localization(__file__, 464, 20), getitem___310137, int_310135)
        
        # Assigning a type to the variable 'tuple_var_assignment_308883' (line 464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 20), 'tuple_var_assignment_308883', subscript_call_result_310138)
        
        # Assigning a Name to a Name (line 464):
        # Getting the type of 'tuple_var_assignment_308881' (line 464)
        tuple_var_assignment_308881_310139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 20), 'tuple_var_assignment_308881')
        # Assigning a type to the variable 'year' (line 464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 20), 'year', tuple_var_assignment_308881_310139)
        
        # Assigning a Name to a Name (line 464):
        # Getting the type of 'tuple_var_assignment_308882' (line 464)
        tuple_var_assignment_308882_310140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 20), 'tuple_var_assignment_308882')
        # Assigning a type to the variable 'day' (line 464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 26), 'day', tuple_var_assignment_308882_310140)
        
        # Assigning a Name to a Name (line 464):
        # Getting the type of 'tuple_var_assignment_308883' (line 464)
        tuple_var_assignment_308883_310141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 20), 'tuple_var_assignment_308883')
        # Assigning a type to the variable 'month' (line 464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 31), 'month', tuple_var_assignment_308883_310141)
        # SSA join for if statement (line 459)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 457)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        
        # Obtaining the type of the subscript
        int_310142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 467, 24), 'int')
        # Getting the type of 'self' (line 467)
        self_310143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 19), 'self')
        # Obtaining the member '__getitem__' of a type (line 467)
        getitem___310144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 467, 19), self_310143, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 467)
        subscript_call_result_310145 = invoke(stypy.reporting.localization.Localization(__file__, 467, 19), getitem___310144, int_310142)
        
        int_310146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 467, 29), 'int')
        # Applying the binary operator '>' (line 467)
        result_gt_310147 = python_operator(stypy.reporting.localization.Localization(__file__, 467, 19), '>', subscript_call_result_310145, int_310146)
        
        
        
        # Call to find_probable_year_index(...): (line 468)
        # Processing the call arguments (line 468)
        
        # Call to split(...): (line 468)
        # Processing the call arguments (line 468)
        # Getting the type of 'self' (line 468)
        self_310152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 65), 'self', False)
        # Obtaining the member 'tzstr' of a type (line 468)
        tzstr_310153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 65), self_310152, 'tzstr')
        # Processing the call keyword arguments (line 468)
        kwargs_310154 = {}
        # Getting the type of '_timelex' (line 468)
        _timelex_310150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 50), '_timelex', False)
        # Obtaining the member 'split' of a type (line 468)
        split_310151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 50), _timelex_310150, 'split')
        # Calling split(args, kwargs) (line 468)
        split_call_result_310155 = invoke(stypy.reporting.localization.Localization(__file__, 468, 50), split_310151, *[tzstr_310153], **kwargs_310154)
        
        # Processing the call keyword arguments (line 468)
        kwargs_310156 = {}
        # Getting the type of 'self' (line 468)
        self_310148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 20), 'self', False)
        # Obtaining the member 'find_probable_year_index' of a type (line 468)
        find_probable_year_index_310149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 20), self_310148, 'find_probable_year_index')
        # Calling find_probable_year_index(args, kwargs) (line 468)
        find_probable_year_index_call_result_310157 = invoke(stypy.reporting.localization.Localization(__file__, 468, 20), find_probable_year_index_310149, *[split_call_result_310155], **kwargs_310156)
        
        int_310158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 468, 81), 'int')
        # Applying the binary operator '==' (line 468)
        result_eq_310159 = python_operator(stypy.reporting.localization.Localization(__file__, 468, 20), '==', find_probable_year_index_call_result_310157, int_310158)
        
        # Applying the binary operator 'or' (line 467)
        result_or_keyword_310160 = python_operator(stypy.reporting.localization.Localization(__file__, 467, 19), 'or', result_gt_310147, result_eq_310159)
        
        # Evaluating a boolean operation
        # Getting the type of 'yearfirst' (line 469)
        yearfirst_310161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 20), 'yearfirst')
        
        
        # Obtaining the type of the subscript
        int_310162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 469, 39), 'int')
        # Getting the type of 'self' (line 469)
        self_310163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 34), 'self')
        # Obtaining the member '__getitem__' of a type (line 469)
        getitem___310164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 469, 34), self_310163, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 469)
        subscript_call_result_310165 = invoke(stypy.reporting.localization.Localization(__file__, 469, 34), getitem___310164, int_310162)
        
        int_310166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 469, 45), 'int')
        # Applying the binary operator '<=' (line 469)
        result_le_310167 = python_operator(stypy.reporting.localization.Localization(__file__, 469, 34), '<=', subscript_call_result_310165, int_310166)
        
        # Applying the binary operator 'and' (line 469)
        result_and_keyword_310168 = python_operator(stypy.reporting.localization.Localization(__file__, 469, 20), 'and', yearfirst_310161, result_le_310167)
        
        
        # Obtaining the type of the subscript
        int_310169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 469, 57), 'int')
        # Getting the type of 'self' (line 469)
        self_310170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 52), 'self')
        # Obtaining the member '__getitem__' of a type (line 469)
        getitem___310171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 469, 52), self_310170, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 469)
        subscript_call_result_310172 = invoke(stypy.reporting.localization.Localization(__file__, 469, 52), getitem___310171, int_310169)
        
        int_310173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 469, 63), 'int')
        # Applying the binary operator '<=' (line 469)
        result_le_310174 = python_operator(stypy.reporting.localization.Localization(__file__, 469, 52), '<=', subscript_call_result_310172, int_310173)
        
        # Applying the binary operator 'and' (line 469)
        result_and_keyword_310175 = python_operator(stypy.reporting.localization.Localization(__file__, 469, 20), 'and', result_and_keyword_310168, result_le_310174)
        
        # Applying the binary operator 'or' (line 467)
        result_or_keyword_310176 = python_operator(stypy.reporting.localization.Localization(__file__, 467, 19), 'or', result_or_keyword_310160, result_and_keyword_310175)
        
        # Testing the type of an if condition (line 467)
        if_condition_310177 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 467, 16), result_or_keyword_310176)
        # Assigning a type to the variable 'if_condition_310177' (line 467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 467, 16), 'if_condition_310177', if_condition_310177)
        # SSA begins for if statement (line 467)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        # Getting the type of 'dayfirst' (line 471)
        dayfirst_310178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 23), 'dayfirst')
        
        
        # Obtaining the type of the subscript
        int_310179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 471, 41), 'int')
        # Getting the type of 'self' (line 471)
        self_310180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 36), 'self')
        # Obtaining the member '__getitem__' of a type (line 471)
        getitem___310181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 471, 36), self_310180, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 471)
        subscript_call_result_310182 = invoke(stypy.reporting.localization.Localization(__file__, 471, 36), getitem___310181, int_310179)
        
        int_310183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 471, 47), 'int')
        # Applying the binary operator '<=' (line 471)
        result_le_310184 = python_operator(stypy.reporting.localization.Localization(__file__, 471, 36), '<=', subscript_call_result_310182, int_310183)
        
        # Applying the binary operator 'and' (line 471)
        result_and_keyword_310185 = python_operator(stypy.reporting.localization.Localization(__file__, 471, 23), 'and', dayfirst_310178, result_le_310184)
        
        # Testing the type of an if condition (line 471)
        if_condition_310186 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 471, 20), result_and_keyword_310185)
        # Assigning a type to the variable 'if_condition_310186' (line 471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 471, 20), 'if_condition_310186', if_condition_310186)
        # SSA begins for if statement (line 471)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 472):
        
        # Assigning a Subscript to a Name (line 472):
        
        # Obtaining the type of the subscript
        int_310187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 472, 24), 'int')
        # Getting the type of 'self' (line 472)
        self_310188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 43), 'self')
        # Obtaining the member '__getitem__' of a type (line 472)
        getitem___310189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 472, 24), self_310188, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 472)
        subscript_call_result_310190 = invoke(stypy.reporting.localization.Localization(__file__, 472, 24), getitem___310189, int_310187)
        
        # Assigning a type to the variable 'tuple_var_assignment_308884' (line 472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 472, 24), 'tuple_var_assignment_308884', subscript_call_result_310190)
        
        # Assigning a Subscript to a Name (line 472):
        
        # Obtaining the type of the subscript
        int_310191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 472, 24), 'int')
        # Getting the type of 'self' (line 472)
        self_310192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 43), 'self')
        # Obtaining the member '__getitem__' of a type (line 472)
        getitem___310193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 472, 24), self_310192, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 472)
        subscript_call_result_310194 = invoke(stypy.reporting.localization.Localization(__file__, 472, 24), getitem___310193, int_310191)
        
        # Assigning a type to the variable 'tuple_var_assignment_308885' (line 472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 472, 24), 'tuple_var_assignment_308885', subscript_call_result_310194)
        
        # Assigning a Subscript to a Name (line 472):
        
        # Obtaining the type of the subscript
        int_310195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 472, 24), 'int')
        # Getting the type of 'self' (line 472)
        self_310196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 43), 'self')
        # Obtaining the member '__getitem__' of a type (line 472)
        getitem___310197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 472, 24), self_310196, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 472)
        subscript_call_result_310198 = invoke(stypy.reporting.localization.Localization(__file__, 472, 24), getitem___310197, int_310195)
        
        # Assigning a type to the variable 'tuple_var_assignment_308886' (line 472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 472, 24), 'tuple_var_assignment_308886', subscript_call_result_310198)
        
        # Assigning a Name to a Name (line 472):
        # Getting the type of 'tuple_var_assignment_308884' (line 472)
        tuple_var_assignment_308884_310199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 24), 'tuple_var_assignment_308884')
        # Assigning a type to the variable 'year' (line 472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 472, 24), 'year', tuple_var_assignment_308884_310199)
        
        # Assigning a Name to a Name (line 472):
        # Getting the type of 'tuple_var_assignment_308885' (line 472)
        tuple_var_assignment_308885_310200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 24), 'tuple_var_assignment_308885')
        # Assigning a type to the variable 'day' (line 472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 472, 30), 'day', tuple_var_assignment_308885_310200)
        
        # Assigning a Name to a Name (line 472):
        # Getting the type of 'tuple_var_assignment_308886' (line 472)
        tuple_var_assignment_308886_310201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 24), 'tuple_var_assignment_308886')
        # Assigning a type to the variable 'month' (line 472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 472, 35), 'month', tuple_var_assignment_308886_310201)
        # SSA branch for the else part of an if statement (line 471)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Tuple (line 474):
        
        # Assigning a Subscript to a Name (line 474):
        
        # Obtaining the type of the subscript
        int_310202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 474, 24), 'int')
        # Getting the type of 'self' (line 474)
        self_310203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 43), 'self')
        # Obtaining the member '__getitem__' of a type (line 474)
        getitem___310204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 24), self_310203, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 474)
        subscript_call_result_310205 = invoke(stypy.reporting.localization.Localization(__file__, 474, 24), getitem___310204, int_310202)
        
        # Assigning a type to the variable 'tuple_var_assignment_308887' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 24), 'tuple_var_assignment_308887', subscript_call_result_310205)
        
        # Assigning a Subscript to a Name (line 474):
        
        # Obtaining the type of the subscript
        int_310206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 474, 24), 'int')
        # Getting the type of 'self' (line 474)
        self_310207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 43), 'self')
        # Obtaining the member '__getitem__' of a type (line 474)
        getitem___310208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 24), self_310207, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 474)
        subscript_call_result_310209 = invoke(stypy.reporting.localization.Localization(__file__, 474, 24), getitem___310208, int_310206)
        
        # Assigning a type to the variable 'tuple_var_assignment_308888' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 24), 'tuple_var_assignment_308888', subscript_call_result_310209)
        
        # Assigning a Subscript to a Name (line 474):
        
        # Obtaining the type of the subscript
        int_310210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 474, 24), 'int')
        # Getting the type of 'self' (line 474)
        self_310211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 43), 'self')
        # Obtaining the member '__getitem__' of a type (line 474)
        getitem___310212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 24), self_310211, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 474)
        subscript_call_result_310213 = invoke(stypy.reporting.localization.Localization(__file__, 474, 24), getitem___310212, int_310210)
        
        # Assigning a type to the variable 'tuple_var_assignment_308889' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 24), 'tuple_var_assignment_308889', subscript_call_result_310213)
        
        # Assigning a Name to a Name (line 474):
        # Getting the type of 'tuple_var_assignment_308887' (line 474)
        tuple_var_assignment_308887_310214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 24), 'tuple_var_assignment_308887')
        # Assigning a type to the variable 'year' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 24), 'year', tuple_var_assignment_308887_310214)
        
        # Assigning a Name to a Name (line 474):
        # Getting the type of 'tuple_var_assignment_308888' (line 474)
        tuple_var_assignment_308888_310215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 24), 'tuple_var_assignment_308888')
        # Assigning a type to the variable 'month' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 30), 'month', tuple_var_assignment_308888_310215)
        
        # Assigning a Name to a Name (line 474):
        # Getting the type of 'tuple_var_assignment_308889' (line 474)
        tuple_var_assignment_308889_310216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 24), 'tuple_var_assignment_308889')
        # Assigning a type to the variable 'day' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 37), 'day', tuple_var_assignment_308889_310216)
        # SSA join for if statement (line 471)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 467)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        
        # Obtaining the type of the subscript
        int_310217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 26), 'int')
        # Getting the type of 'self' (line 475)
        self_310218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 21), 'self')
        # Obtaining the member '__getitem__' of a type (line 475)
        getitem___310219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 21), self_310218, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 475)
        subscript_call_result_310220 = invoke(stypy.reporting.localization.Localization(__file__, 475, 21), getitem___310219, int_310217)
        
        int_310221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 31), 'int')
        # Applying the binary operator '>' (line 475)
        result_gt_310222 = python_operator(stypy.reporting.localization.Localization(__file__, 475, 21), '>', subscript_call_result_310220, int_310221)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'dayfirst' (line 475)
        dayfirst_310223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 38), 'dayfirst')
        
        
        # Obtaining the type of the subscript
        int_310224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 56), 'int')
        # Getting the type of 'self' (line 475)
        self_310225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 51), 'self')
        # Obtaining the member '__getitem__' of a type (line 475)
        getitem___310226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 51), self_310225, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 475)
        subscript_call_result_310227 = invoke(stypy.reporting.localization.Localization(__file__, 475, 51), getitem___310226, int_310224)
        
        int_310228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 62), 'int')
        # Applying the binary operator '<=' (line 475)
        result_le_310229 = python_operator(stypy.reporting.localization.Localization(__file__, 475, 51), '<=', subscript_call_result_310227, int_310228)
        
        # Applying the binary operator 'and' (line 475)
        result_and_keyword_310230 = python_operator(stypy.reporting.localization.Localization(__file__, 475, 38), 'and', dayfirst_310223, result_le_310229)
        
        # Applying the binary operator 'or' (line 475)
        result_or_keyword_310231 = python_operator(stypy.reporting.localization.Localization(__file__, 475, 21), 'or', result_gt_310222, result_and_keyword_310230)
        
        # Testing the type of an if condition (line 475)
        if_condition_310232 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 475, 21), result_or_keyword_310231)
        # Assigning a type to the variable 'if_condition_310232' (line 475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 21), 'if_condition_310232', if_condition_310232)
        # SSA begins for if statement (line 475)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 477):
        
        # Assigning a Subscript to a Name (line 477):
        
        # Obtaining the type of the subscript
        int_310233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 20), 'int')
        # Getting the type of 'self' (line 477)
        self_310234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 39), 'self')
        # Obtaining the member '__getitem__' of a type (line 477)
        getitem___310235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 20), self_310234, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 477)
        subscript_call_result_310236 = invoke(stypy.reporting.localization.Localization(__file__, 477, 20), getitem___310235, int_310233)
        
        # Assigning a type to the variable 'tuple_var_assignment_308890' (line 477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 20), 'tuple_var_assignment_308890', subscript_call_result_310236)
        
        # Assigning a Subscript to a Name (line 477):
        
        # Obtaining the type of the subscript
        int_310237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 20), 'int')
        # Getting the type of 'self' (line 477)
        self_310238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 39), 'self')
        # Obtaining the member '__getitem__' of a type (line 477)
        getitem___310239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 20), self_310238, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 477)
        subscript_call_result_310240 = invoke(stypy.reporting.localization.Localization(__file__, 477, 20), getitem___310239, int_310237)
        
        # Assigning a type to the variable 'tuple_var_assignment_308891' (line 477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 20), 'tuple_var_assignment_308891', subscript_call_result_310240)
        
        # Assigning a Subscript to a Name (line 477):
        
        # Obtaining the type of the subscript
        int_310241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 20), 'int')
        # Getting the type of 'self' (line 477)
        self_310242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 39), 'self')
        # Obtaining the member '__getitem__' of a type (line 477)
        getitem___310243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 20), self_310242, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 477)
        subscript_call_result_310244 = invoke(stypy.reporting.localization.Localization(__file__, 477, 20), getitem___310243, int_310241)
        
        # Assigning a type to the variable 'tuple_var_assignment_308892' (line 477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 20), 'tuple_var_assignment_308892', subscript_call_result_310244)
        
        # Assigning a Name to a Name (line 477):
        # Getting the type of 'tuple_var_assignment_308890' (line 477)
        tuple_var_assignment_308890_310245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 20), 'tuple_var_assignment_308890')
        # Assigning a type to the variable 'day' (line 477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 20), 'day', tuple_var_assignment_308890_310245)
        
        # Assigning a Name to a Name (line 477):
        # Getting the type of 'tuple_var_assignment_308891' (line 477)
        tuple_var_assignment_308891_310246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 20), 'tuple_var_assignment_308891')
        # Assigning a type to the variable 'month' (line 477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 25), 'month', tuple_var_assignment_308891_310246)
        
        # Assigning a Name to a Name (line 477):
        # Getting the type of 'tuple_var_assignment_308892' (line 477)
        tuple_var_assignment_308892_310247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 20), 'tuple_var_assignment_308892')
        # Assigning a type to the variable 'year' (line 477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 32), 'year', tuple_var_assignment_308892_310247)
        # SSA branch for the else part of an if statement (line 475)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Tuple (line 480):
        
        # Assigning a Subscript to a Name (line 480):
        
        # Obtaining the type of the subscript
        int_310248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 480, 20), 'int')
        # Getting the type of 'self' (line 480)
        self_310249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 39), 'self')
        # Obtaining the member '__getitem__' of a type (line 480)
        getitem___310250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 20), self_310249, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 480)
        subscript_call_result_310251 = invoke(stypy.reporting.localization.Localization(__file__, 480, 20), getitem___310250, int_310248)
        
        # Assigning a type to the variable 'tuple_var_assignment_308893' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 20), 'tuple_var_assignment_308893', subscript_call_result_310251)
        
        # Assigning a Subscript to a Name (line 480):
        
        # Obtaining the type of the subscript
        int_310252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 480, 20), 'int')
        # Getting the type of 'self' (line 480)
        self_310253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 39), 'self')
        # Obtaining the member '__getitem__' of a type (line 480)
        getitem___310254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 20), self_310253, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 480)
        subscript_call_result_310255 = invoke(stypy.reporting.localization.Localization(__file__, 480, 20), getitem___310254, int_310252)
        
        # Assigning a type to the variable 'tuple_var_assignment_308894' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 20), 'tuple_var_assignment_308894', subscript_call_result_310255)
        
        # Assigning a Subscript to a Name (line 480):
        
        # Obtaining the type of the subscript
        int_310256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 480, 20), 'int')
        # Getting the type of 'self' (line 480)
        self_310257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 39), 'self')
        # Obtaining the member '__getitem__' of a type (line 480)
        getitem___310258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 20), self_310257, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 480)
        subscript_call_result_310259 = invoke(stypy.reporting.localization.Localization(__file__, 480, 20), getitem___310258, int_310256)
        
        # Assigning a type to the variable 'tuple_var_assignment_308895' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 20), 'tuple_var_assignment_308895', subscript_call_result_310259)
        
        # Assigning a Name to a Name (line 480):
        # Getting the type of 'tuple_var_assignment_308893' (line 480)
        tuple_var_assignment_308893_310260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 20), 'tuple_var_assignment_308893')
        # Assigning a type to the variable 'month' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 20), 'month', tuple_var_assignment_308893_310260)
        
        # Assigning a Name to a Name (line 480):
        # Getting the type of 'tuple_var_assignment_308894' (line 480)
        tuple_var_assignment_308894_310261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 20), 'tuple_var_assignment_308894')
        # Assigning a type to the variable 'day' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 27), 'day', tuple_var_assignment_308894_310261)
        
        # Assigning a Name to a Name (line 480):
        # Getting the type of 'tuple_var_assignment_308895' (line 480)
        tuple_var_assignment_308895_310262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 20), 'tuple_var_assignment_308895')
        # Assigning a type to the variable 'year' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 32), 'year', tuple_var_assignment_308895_310262)
        # SSA join for if statement (line 475)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 467)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 457)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 447)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 445)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 443)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 428)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 416)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 414)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 482)
        tuple_310263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 482, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 482)
        # Adding element type (line 482)
        # Getting the type of 'year' (line 482)
        year_310264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 15), 'year')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 482, 15), tuple_310263, year_310264)
        # Adding element type (line 482)
        # Getting the type of 'month' (line 482)
        month_310265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 21), 'month')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 482, 15), tuple_310263, month_310265)
        # Adding element type (line 482)
        # Getting the type of 'day' (line 482)
        day_310266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 28), 'day')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 482, 15), tuple_310263, day_310266)
        
        # Assigning a type to the variable 'stypy_return_type' (line 482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 8), 'stypy_return_type', tuple_310263)
        
        # ################# End of 'resolve_ymd(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'resolve_ymd' in the type store
        # Getting the type of 'stypy_return_type' (line 410)
        stypy_return_type_310267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_310267)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'resolve_ymd'
        return stypy_return_type_310267


# Assigning a type to the variable '_ymd' (line 374)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 374, 0), '_ymd', _ymd)
# Declaration of the 'parser' class

class parser(object, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 486)
        None_310268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 28), 'None')
        defaults = [None_310268]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 486, 4, False)
        # Assigning a type to the variable 'self' (line 487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 487, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'parser.__init__', ['info'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['info'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a BoolOp to a Attribute (line 487):
        
        # Assigning a BoolOp to a Attribute (line 487):
        
        # Evaluating a boolean operation
        # Getting the type of 'info' (line 487)
        info_310269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 20), 'info')
        
        # Call to parserinfo(...): (line 487)
        # Processing the call keyword arguments (line 487)
        kwargs_310271 = {}
        # Getting the type of 'parserinfo' (line 487)
        parserinfo_310270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 28), 'parserinfo', False)
        # Calling parserinfo(args, kwargs) (line 487)
        parserinfo_call_result_310272 = invoke(stypy.reporting.localization.Localization(__file__, 487, 28), parserinfo_310270, *[], **kwargs_310271)
        
        # Applying the binary operator 'or' (line 487)
        result_or_keyword_310273 = python_operator(stypy.reporting.localization.Localization(__file__, 487, 20), 'or', info_310269, parserinfo_call_result_310272)
        
        # Getting the type of 'self' (line 487)
        self_310274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 8), 'self')
        # Setting the type of the member 'info' of a type (line 487)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 8), self_310274, 'info', result_or_keyword_310273)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def parse(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 489)
        None_310275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 37), 'None')
        # Getting the type of 'False' (line 489)
        False_310276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 52), 'False')
        # Getting the type of 'None' (line 489)
        None_310277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 67), 'None')
        defaults = [None_310275, False_310276, None_310277]
        # Create a new context for function 'parse'
        module_type_store = module_type_store.open_function_context('parse', 489, 4, False)
        # Assigning a type to the variable 'self' (line 490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 490, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        parser.parse.__dict__.__setitem__('stypy_localization', localization)
        parser.parse.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        parser.parse.__dict__.__setitem__('stypy_type_store', module_type_store)
        parser.parse.__dict__.__setitem__('stypy_function_name', 'parser.parse')
        parser.parse.__dict__.__setitem__('stypy_param_names_list', ['timestr', 'default', 'ignoretz', 'tzinfos'])
        parser.parse.__dict__.__setitem__('stypy_varargs_param_name', None)
        parser.parse.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        parser.parse.__dict__.__setitem__('stypy_call_defaults', defaults)
        parser.parse.__dict__.__setitem__('stypy_call_varargs', varargs)
        parser.parse.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        parser.parse.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'parser.parse', ['timestr', 'default', 'ignoretz', 'tzinfos'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'parse', localization, ['timestr', 'default', 'ignoretz', 'tzinfos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'parse(...)' code ##################

        unicode_310278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 550, (-1)), 'unicode', u'\n        Parse the date/time string into a :class:`datetime.datetime` object.\n\n        :param timestr:\n            Any date/time string using the supported formats.\n\n        :param default:\n            The default datetime object, if this is a datetime object and not\n            ``None``, elements specified in ``timestr`` replace elements in the\n            default object.\n\n        :param ignoretz:\n            If set ``True``, time zones in parsed strings are ignored and a\n            naive :class:`datetime.datetime` object is returned.\n\n        :param tzinfos:\n            Additional time zone names / aliases which may be present in the\n            string. This argument maps time zone names (and optionally offsets\n            from those time zones) to time zones. This parameter can be a\n            dictionary with timezone aliases mapping time zone names to time\n            zones or a function taking two parameters (``tzname`` and\n            ``tzoffset``) and returning a time zone.\n\n            The timezones to which the names are mapped can be an integer\n            offset from UTC in minutes or a :class:`tzinfo` object.\n\n            .. doctest::\n               :options: +NORMALIZE_WHITESPACE\n\n                >>> from dateutil.parser import parse\n                >>> from dateutil.tz import gettz\n                >>> tzinfos = {"BRST": -10800, "CST": gettz("America/Chicago")}\n                >>> parse("2012-01-19 17:21:00 BRST", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u\'BRST\', -10800))\n                >>> parse("2012-01-19 17:21:00 CST", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21,\n                                  tzinfo=tzfile(\'/usr/share/zoneinfo/America/Chicago\'))\n\n            This parameter is ignored if ``ignoretz`` is set.\n\n        :param **kwargs:\n            Keyword arguments as passed to ``_parse()``.\n\n        :return:\n            Returns a :class:`datetime.datetime` object or, if the\n            ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n            first element being a :class:`datetime.datetime` object, the second\n            a tuple containing the fuzzy tokens.\n\n        :raises ValueError:\n            Raised for invalid or unknown string format, if the provided\n            :class:`tzinfo` is not in a valid format, or if an invalid date\n            would be created.\n\n        :raises TypeError:\n            Raised for non-string or character stream input.\n\n        :raises OverflowError:\n            Raised if the parsed date exceeds the largest valid C integer on\n            your system.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 552)
        # Getting the type of 'default' (line 552)
        default_310279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 11), 'default')
        # Getting the type of 'None' (line 552)
        None_310280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 22), 'None')
        
        (may_be_310281, more_types_in_union_310282) = may_be_none(default_310279, None_310280)

        if may_be_310281:

            if more_types_in_union_310282:
                # Runtime conditional SSA (line 552)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 553):
            
            # Assigning a Call to a Name (line 553):
            
            # Call to replace(...): (line 553)
            # Processing the call keyword arguments (line 553)
            int_310289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 553, 59), 'int')
            keyword_310290 = int_310289
            int_310291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 553, 69), 'int')
            keyword_310292 = int_310291
            int_310293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 554, 61), 'int')
            keyword_310294 = int_310293
            int_310295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 554, 76), 'int')
            keyword_310296 = int_310295
            kwargs_310297 = {'second': keyword_310294, 'microsecond': keyword_310296, 'minute': keyword_310292, 'hour': keyword_310290}
            
            # Call to now(...): (line 553)
            # Processing the call keyword arguments (line 553)
            kwargs_310286 = {}
            # Getting the type of 'datetime' (line 553)
            datetime_310283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 22), 'datetime', False)
            # Obtaining the member 'datetime' of a type (line 553)
            datetime_310284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 22), datetime_310283, 'datetime')
            # Obtaining the member 'now' of a type (line 553)
            now_310285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 22), datetime_310284, 'now')
            # Calling now(args, kwargs) (line 553)
            now_call_result_310287 = invoke(stypy.reporting.localization.Localization(__file__, 553, 22), now_310285, *[], **kwargs_310286)
            
            # Obtaining the member 'replace' of a type (line 553)
            replace_310288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 22), now_call_result_310287, 'replace')
            # Calling replace(args, kwargs) (line 553)
            replace_call_result_310298 = invoke(stypy.reporting.localization.Localization(__file__, 553, 22), replace_310288, *[], **kwargs_310297)
            
            # Assigning a type to the variable 'default' (line 553)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 12), 'default', replace_call_result_310298)

            if more_types_in_union_310282:
                # SSA join for if statement (line 552)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Tuple (line 556):
        
        # Assigning a Call to a Name:
        
        # Call to _parse(...): (line 556)
        # Processing the call arguments (line 556)
        # Getting the type of 'timestr' (line 556)
        timestr_310301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 42), 'timestr', False)
        # Processing the call keyword arguments (line 556)
        # Getting the type of 'kwargs' (line 556)
        kwargs_310302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 53), 'kwargs', False)
        kwargs_310303 = {'kwargs_310302': kwargs_310302}
        # Getting the type of 'self' (line 556)
        self_310299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 30), 'self', False)
        # Obtaining the member '_parse' of a type (line 556)
        _parse_310300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 30), self_310299, '_parse')
        # Calling _parse(args, kwargs) (line 556)
        _parse_call_result_310304 = invoke(stypy.reporting.localization.Localization(__file__, 556, 30), _parse_310300, *[timestr_310301], **kwargs_310303)
        
        # Assigning a type to the variable 'call_assignment_308896' (line 556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 8), 'call_assignment_308896', _parse_call_result_310304)
        
        # Assigning a Call to a Name (line 556):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_310307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 556, 8), 'int')
        # Processing the call keyword arguments
        kwargs_310308 = {}
        # Getting the type of 'call_assignment_308896' (line 556)
        call_assignment_308896_310305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 8), 'call_assignment_308896', False)
        # Obtaining the member '__getitem__' of a type (line 556)
        getitem___310306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 8), call_assignment_308896_310305, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_310309 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___310306, *[int_310307], **kwargs_310308)
        
        # Assigning a type to the variable 'call_assignment_308897' (line 556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 8), 'call_assignment_308897', getitem___call_result_310309)
        
        # Assigning a Name to a Name (line 556):
        # Getting the type of 'call_assignment_308897' (line 556)
        call_assignment_308897_310310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 8), 'call_assignment_308897')
        # Assigning a type to the variable 'res' (line 556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 8), 'res', call_assignment_308897_310310)
        
        # Assigning a Call to a Name (line 556):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_310313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 556, 8), 'int')
        # Processing the call keyword arguments
        kwargs_310314 = {}
        # Getting the type of 'call_assignment_308896' (line 556)
        call_assignment_308896_310311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 8), 'call_assignment_308896', False)
        # Obtaining the member '__getitem__' of a type (line 556)
        getitem___310312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 8), call_assignment_308896_310311, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_310315 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___310312, *[int_310313], **kwargs_310314)
        
        # Assigning a type to the variable 'call_assignment_308898' (line 556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 8), 'call_assignment_308898', getitem___call_result_310315)
        
        # Assigning a Name to a Name (line 556):
        # Getting the type of 'call_assignment_308898' (line 556)
        call_assignment_308898_310316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 8), 'call_assignment_308898')
        # Assigning a type to the variable 'skipped_tokens' (line 556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 13), 'skipped_tokens', call_assignment_308898_310316)
        
        # Type idiom detected: calculating its left and rigth part (line 558)
        # Getting the type of 'res' (line 558)
        res_310317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 11), 'res')
        # Getting the type of 'None' (line 558)
        None_310318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 18), 'None')
        
        (may_be_310319, more_types_in_union_310320) = may_be_none(res_310317, None_310318)

        if may_be_310319:

            if more_types_in_union_310320:
                # Runtime conditional SSA (line 558)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to ValueError(...): (line 559)
            # Processing the call arguments (line 559)
            unicode_310322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 29), 'unicode', u'Unknown string format')
            # Processing the call keyword arguments (line 559)
            kwargs_310323 = {}
            # Getting the type of 'ValueError' (line 559)
            ValueError_310321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 18), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 559)
            ValueError_call_result_310324 = invoke(stypy.reporting.localization.Localization(__file__, 559, 18), ValueError_310321, *[unicode_310322], **kwargs_310323)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 559, 12), ValueError_call_result_310324, 'raise parameter', BaseException)

            if more_types_in_union_310320:
                # SSA join for if statement (line 558)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        
        # Call to len(...): (line 561)
        # Processing the call arguments (line 561)
        # Getting the type of 'res' (line 561)
        res_310326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 15), 'res', False)
        # Processing the call keyword arguments (line 561)
        kwargs_310327 = {}
        # Getting the type of 'len' (line 561)
        len_310325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 11), 'len', False)
        # Calling len(args, kwargs) (line 561)
        len_call_result_310328 = invoke(stypy.reporting.localization.Localization(__file__, 561, 11), len_310325, *[res_310326], **kwargs_310327)
        
        int_310329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 23), 'int')
        # Applying the binary operator '==' (line 561)
        result_eq_310330 = python_operator(stypy.reporting.localization.Localization(__file__, 561, 11), '==', len_call_result_310328, int_310329)
        
        # Testing the type of an if condition (line 561)
        if_condition_310331 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 561, 8), result_eq_310330)
        # Assigning a type to the variable 'if_condition_310331' (line 561)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 561, 8), 'if_condition_310331', if_condition_310331)
        # SSA begins for if statement (line 561)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 562)
        # Processing the call arguments (line 562)
        unicode_310333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 29), 'unicode', u'String does not contain a date.')
        # Processing the call keyword arguments (line 562)
        kwargs_310334 = {}
        # Getting the type of 'ValueError' (line 562)
        ValueError_310332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 562)
        ValueError_call_result_310335 = invoke(stypy.reporting.localization.Localization(__file__, 562, 18), ValueError_310332, *[unicode_310333], **kwargs_310334)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 562, 12), ValueError_call_result_310335, 'raise parameter', BaseException)
        # SSA join for if statement (line 561)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Dict to a Name (line 564):
        
        # Assigning a Dict to a Name (line 564):
        
        # Obtaining an instance of the builtin type 'dict' (line 564)
        dict_310336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 564, 15), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 564)
        
        # Assigning a type to the variable 'repl' (line 564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 564, 8), 'repl', dict_310336)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 565)
        tuple_310337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 565, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 565)
        # Adding element type (line 565)
        unicode_310338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 565, 21), 'unicode', u'year')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 565, 21), tuple_310337, unicode_310338)
        # Adding element type (line 565)
        unicode_310339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 565, 29), 'unicode', u'month')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 565, 21), tuple_310337, unicode_310339)
        # Adding element type (line 565)
        unicode_310340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 565, 38), 'unicode', u'day')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 565, 21), tuple_310337, unicode_310340)
        # Adding element type (line 565)
        unicode_310341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 565, 45), 'unicode', u'hour')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 565, 21), tuple_310337, unicode_310341)
        # Adding element type (line 565)
        unicode_310342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 566, 21), 'unicode', u'minute')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 565, 21), tuple_310337, unicode_310342)
        # Adding element type (line 565)
        unicode_310343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 566, 31), 'unicode', u'second')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 565, 21), tuple_310337, unicode_310343)
        # Adding element type (line 565)
        unicode_310344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 566, 41), 'unicode', u'microsecond')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 565, 21), tuple_310337, unicode_310344)
        
        # Testing the type of a for loop iterable (line 565)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 565, 8), tuple_310337)
        # Getting the type of the for loop variable (line 565)
        for_loop_var_310345 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 565, 8), tuple_310337)
        # Assigning a type to the variable 'attr' (line 565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'attr', for_loop_var_310345)
        # SSA begins for a for statement (line 565)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 567):
        
        # Assigning a Call to a Name (line 567):
        
        # Call to getattr(...): (line 567)
        # Processing the call arguments (line 567)
        # Getting the type of 'res' (line 567)
        res_310347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 28), 'res', False)
        # Getting the type of 'attr' (line 567)
        attr_310348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 33), 'attr', False)
        # Processing the call keyword arguments (line 567)
        kwargs_310349 = {}
        # Getting the type of 'getattr' (line 567)
        getattr_310346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 20), 'getattr', False)
        # Calling getattr(args, kwargs) (line 567)
        getattr_call_result_310350 = invoke(stypy.reporting.localization.Localization(__file__, 567, 20), getattr_310346, *[res_310347, attr_310348], **kwargs_310349)
        
        # Assigning a type to the variable 'value' (line 567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 12), 'value', getattr_call_result_310350)
        
        # Type idiom detected: calculating its left and rigth part (line 568)
        # Getting the type of 'value' (line 568)
        value_310351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 12), 'value')
        # Getting the type of 'None' (line 568)
        None_310352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 28), 'None')
        
        (may_be_310353, more_types_in_union_310354) = may_not_be_none(value_310351, None_310352)

        if may_be_310353:

            if more_types_in_union_310354:
                # Runtime conditional SSA (line 568)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Subscript (line 569):
            
            # Assigning a Name to a Subscript (line 569):
            # Getting the type of 'value' (line 569)
            value_310355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 29), 'value')
            # Getting the type of 'repl' (line 569)
            repl_310356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 16), 'repl')
            # Getting the type of 'attr' (line 569)
            attr_310357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 21), 'attr')
            # Storing an element on a container (line 569)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 569, 16), repl_310356, (attr_310357, value_310355))

            if more_types_in_union_310354:
                # SSA join for if statement (line 568)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_310358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 571, 11), 'unicode', u'day')
        # Getting the type of 'repl' (line 571)
        repl_310359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 24), 'repl')
        # Applying the binary operator 'notin' (line 571)
        result_contains_310360 = python_operator(stypy.reporting.localization.Localization(__file__, 571, 11), 'notin', unicode_310358, repl_310359)
        
        # Testing the type of an if condition (line 571)
        if_condition_310361 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 571, 8), result_contains_310360)
        # Assigning a type to the variable 'if_condition_310361' (line 571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 8), 'if_condition_310361', if_condition_310361)
        # SSA begins for if statement (line 571)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a IfExp to a Name (line 574):
        
        # Assigning a IfExp to a Name (line 574):
        
        
        # Getting the type of 'res' (line 574)
        res_310362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 36), 'res')
        # Obtaining the member 'year' of a type (line 574)
        year_310363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 36), res_310362, 'year')
        # Getting the type of 'None' (line 574)
        None_310364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 48), 'None')
        # Applying the binary operator 'is' (line 574)
        result_is__310365 = python_operator(stypy.reporting.localization.Localization(__file__, 574, 36), 'is', year_310363, None_310364)
        
        # Testing the type of an if expression (line 574)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 574, 20), result_is__310365)
        # SSA begins for if expression (line 574)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        # Getting the type of 'default' (line 574)
        default_310366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 20), 'default')
        # Obtaining the member 'year' of a type (line 574)
        year_310367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 20), default_310366, 'year')
        # SSA branch for the else part of an if expression (line 574)
        module_type_store.open_ssa_branch('if expression else')
        # Getting the type of 'res' (line 574)
        res_310368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 58), 'res')
        # Obtaining the member 'year' of a type (line 574)
        year_310369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 58), res_310368, 'year')
        # SSA join for if expression (line 574)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_310370 = union_type.UnionType.add(year_310367, year_310369)
        
        # Assigning a type to the variable 'cyear' (line 574)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 574, 12), 'cyear', if_exp_310370)
        
        # Assigning a IfExp to a Name (line 575):
        
        # Assigning a IfExp to a Name (line 575):
        
        
        # Getting the type of 'res' (line 575)
        res_310371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 38), 'res')
        # Obtaining the member 'month' of a type (line 575)
        month_310372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 38), res_310371, 'month')
        # Getting the type of 'None' (line 575)
        None_310373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 51), 'None')
        # Applying the binary operator 'is' (line 575)
        result_is__310374 = python_operator(stypy.reporting.localization.Localization(__file__, 575, 38), 'is', month_310372, None_310373)
        
        # Testing the type of an if expression (line 575)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 575, 21), result_is__310374)
        # SSA begins for if expression (line 575)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        # Getting the type of 'default' (line 575)
        default_310375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 21), 'default')
        # Obtaining the member 'month' of a type (line 575)
        month_310376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 21), default_310375, 'month')
        # SSA branch for the else part of an if expression (line 575)
        module_type_store.open_ssa_branch('if expression else')
        # Getting the type of 'res' (line 575)
        res_310377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 61), 'res')
        # Obtaining the member 'month' of a type (line 575)
        month_310378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 61), res_310377, 'month')
        # SSA join for if expression (line 575)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_310379 = union_type.UnionType.add(month_310376, month_310378)
        
        # Assigning a type to the variable 'cmonth' (line 575)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 575, 12), 'cmonth', if_exp_310379)
        
        # Assigning a IfExp to a Name (line 576):
        
        # Assigning a IfExp to a Name (line 576):
        
        
        # Getting the type of 'res' (line 576)
        res_310380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 34), 'res')
        # Obtaining the member 'day' of a type (line 576)
        day_310381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 34), res_310380, 'day')
        # Getting the type of 'None' (line 576)
        None_310382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 45), 'None')
        # Applying the binary operator 'is' (line 576)
        result_is__310383 = python_operator(stypy.reporting.localization.Localization(__file__, 576, 34), 'is', day_310381, None_310382)
        
        # Testing the type of an if expression (line 576)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 576, 19), result_is__310383)
        # SSA begins for if expression (line 576)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        # Getting the type of 'default' (line 576)
        default_310384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 19), 'default')
        # Obtaining the member 'day' of a type (line 576)
        day_310385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 19), default_310384, 'day')
        # SSA branch for the else part of an if expression (line 576)
        module_type_store.open_ssa_branch('if expression else')
        # Getting the type of 'res' (line 576)
        res_310386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 55), 'res')
        # Obtaining the member 'day' of a type (line 576)
        day_310387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 55), res_310386, 'day')
        # SSA join for if expression (line 576)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_310388 = union_type.UnionType.add(day_310385, day_310387)
        
        # Assigning a type to the variable 'cday' (line 576)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 576, 12), 'cday', if_exp_310388)
        
        
        # Getting the type of 'cday' (line 578)
        cday_310389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 15), 'cday')
        
        # Obtaining the type of the subscript
        int_310390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 48), 'int')
        
        # Call to monthrange(...): (line 578)
        # Processing the call arguments (line 578)
        # Getting the type of 'cyear' (line 578)
        cyear_310392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 33), 'cyear', False)
        # Getting the type of 'cmonth' (line 578)
        cmonth_310393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 40), 'cmonth', False)
        # Processing the call keyword arguments (line 578)
        kwargs_310394 = {}
        # Getting the type of 'monthrange' (line 578)
        monthrange_310391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 22), 'monthrange', False)
        # Calling monthrange(args, kwargs) (line 578)
        monthrange_call_result_310395 = invoke(stypy.reporting.localization.Localization(__file__, 578, 22), monthrange_310391, *[cyear_310392, cmonth_310393], **kwargs_310394)
        
        # Obtaining the member '__getitem__' of a type (line 578)
        getitem___310396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 22), monthrange_call_result_310395, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 578)
        subscript_call_result_310397 = invoke(stypy.reporting.localization.Localization(__file__, 578, 22), getitem___310396, int_310390)
        
        # Applying the binary operator '>' (line 578)
        result_gt_310398 = python_operator(stypy.reporting.localization.Localization(__file__, 578, 15), '>', cday_310389, subscript_call_result_310397)
        
        # Testing the type of an if condition (line 578)
        if_condition_310399 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 578, 12), result_gt_310398)
        # Assigning a type to the variable 'if_condition_310399' (line 578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 12), 'if_condition_310399', if_condition_310399)
        # SSA begins for if statement (line 578)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Subscript (line 579):
        
        # Assigning a Subscript to a Subscript (line 579):
        
        # Obtaining the type of the subscript
        int_310400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 579, 56), 'int')
        
        # Call to monthrange(...): (line 579)
        # Processing the call arguments (line 579)
        # Getting the type of 'cyear' (line 579)
        cyear_310402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 41), 'cyear', False)
        # Getting the type of 'cmonth' (line 579)
        cmonth_310403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 48), 'cmonth', False)
        # Processing the call keyword arguments (line 579)
        kwargs_310404 = {}
        # Getting the type of 'monthrange' (line 579)
        monthrange_310401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 30), 'monthrange', False)
        # Calling monthrange(args, kwargs) (line 579)
        monthrange_call_result_310405 = invoke(stypy.reporting.localization.Localization(__file__, 579, 30), monthrange_310401, *[cyear_310402, cmonth_310403], **kwargs_310404)
        
        # Obtaining the member '__getitem__' of a type (line 579)
        getitem___310406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 579, 30), monthrange_call_result_310405, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 579)
        subscript_call_result_310407 = invoke(stypy.reporting.localization.Localization(__file__, 579, 30), getitem___310406, int_310400)
        
        # Getting the type of 'repl' (line 579)
        repl_310408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 16), 'repl')
        unicode_310409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 579, 21), 'unicode', u'day')
        # Storing an element on a container (line 579)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 579, 16), repl_310408, (unicode_310409, subscript_call_result_310407))
        # SSA join for if statement (line 578)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 571)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 581):
        
        # Assigning a Call to a Name (line 581):
        
        # Call to replace(...): (line 581)
        # Processing the call keyword arguments (line 581)
        # Getting the type of 'repl' (line 581)
        repl_310412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 32), 'repl', False)
        kwargs_310413 = {'repl_310412': repl_310412}
        # Getting the type of 'default' (line 581)
        default_310410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 14), 'default', False)
        # Obtaining the member 'replace' of a type (line 581)
        replace_310411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 14), default_310410, 'replace')
        # Calling replace(args, kwargs) (line 581)
        replace_call_result_310414 = invoke(stypy.reporting.localization.Localization(__file__, 581, 14), replace_310411, *[], **kwargs_310413)
        
        # Assigning a type to the variable 'ret' (line 581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 8), 'ret', replace_call_result_310414)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'res' (line 583)
        res_310415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 11), 'res')
        # Obtaining the member 'weekday' of a type (line 583)
        weekday_310416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 583, 11), res_310415, 'weekday')
        # Getting the type of 'None' (line 583)
        None_310417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 30), 'None')
        # Applying the binary operator 'isnot' (line 583)
        result_is_not_310418 = python_operator(stypy.reporting.localization.Localization(__file__, 583, 11), 'isnot', weekday_310416, None_310417)
        
        
        # Getting the type of 'res' (line 583)
        res_310419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 43), 'res')
        # Obtaining the member 'day' of a type (line 583)
        day_310420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 583, 43), res_310419, 'day')
        # Applying the 'not' unary operator (line 583)
        result_not__310421 = python_operator(stypy.reporting.localization.Localization(__file__, 583, 39), 'not', day_310420)
        
        # Applying the binary operator 'and' (line 583)
        result_and_keyword_310422 = python_operator(stypy.reporting.localization.Localization(__file__, 583, 11), 'and', result_is_not_310418, result_not__310421)
        
        # Testing the type of an if condition (line 583)
        if_condition_310423 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 583, 8), result_and_keyword_310422)
        # Assigning a type to the variable 'if_condition_310423' (line 583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 583, 8), 'if_condition_310423', if_condition_310423)
        # SSA begins for if statement (line 583)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 584):
        
        # Assigning a BinOp to a Name (line 584):
        # Getting the type of 'ret' (line 584)
        ret_310424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 18), 'ret')
        
        # Call to relativedelta(...): (line 584)
        # Processing the call keyword arguments (line 584)
        # Getting the type of 'res' (line 584)
        res_310427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 58), 'res', False)
        # Obtaining the member 'weekday' of a type (line 584)
        weekday_310428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 58), res_310427, 'weekday')
        keyword_310429 = weekday_310428
        kwargs_310430 = {'weekday': keyword_310429}
        # Getting the type of 'relativedelta' (line 584)
        relativedelta_310425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 22), 'relativedelta', False)
        # Obtaining the member 'relativedelta' of a type (line 584)
        relativedelta_310426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 22), relativedelta_310425, 'relativedelta')
        # Calling relativedelta(args, kwargs) (line 584)
        relativedelta_call_result_310431 = invoke(stypy.reporting.localization.Localization(__file__, 584, 22), relativedelta_310426, *[], **kwargs_310430)
        
        # Applying the binary operator '+' (line 584)
        result_add_310432 = python_operator(stypy.reporting.localization.Localization(__file__, 584, 18), '+', ret_310424, relativedelta_call_result_310431)
        
        # Assigning a type to the variable 'ret' (line 584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 584, 12), 'ret', result_add_310432)
        # SSA join for if statement (line 583)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'ignoretz' (line 586)
        ignoretz_310433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 15), 'ignoretz')
        # Applying the 'not' unary operator (line 586)
        result_not__310434 = python_operator(stypy.reporting.localization.Localization(__file__, 586, 11), 'not', ignoretz_310433)
        
        # Testing the type of an if condition (line 586)
        if_condition_310435 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 586, 8), result_not__310434)
        # Assigning a type to the variable 'if_condition_310435' (line 586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 586, 8), 'if_condition_310435', if_condition_310435)
        # SSA begins for if statement (line 586)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 587)
        # Processing the call arguments (line 587)
        # Getting the type of 'tzinfos' (line 587)
        tzinfos_310437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 27), 'tzinfos', False)
        # Getting the type of 'collections' (line 587)
        collections_310438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 36), 'collections', False)
        # Obtaining the member 'Callable' of a type (line 587)
        Callable_310439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 587, 36), collections_310438, 'Callable')
        # Processing the call keyword arguments (line 587)
        kwargs_310440 = {}
        # Getting the type of 'isinstance' (line 587)
        isinstance_310436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 16), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 587)
        isinstance_call_result_310441 = invoke(stypy.reporting.localization.Localization(__file__, 587, 16), isinstance_310436, *[tzinfos_310437, Callable_310439], **kwargs_310440)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'tzinfos' (line 588)
        tzinfos_310442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 20), 'tzinfos')
        
        # Getting the type of 'res' (line 588)
        res_310443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 32), 'res')
        # Obtaining the member 'tzname' of a type (line 588)
        tzname_310444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 32), res_310443, 'tzname')
        # Getting the type of 'tzinfos' (line 588)
        tzinfos_310445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 46), 'tzinfos')
        # Applying the binary operator 'in' (line 588)
        result_contains_310446 = python_operator(stypy.reporting.localization.Localization(__file__, 588, 32), 'in', tzname_310444, tzinfos_310445)
        
        # Applying the binary operator 'and' (line 588)
        result_and_keyword_310447 = python_operator(stypy.reporting.localization.Localization(__file__, 588, 20), 'and', tzinfos_310442, result_contains_310446)
        
        # Applying the binary operator 'or' (line 587)
        result_or_keyword_310448 = python_operator(stypy.reporting.localization.Localization(__file__, 587, 16), 'or', isinstance_call_result_310441, result_and_keyword_310447)
        
        # Testing the type of an if condition (line 587)
        if_condition_310449 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 587, 12), result_or_keyword_310448)
        # Assigning a type to the variable 'if_condition_310449' (line 587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 587, 12), 'if_condition_310449', if_condition_310449)
        # SSA begins for if statement (line 587)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to isinstance(...): (line 590)
        # Processing the call arguments (line 590)
        # Getting the type of 'tzinfos' (line 590)
        tzinfos_310451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 30), 'tzinfos', False)
        # Getting the type of 'collections' (line 590)
        collections_310452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 39), 'collections', False)
        # Obtaining the member 'Callable' of a type (line 590)
        Callable_310453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 39), collections_310452, 'Callable')
        # Processing the call keyword arguments (line 590)
        kwargs_310454 = {}
        # Getting the type of 'isinstance' (line 590)
        isinstance_310450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 19), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 590)
        isinstance_call_result_310455 = invoke(stypy.reporting.localization.Localization(__file__, 590, 19), isinstance_310450, *[tzinfos_310451, Callable_310453], **kwargs_310454)
        
        # Testing the type of an if condition (line 590)
        if_condition_310456 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 590, 16), isinstance_call_result_310455)
        # Assigning a type to the variable 'if_condition_310456' (line 590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 590, 16), 'if_condition_310456', if_condition_310456)
        # SSA begins for if statement (line 590)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 591):
        
        # Assigning a Call to a Name (line 591):
        
        # Call to tzinfos(...): (line 591)
        # Processing the call arguments (line 591)
        # Getting the type of 'res' (line 591)
        res_310458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 37), 'res', False)
        # Obtaining the member 'tzname' of a type (line 591)
        tzname_310459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 37), res_310458, 'tzname')
        # Getting the type of 'res' (line 591)
        res_310460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 49), 'res', False)
        # Obtaining the member 'tzoffset' of a type (line 591)
        tzoffset_310461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 49), res_310460, 'tzoffset')
        # Processing the call keyword arguments (line 591)
        kwargs_310462 = {}
        # Getting the type of 'tzinfos' (line 591)
        tzinfos_310457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 29), 'tzinfos', False)
        # Calling tzinfos(args, kwargs) (line 591)
        tzinfos_call_result_310463 = invoke(stypy.reporting.localization.Localization(__file__, 591, 29), tzinfos_310457, *[tzname_310459, tzoffset_310461], **kwargs_310462)
        
        # Assigning a type to the variable 'tzdata' (line 591)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 591, 20), 'tzdata', tzinfos_call_result_310463)
        # SSA branch for the else part of an if statement (line 590)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 593):
        
        # Assigning a Call to a Name (line 593):
        
        # Call to get(...): (line 593)
        # Processing the call arguments (line 593)
        # Getting the type of 'res' (line 593)
        res_310466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 41), 'res', False)
        # Obtaining the member 'tzname' of a type (line 593)
        tzname_310467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 41), res_310466, 'tzname')
        # Processing the call keyword arguments (line 593)
        kwargs_310468 = {}
        # Getting the type of 'tzinfos' (line 593)
        tzinfos_310464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 29), 'tzinfos', False)
        # Obtaining the member 'get' of a type (line 593)
        get_310465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 29), tzinfos_310464, 'get')
        # Calling get(args, kwargs) (line 593)
        get_call_result_310469 = invoke(stypy.reporting.localization.Localization(__file__, 593, 29), get_310465, *[tzname_310467], **kwargs_310468)
        
        # Assigning a type to the variable 'tzdata' (line 593)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 20), 'tzdata', get_call_result_310469)
        # SSA join for if statement (line 590)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to isinstance(...): (line 595)
        # Processing the call arguments (line 595)
        # Getting the type of 'tzdata' (line 595)
        tzdata_310471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 30), 'tzdata', False)
        # Getting the type of 'datetime' (line 595)
        datetime_310472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 38), 'datetime', False)
        # Obtaining the member 'tzinfo' of a type (line 595)
        tzinfo_310473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 595, 38), datetime_310472, 'tzinfo')
        # Processing the call keyword arguments (line 595)
        kwargs_310474 = {}
        # Getting the type of 'isinstance' (line 595)
        isinstance_310470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 19), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 595)
        isinstance_call_result_310475 = invoke(stypy.reporting.localization.Localization(__file__, 595, 19), isinstance_310470, *[tzdata_310471, tzinfo_310473], **kwargs_310474)
        
        # Testing the type of an if condition (line 595)
        if_condition_310476 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 595, 16), isinstance_call_result_310475)
        # Assigning a type to the variable 'if_condition_310476' (line 595)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 595, 16), 'if_condition_310476', if_condition_310476)
        # SSA begins for if statement (line 595)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 596):
        
        # Assigning a Name to a Name (line 596):
        # Getting the type of 'tzdata' (line 596)
        tzdata_310477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 29), 'tzdata')
        # Assigning a type to the variable 'tzinfo' (line 596)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 596, 20), 'tzinfo', tzdata_310477)
        # SSA branch for the else part of an if statement (line 595)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to isinstance(...): (line 597)
        # Processing the call arguments (line 597)
        # Getting the type of 'tzdata' (line 597)
        tzdata_310479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 32), 'tzdata', False)
        # Getting the type of 'text_type' (line 597)
        text_type_310480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 40), 'text_type', False)
        # Processing the call keyword arguments (line 597)
        kwargs_310481 = {}
        # Getting the type of 'isinstance' (line 597)
        isinstance_310478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 21), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 597)
        isinstance_call_result_310482 = invoke(stypy.reporting.localization.Localization(__file__, 597, 21), isinstance_310478, *[tzdata_310479, text_type_310480], **kwargs_310481)
        
        # Testing the type of an if condition (line 597)
        if_condition_310483 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 597, 21), isinstance_call_result_310482)
        # Assigning a type to the variable 'if_condition_310483' (line 597)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 597, 21), 'if_condition_310483', if_condition_310483)
        # SSA begins for if statement (line 597)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 598):
        
        # Assigning a Call to a Name (line 598):
        
        # Call to tzstr(...): (line 598)
        # Processing the call arguments (line 598)
        # Getting the type of 'tzdata' (line 598)
        tzdata_310486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 38), 'tzdata', False)
        # Processing the call keyword arguments (line 598)
        kwargs_310487 = {}
        # Getting the type of 'tz' (line 598)
        tz_310484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 29), 'tz', False)
        # Obtaining the member 'tzstr' of a type (line 598)
        tzstr_310485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 29), tz_310484, 'tzstr')
        # Calling tzstr(args, kwargs) (line 598)
        tzstr_call_result_310488 = invoke(stypy.reporting.localization.Localization(__file__, 598, 29), tzstr_310485, *[tzdata_310486], **kwargs_310487)
        
        # Assigning a type to the variable 'tzinfo' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 20), 'tzinfo', tzstr_call_result_310488)
        # SSA branch for the else part of an if statement (line 597)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to isinstance(...): (line 599)
        # Processing the call arguments (line 599)
        # Getting the type of 'tzdata' (line 599)
        tzdata_310490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 32), 'tzdata', False)
        # Getting the type of 'integer_types' (line 599)
        integer_types_310491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 40), 'integer_types', False)
        # Processing the call keyword arguments (line 599)
        kwargs_310492 = {}
        # Getting the type of 'isinstance' (line 599)
        isinstance_310489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 21), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 599)
        isinstance_call_result_310493 = invoke(stypy.reporting.localization.Localization(__file__, 599, 21), isinstance_310489, *[tzdata_310490, integer_types_310491], **kwargs_310492)
        
        # Testing the type of an if condition (line 599)
        if_condition_310494 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 599, 21), isinstance_call_result_310493)
        # Assigning a type to the variable 'if_condition_310494' (line 599)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 599, 21), 'if_condition_310494', if_condition_310494)
        # SSA begins for if statement (line 599)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 600):
        
        # Assigning a Call to a Name (line 600):
        
        # Call to tzoffset(...): (line 600)
        # Processing the call arguments (line 600)
        # Getting the type of 'res' (line 600)
        res_310497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 41), 'res', False)
        # Obtaining the member 'tzname' of a type (line 600)
        tzname_310498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 600, 41), res_310497, 'tzname')
        # Getting the type of 'tzdata' (line 600)
        tzdata_310499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 53), 'tzdata', False)
        # Processing the call keyword arguments (line 600)
        kwargs_310500 = {}
        # Getting the type of 'tz' (line 600)
        tz_310495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 29), 'tz', False)
        # Obtaining the member 'tzoffset' of a type (line 600)
        tzoffset_310496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 600, 29), tz_310495, 'tzoffset')
        # Calling tzoffset(args, kwargs) (line 600)
        tzoffset_call_result_310501 = invoke(stypy.reporting.localization.Localization(__file__, 600, 29), tzoffset_310496, *[tzname_310498, tzdata_310499], **kwargs_310500)
        
        # Assigning a type to the variable 'tzinfo' (line 600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 600, 20), 'tzinfo', tzoffset_call_result_310501)
        # SSA branch for the else part of an if statement (line 599)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 602)
        # Processing the call arguments (line 602)
        unicode_310503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 37), 'unicode', u'Offset must be tzinfo subclass, tz string, or int offset.')
        # Processing the call keyword arguments (line 602)
        kwargs_310504 = {}
        # Getting the type of 'ValueError' (line 602)
        ValueError_310502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 26), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 602)
        ValueError_call_result_310505 = invoke(stypy.reporting.localization.Localization(__file__, 602, 26), ValueError_310502, *[unicode_310503], **kwargs_310504)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 602, 20), ValueError_call_result_310505, 'raise parameter', BaseException)
        # SSA join for if statement (line 599)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 597)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 595)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 604):
        
        # Assigning a Call to a Name (line 604):
        
        # Call to replace(...): (line 604)
        # Processing the call keyword arguments (line 604)
        # Getting the type of 'tzinfo' (line 604)
        tzinfo_310508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 41), 'tzinfo', False)
        keyword_310509 = tzinfo_310508
        kwargs_310510 = {'tzinfo': keyword_310509}
        # Getting the type of 'ret' (line 604)
        ret_310506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 22), 'ret', False)
        # Obtaining the member 'replace' of a type (line 604)
        replace_310507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 22), ret_310506, 'replace')
        # Calling replace(args, kwargs) (line 604)
        replace_call_result_310511 = invoke(stypy.reporting.localization.Localization(__file__, 604, 22), replace_310507, *[], **kwargs_310510)
        
        # Assigning a type to the variable 'ret' (line 604)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 604, 16), 'ret', replace_call_result_310511)
        # SSA branch for the else part of an if statement (line 587)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        # Getting the type of 'res' (line 605)
        res_310512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 17), 'res')
        # Obtaining the member 'tzname' of a type (line 605)
        tzname_310513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 17), res_310512, 'tzname')
        
        # Getting the type of 'res' (line 605)
        res_310514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 32), 'res')
        # Obtaining the member 'tzname' of a type (line 605)
        tzname_310515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 32), res_310514, 'tzname')
        # Getting the type of 'time' (line 605)
        time_310516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 46), 'time')
        # Obtaining the member 'tzname' of a type (line 605)
        tzname_310517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 46), time_310516, 'tzname')
        # Applying the binary operator 'in' (line 605)
        result_contains_310518 = python_operator(stypy.reporting.localization.Localization(__file__, 605, 32), 'in', tzname_310515, tzname_310517)
        
        # Applying the binary operator 'and' (line 605)
        result_and_keyword_310519 = python_operator(stypy.reporting.localization.Localization(__file__, 605, 17), 'and', tzname_310513, result_contains_310518)
        
        # Testing the type of an if condition (line 605)
        if_condition_310520 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 605, 17), result_and_keyword_310519)
        # Assigning a type to the variable 'if_condition_310520' (line 605)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 17), 'if_condition_310520', if_condition_310520)
        # SSA begins for if statement (line 605)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 606):
        
        # Assigning a Call to a Name (line 606):
        
        # Call to replace(...): (line 606)
        # Processing the call keyword arguments (line 606)
        
        # Call to tzlocal(...): (line 606)
        # Processing the call keyword arguments (line 606)
        kwargs_310525 = {}
        # Getting the type of 'tz' (line 606)
        tz_310523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 41), 'tz', False)
        # Obtaining the member 'tzlocal' of a type (line 606)
        tzlocal_310524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 41), tz_310523, 'tzlocal')
        # Calling tzlocal(args, kwargs) (line 606)
        tzlocal_call_result_310526 = invoke(stypy.reporting.localization.Localization(__file__, 606, 41), tzlocal_310524, *[], **kwargs_310525)
        
        keyword_310527 = tzlocal_call_result_310526
        kwargs_310528 = {'tzinfo': keyword_310527}
        # Getting the type of 'ret' (line 606)
        ret_310521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 22), 'ret', False)
        # Obtaining the member 'replace' of a type (line 606)
        replace_310522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 22), ret_310521, 'replace')
        # Calling replace(args, kwargs) (line 606)
        replace_call_result_310529 = invoke(stypy.reporting.localization.Localization(__file__, 606, 22), replace_310522, *[], **kwargs_310528)
        
        # Assigning a type to the variable 'ret' (line 606)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 16), 'ret', replace_call_result_310529)
        # SSA branch for the else part of an if statement (line 605)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'res' (line 607)
        res_310530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 17), 'res')
        # Obtaining the member 'tzoffset' of a type (line 607)
        tzoffset_310531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 17), res_310530, 'tzoffset')
        int_310532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 607, 33), 'int')
        # Applying the binary operator '==' (line 607)
        result_eq_310533 = python_operator(stypy.reporting.localization.Localization(__file__, 607, 17), '==', tzoffset_310531, int_310532)
        
        # Testing the type of an if condition (line 607)
        if_condition_310534 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 607, 17), result_eq_310533)
        # Assigning a type to the variable 'if_condition_310534' (line 607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 17), 'if_condition_310534', if_condition_310534)
        # SSA begins for if statement (line 607)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 608):
        
        # Assigning a Call to a Name (line 608):
        
        # Call to replace(...): (line 608)
        # Processing the call keyword arguments (line 608)
        
        # Call to tzutc(...): (line 608)
        # Processing the call keyword arguments (line 608)
        kwargs_310539 = {}
        # Getting the type of 'tz' (line 608)
        tz_310537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 41), 'tz', False)
        # Obtaining the member 'tzutc' of a type (line 608)
        tzutc_310538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 608, 41), tz_310537, 'tzutc')
        # Calling tzutc(args, kwargs) (line 608)
        tzutc_call_result_310540 = invoke(stypy.reporting.localization.Localization(__file__, 608, 41), tzutc_310538, *[], **kwargs_310539)
        
        keyword_310541 = tzutc_call_result_310540
        kwargs_310542 = {'tzinfo': keyword_310541}
        # Getting the type of 'ret' (line 608)
        ret_310535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 22), 'ret', False)
        # Obtaining the member 'replace' of a type (line 608)
        replace_310536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 608, 22), ret_310535, 'replace')
        # Calling replace(args, kwargs) (line 608)
        replace_call_result_310543 = invoke(stypy.reporting.localization.Localization(__file__, 608, 22), replace_310536, *[], **kwargs_310542)
        
        # Assigning a type to the variable 'ret' (line 608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 608, 16), 'ret', replace_call_result_310543)
        # SSA branch for the else part of an if statement (line 607)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'res' (line 609)
        res_310544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 17), 'res')
        # Obtaining the member 'tzoffset' of a type (line 609)
        tzoffset_310545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 609, 17), res_310544, 'tzoffset')
        # Testing the type of an if condition (line 609)
        if_condition_310546 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 609, 17), tzoffset_310545)
        # Assigning a type to the variable 'if_condition_310546' (line 609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 609, 17), 'if_condition_310546', if_condition_310546)
        # SSA begins for if statement (line 609)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 610):
        
        # Assigning a Call to a Name (line 610):
        
        # Call to replace(...): (line 610)
        # Processing the call keyword arguments (line 610)
        
        # Call to tzoffset(...): (line 610)
        # Processing the call arguments (line 610)
        # Getting the type of 'res' (line 610)
        res_310551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 53), 'res', False)
        # Obtaining the member 'tzname' of a type (line 610)
        tzname_310552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 53), res_310551, 'tzname')
        # Getting the type of 'res' (line 610)
        res_310553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 65), 'res', False)
        # Obtaining the member 'tzoffset' of a type (line 610)
        tzoffset_310554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 65), res_310553, 'tzoffset')
        # Processing the call keyword arguments (line 610)
        kwargs_310555 = {}
        # Getting the type of 'tz' (line 610)
        tz_310549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 41), 'tz', False)
        # Obtaining the member 'tzoffset' of a type (line 610)
        tzoffset_310550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 41), tz_310549, 'tzoffset')
        # Calling tzoffset(args, kwargs) (line 610)
        tzoffset_call_result_310556 = invoke(stypy.reporting.localization.Localization(__file__, 610, 41), tzoffset_310550, *[tzname_310552, tzoffset_310554], **kwargs_310555)
        
        keyword_310557 = tzoffset_call_result_310556
        kwargs_310558 = {'tzinfo': keyword_310557}
        # Getting the type of 'ret' (line 610)
        ret_310547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 22), 'ret', False)
        # Obtaining the member 'replace' of a type (line 610)
        replace_310548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 22), ret_310547, 'replace')
        # Calling replace(args, kwargs) (line 610)
        replace_call_result_310559 = invoke(stypy.reporting.localization.Localization(__file__, 610, 22), replace_310548, *[], **kwargs_310558)
        
        # Assigning a type to the variable 'ret' (line 610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 610, 16), 'ret', replace_call_result_310559)
        # SSA join for if statement (line 609)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 607)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 605)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 587)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 586)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to get(...): (line 612)
        # Processing the call arguments (line 612)
        unicode_310562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, 22), 'unicode', u'fuzzy_with_tokens')
        # Getting the type of 'False' (line 612)
        False_310563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 43), 'False', False)
        # Processing the call keyword arguments (line 612)
        kwargs_310564 = {}
        # Getting the type of 'kwargs' (line 612)
        kwargs_310560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 11), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 612)
        get_310561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 11), kwargs_310560, 'get')
        # Calling get(args, kwargs) (line 612)
        get_call_result_310565 = invoke(stypy.reporting.localization.Localization(__file__, 612, 11), get_310561, *[unicode_310562, False_310563], **kwargs_310564)
        
        # Testing the type of an if condition (line 612)
        if_condition_310566 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 612, 8), get_call_result_310565)
        # Assigning a type to the variable 'if_condition_310566' (line 612)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 612, 8), 'if_condition_310566', if_condition_310566)
        # SSA begins for if statement (line 612)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 613)
        tuple_310567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 613, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 613)
        # Adding element type (line 613)
        # Getting the type of 'ret' (line 613)
        ret_310568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 19), 'ret')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 613, 19), tuple_310567, ret_310568)
        # Adding element type (line 613)
        # Getting the type of 'skipped_tokens' (line 613)
        skipped_tokens_310569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 24), 'skipped_tokens')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 613, 19), tuple_310567, skipped_tokens_310569)
        
        # Assigning a type to the variable 'stypy_return_type' (line 613)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 613, 12), 'stypy_return_type', tuple_310567)
        # SSA branch for the else part of an if statement (line 612)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'ret' (line 615)
        ret_310570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 19), 'ret')
        # Assigning a type to the variable 'stypy_return_type' (line 615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 615, 12), 'stypy_return_type', ret_310570)
        # SSA join for if statement (line 612)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'parse(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'parse' in the type store
        # Getting the type of 'stypy_return_type' (line 489)
        stypy_return_type_310571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_310571)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'parse'
        return stypy_return_type_310571

    # Declaration of the '_result' class
    # Getting the type of '_resultbase' (line 617)
    _resultbase_310572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 18), '_resultbase')

    class _result(_resultbase_310572, ):
        
        # Assigning a List to a Name (line 618):
        
        # Assigning a List to a Name (line 618):
        
        # Obtaining an instance of the builtin type 'list' (line 618)
        list_310573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 618, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 618)
        # Adding element type (line 618)
        unicode_310574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 618, 21), 'unicode', u'year')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 618, 20), list_310573, unicode_310574)
        # Adding element type (line 618)
        unicode_310575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 618, 29), 'unicode', u'month')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 618, 20), list_310573, unicode_310575)
        # Adding element type (line 618)
        unicode_310576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 618, 38), 'unicode', u'day')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 618, 20), list_310573, unicode_310576)
        # Adding element type (line 618)
        unicode_310577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 618, 45), 'unicode', u'weekday')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 618, 20), list_310573, unicode_310577)
        # Adding element type (line 618)
        unicode_310578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 21), 'unicode', u'hour')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 618, 20), list_310573, unicode_310578)
        # Adding element type (line 618)
        unicode_310579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 29), 'unicode', u'minute')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 618, 20), list_310573, unicode_310579)
        # Adding element type (line 618)
        unicode_310580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 39), 'unicode', u'second')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 618, 20), list_310573, unicode_310580)
        # Adding element type (line 618)
        unicode_310581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 49), 'unicode', u'microsecond')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 618, 20), list_310573, unicode_310581)
        # Adding element type (line 618)
        unicode_310582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 620, 21), 'unicode', u'tzname')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 618, 20), list_310573, unicode_310582)
        # Adding element type (line 618)
        unicode_310583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 620, 31), 'unicode', u'tzoffset')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 618, 20), list_310573, unicode_310583)
        # Adding element type (line 618)
        unicode_310584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 620, 43), 'unicode', u'ampm')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 618, 20), list_310573, unicode_310584)
        
        # Assigning a type to the variable '__slots__' (line 618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 618, 8), '__slots__', list_310573)
    
    # Assigning a type to the variable '_result' (line 617)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 4), '_result', _result)

    @norecursion
    def _parse(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 622)
        None_310585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 39), 'None')
        # Getting the type of 'None' (line 622)
        None_310586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 55), 'None')
        # Getting the type of 'False' (line 622)
        False_310587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 67), 'False')
        # Getting the type of 'False' (line 623)
        False_310588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 33), 'False')
        defaults = [None_310585, None_310586, False_310587, False_310588]
        # Create a new context for function '_parse'
        module_type_store = module_type_store.open_function_context('_parse', 622, 4, False)
        # Assigning a type to the variable 'self' (line 623)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 623, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        parser._parse.__dict__.__setitem__('stypy_localization', localization)
        parser._parse.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        parser._parse.__dict__.__setitem__('stypy_type_store', module_type_store)
        parser._parse.__dict__.__setitem__('stypy_function_name', 'parser._parse')
        parser._parse.__dict__.__setitem__('stypy_param_names_list', ['timestr', 'dayfirst', 'yearfirst', 'fuzzy', 'fuzzy_with_tokens'])
        parser._parse.__dict__.__setitem__('stypy_varargs_param_name', None)
        parser._parse.__dict__.__setitem__('stypy_kwargs_param_name', None)
        parser._parse.__dict__.__setitem__('stypy_call_defaults', defaults)
        parser._parse.__dict__.__setitem__('stypy_call_varargs', varargs)
        parser._parse.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        parser._parse.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'parser._parse', ['timestr', 'dayfirst', 'yearfirst', 'fuzzy', 'fuzzy_with_tokens'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_parse', localization, ['timestr', 'dayfirst', 'yearfirst', 'fuzzy', 'fuzzy_with_tokens'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_parse(...)' code ##################

        unicode_310589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 662, (-1)), 'unicode', u'\n        Private method which performs the heavy lifting of parsing, called from\n        ``parse()``, which passes on its ``kwargs`` to this function.\n\n        :param timestr:\n            The string to parse.\n\n        :param dayfirst:\n            Whether to interpret the first value in an ambiguous 3-integer date\n            (e.g. 01/05/09) as the day (``True``) or month (``False``). If\n            ``yearfirst`` is set to ``True``, this distinguishes between YDM\n            and YMD. If set to ``None``, this value is retrieved from the\n            current :class:`parserinfo` object (which itself defaults to\n            ``False``).\n\n        :param yearfirst:\n            Whether to interpret the first value in an ambiguous 3-integer date\n            (e.g. 01/05/09) as the year. If ``True``, the first number is taken\n            to be the year, otherwise the last number is taken to be the year.\n            If this is set to ``None``, the value is retrieved from the current\n            :class:`parserinfo` object (which itself defaults to ``False``).\n\n        :param fuzzy:\n            Whether to allow fuzzy parsing, allowing for string like "Today is\n            January 1, 2047 at 8:21:00AM".\n\n        :param fuzzy_with_tokens:\n            If ``True``, ``fuzzy`` is automatically set to True, and the parser\n            will return a tuple where the first element is the parsed\n            :class:`datetime.datetime` datetimestamp and the second element is\n            a tuple containing the portions of the string which were ignored:\n\n            .. doctest::\n\n                >>> from dateutil.parser import parse\n                >>> parse("Today is January 1, 2047 at 8:21:00AM", fuzzy_with_tokens=True)\n                (datetime.datetime(2047, 1, 1, 8, 21), (u\'Today is \', u\' \', u\'at \'))\n\n        ')
        
        # Getting the type of 'fuzzy_with_tokens' (line 663)
        fuzzy_with_tokens_310590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 11), 'fuzzy_with_tokens')
        # Testing the type of an if condition (line 663)
        if_condition_310591 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 663, 8), fuzzy_with_tokens_310590)
        # Assigning a type to the variable 'if_condition_310591' (line 663)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 663, 8), 'if_condition_310591', if_condition_310591)
        # SSA begins for if statement (line 663)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 664):
        
        # Assigning a Name to a Name (line 664):
        # Getting the type of 'True' (line 664)
        True_310592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 20), 'True')
        # Assigning a type to the variable 'fuzzy' (line 664)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 664, 12), 'fuzzy', True_310592)
        # SSA join for if statement (line 663)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 666):
        
        # Assigning a Attribute to a Name (line 666):
        # Getting the type of 'self' (line 666)
        self_310593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 15), 'self')
        # Obtaining the member 'info' of a type (line 666)
        info_310594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 15), self_310593, 'info')
        # Assigning a type to the variable 'info' (line 666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 8), 'info', info_310594)
        
        # Type idiom detected: calculating its left and rigth part (line 668)
        # Getting the type of 'dayfirst' (line 668)
        dayfirst_310595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 11), 'dayfirst')
        # Getting the type of 'None' (line 668)
        None_310596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 23), 'None')
        
        (may_be_310597, more_types_in_union_310598) = may_be_none(dayfirst_310595, None_310596)

        if may_be_310597:

            if more_types_in_union_310598:
                # Runtime conditional SSA (line 668)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 669):
            
            # Assigning a Attribute to a Name (line 669):
            # Getting the type of 'info' (line 669)
            info_310599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 23), 'info')
            # Obtaining the member 'dayfirst' of a type (line 669)
            dayfirst_310600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 23), info_310599, 'dayfirst')
            # Assigning a type to the variable 'dayfirst' (line 669)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 669, 12), 'dayfirst', dayfirst_310600)

            if more_types_in_union_310598:
                # SSA join for if statement (line 668)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 671)
        # Getting the type of 'yearfirst' (line 671)
        yearfirst_310601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 11), 'yearfirst')
        # Getting the type of 'None' (line 671)
        None_310602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 24), 'None')
        
        (may_be_310603, more_types_in_union_310604) = may_be_none(yearfirst_310601, None_310602)

        if may_be_310603:

            if more_types_in_union_310604:
                # Runtime conditional SSA (line 671)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 672):
            
            # Assigning a Attribute to a Name (line 672):
            # Getting the type of 'info' (line 672)
            info_310605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 24), 'info')
            # Obtaining the member 'yearfirst' of a type (line 672)
            yearfirst_310606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 24), info_310605, 'yearfirst')
            # Assigning a type to the variable 'yearfirst' (line 672)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 672, 12), 'yearfirst', yearfirst_310606)

            if more_types_in_union_310604:
                # SSA join for if statement (line 671)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 674):
        
        # Assigning a Call to a Name (line 674):
        
        # Call to _result(...): (line 674)
        # Processing the call keyword arguments (line 674)
        kwargs_310609 = {}
        # Getting the type of 'self' (line 674)
        self_310607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 14), 'self', False)
        # Obtaining the member '_result' of a type (line 674)
        _result_310608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 674, 14), self_310607, '_result')
        # Calling _result(args, kwargs) (line 674)
        _result_call_result_310610 = invoke(stypy.reporting.localization.Localization(__file__, 674, 14), _result_310608, *[], **kwargs_310609)
        
        # Assigning a type to the variable 'res' (line 674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 674, 8), 'res', _result_call_result_310610)
        
        # Assigning a Call to a Name (line 675):
        
        # Assigning a Call to a Name (line 675):
        
        # Call to split(...): (line 675)
        # Processing the call arguments (line 675)
        # Getting the type of 'timestr' (line 675)
        timestr_310613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 27), 'timestr', False)
        # Processing the call keyword arguments (line 675)
        kwargs_310614 = {}
        # Getting the type of '_timelex' (line 675)
        _timelex_310611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 12), '_timelex', False)
        # Obtaining the member 'split' of a type (line 675)
        split_310612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 12), _timelex_310611, 'split')
        # Calling split(args, kwargs) (line 675)
        split_call_result_310615 = invoke(stypy.reporting.localization.Localization(__file__, 675, 12), split_310612, *[timestr_310613], **kwargs_310614)
        
        # Assigning a type to the variable 'l' (line 675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 675, 8), 'l', split_call_result_310615)
        
        # Assigning a Num to a Name (line 679):
        
        # Assigning a Num to a Name (line 679):
        int_310616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 679, 31), 'int')
        # Assigning a type to the variable 'last_skipped_token_i' (line 679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 679, 8), 'last_skipped_token_i', int_310616)
        
        # Assigning a Call to a Name (line 680):
        
        # Assigning a Call to a Name (line 680):
        
        # Call to list(...): (line 680)
        # Processing the call keyword arguments (line 680)
        kwargs_310618 = {}
        # Getting the type of 'list' (line 680)
        list_310617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 25), 'list', False)
        # Calling list(args, kwargs) (line 680)
        list_call_result_310619 = invoke(stypy.reporting.localization.Localization(__file__, 680, 25), list_310617, *[], **kwargs_310618)
        
        # Assigning a type to the variable 'skipped_tokens' (line 680)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 680, 8), 'skipped_tokens', list_call_result_310619)
        
        
        # SSA begins for try-except statement (line 682)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 684):
        
        # Assigning a Call to a Name (line 684):
        
        # Call to _ymd(...): (line 684)
        # Processing the call arguments (line 684)
        # Getting the type of 'timestr' (line 684)
        timestr_310621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 23), 'timestr', False)
        # Processing the call keyword arguments (line 684)
        kwargs_310622 = {}
        # Getting the type of '_ymd' (line 684)
        _ymd_310620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 18), '_ymd', False)
        # Calling _ymd(args, kwargs) (line 684)
        _ymd_call_result_310623 = invoke(stypy.reporting.localization.Localization(__file__, 684, 18), _ymd_310620, *[timestr_310621], **kwargs_310622)
        
        # Assigning a type to the variable 'ymd' (line 684)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 684, 12), 'ymd', _ymd_call_result_310623)
        
        # Assigning a Num to a Name (line 687):
        
        # Assigning a Num to a Name (line 687):
        int_310624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 22), 'int')
        # Assigning a type to the variable 'mstridx' (line 687)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 687, 12), 'mstridx', int_310624)
        
        # Assigning a Call to a Name (line 689):
        
        # Assigning a Call to a Name (line 689):
        
        # Call to len(...): (line 689)
        # Processing the call arguments (line 689)
        # Getting the type of 'l' (line 689)
        l_310626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 24), 'l', False)
        # Processing the call keyword arguments (line 689)
        kwargs_310627 = {}
        # Getting the type of 'len' (line 689)
        len_310625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 20), 'len', False)
        # Calling len(args, kwargs) (line 689)
        len_call_result_310628 = invoke(stypy.reporting.localization.Localization(__file__, 689, 20), len_310625, *[l_310626], **kwargs_310627)
        
        # Assigning a type to the variable 'len_l' (line 689)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 689, 12), 'len_l', len_call_result_310628)
        
        # Assigning a Num to a Name (line 690):
        
        # Assigning a Num to a Name (line 690):
        int_310629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 690, 16), 'int')
        # Assigning a type to the variable 'i' (line 690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 690, 12), 'i', int_310629)
        
        
        # Getting the type of 'i' (line 691)
        i_310630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 18), 'i')
        # Getting the type of 'len_l' (line 691)
        len_l_310631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 22), 'len_l')
        # Applying the binary operator '<' (line 691)
        result_lt_310632 = python_operator(stypy.reporting.localization.Localization(__file__, 691, 18), '<', i_310630, len_l_310631)
        
        # Testing the type of an if condition (line 691)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 691, 12), result_lt_310632)
        # SSA begins for while statement (line 691)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        
        # SSA begins for try-except statement (line 694)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Subscript to a Name (line 695):
        
        # Assigning a Subscript to a Name (line 695):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 695)
        i_310633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 35), 'i')
        # Getting the type of 'l' (line 695)
        l_310634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 33), 'l')
        # Obtaining the member '__getitem__' of a type (line 695)
        getitem___310635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 695, 33), l_310634, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 695)
        subscript_call_result_310636 = invoke(stypy.reporting.localization.Localization(__file__, 695, 33), getitem___310635, i_310633)
        
        # Assigning a type to the variable 'value_repr' (line 695)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 695, 20), 'value_repr', subscript_call_result_310636)
        
        # Assigning a Call to a Name (line 696):
        
        # Assigning a Call to a Name (line 696):
        
        # Call to float(...): (line 696)
        # Processing the call arguments (line 696)
        # Getting the type of 'value_repr' (line 696)
        value_repr_310638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 34), 'value_repr', False)
        # Processing the call keyword arguments (line 696)
        kwargs_310639 = {}
        # Getting the type of 'float' (line 696)
        float_310637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 28), 'float', False)
        # Calling float(args, kwargs) (line 696)
        float_call_result_310640 = invoke(stypy.reporting.localization.Localization(__file__, 696, 28), float_310637, *[value_repr_310638], **kwargs_310639)
        
        # Assigning a type to the variable 'value' (line 696)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 696, 20), 'value', float_call_result_310640)
        # SSA branch for the except part of a try statement (line 694)
        # SSA branch for the except 'ValueError' branch of a try statement (line 694)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Name to a Name (line 698):
        
        # Assigning a Name to a Name (line 698):
        # Getting the type of 'None' (line 698)
        None_310641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 28), 'None')
        # Assigning a type to the variable 'value' (line 698)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 20), 'value', None_310641)
        # SSA join for try-except statement (line 694)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 700)
        # Getting the type of 'value' (line 700)
        value_310642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 16), 'value')
        # Getting the type of 'None' (line 700)
        None_310643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 32), 'None')
        
        (may_be_310644, more_types_in_union_310645) = may_not_be_none(value_310642, None_310643)

        if may_be_310644:

            if more_types_in_union_310645:
                # Runtime conditional SSA (line 700)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 702):
            
            # Assigning a Call to a Name (line 702):
            
            # Call to len(...): (line 702)
            # Processing the call arguments (line 702)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 702)
            i_310647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 35), 'i', False)
            # Getting the type of 'l' (line 702)
            l_310648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 33), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 702)
            getitem___310649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 702, 33), l_310648, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 702)
            subscript_call_result_310650 = invoke(stypy.reporting.localization.Localization(__file__, 702, 33), getitem___310649, i_310647)
            
            # Processing the call keyword arguments (line 702)
            kwargs_310651 = {}
            # Getting the type of 'len' (line 702)
            len_310646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 29), 'len', False)
            # Calling len(args, kwargs) (line 702)
            len_call_result_310652 = invoke(stypy.reporting.localization.Localization(__file__, 702, 29), len_310646, *[subscript_call_result_310650], **kwargs_310651)
            
            # Assigning a type to the variable 'len_li' (line 702)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 702, 20), 'len_li', len_call_result_310652)
            
            # Getting the type of 'i' (line 703)
            i_310653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 20), 'i')
            int_310654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 703, 25), 'int')
            # Applying the binary operator '+=' (line 703)
            result_iadd_310655 = python_operator(stypy.reporting.localization.Localization(__file__, 703, 20), '+=', i_310653, int_310654)
            # Assigning a type to the variable 'i' (line 703)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 20), 'i', result_iadd_310655)
            
            
            
            # Evaluating a boolean operation
            
            
            # Call to len(...): (line 705)
            # Processing the call arguments (line 705)
            # Getting the type of 'ymd' (line 705)
            ymd_310657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 28), 'ymd', False)
            # Processing the call keyword arguments (line 705)
            kwargs_310658 = {}
            # Getting the type of 'len' (line 705)
            len_310656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 24), 'len', False)
            # Calling len(args, kwargs) (line 705)
            len_call_result_310659 = invoke(stypy.reporting.localization.Localization(__file__, 705, 24), len_310656, *[ymd_310657], **kwargs_310658)
            
            int_310660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 705, 36), 'int')
            # Applying the binary operator '==' (line 705)
            result_eq_310661 = python_operator(stypy.reporting.localization.Localization(__file__, 705, 24), '==', len_call_result_310659, int_310660)
            
            
            # Getting the type of 'len_li' (line 705)
            len_li_310662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 42), 'len_li')
            
            # Obtaining an instance of the builtin type 'tuple' (line 705)
            tuple_310663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 705, 53), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 705)
            # Adding element type (line 705)
            int_310664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 705, 53), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 705, 53), tuple_310663, int_310664)
            # Adding element type (line 705)
            int_310665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 705, 56), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 705, 53), tuple_310663, int_310665)
            
            # Applying the binary operator 'in' (line 705)
            result_contains_310666 = python_operator(stypy.reporting.localization.Localization(__file__, 705, 42), 'in', len_li_310662, tuple_310663)
            
            # Applying the binary operator 'and' (line 705)
            result_and_keyword_310667 = python_operator(stypy.reporting.localization.Localization(__file__, 705, 24), 'and', result_eq_310661, result_contains_310666)
            
            # Getting the type of 'res' (line 706)
            res_310668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 28), 'res')
            # Obtaining the member 'hour' of a type (line 706)
            hour_310669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 706, 28), res_310668, 'hour')
            # Getting the type of 'None' (line 706)
            None_310670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 40), 'None')
            # Applying the binary operator 'is' (line 706)
            result_is__310671 = python_operator(stypy.reporting.localization.Localization(__file__, 706, 28), 'is', hour_310669, None_310670)
            
            # Applying the binary operator 'and' (line 705)
            result_and_keyword_310672 = python_operator(stypy.reporting.localization.Localization(__file__, 705, 24), 'and', result_and_keyword_310667, result_is__310671)
            
            # Evaluating a boolean operation
            
            # Getting the type of 'i' (line 706)
            i_310673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 50), 'i')
            # Getting the type of 'len_l' (line 706)
            len_l_310674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 55), 'len_l')
            # Applying the binary operator '>=' (line 706)
            result_ge_310675 = python_operator(stypy.reporting.localization.Localization(__file__, 706, 50), '>=', i_310673, len_l_310674)
            
            
            # Evaluating a boolean operation
            
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 706)
            i_310676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 67), 'i')
            # Getting the type of 'l' (line 706)
            l_310677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 65), 'l')
            # Obtaining the member '__getitem__' of a type (line 706)
            getitem___310678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 706, 65), l_310677, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 706)
            subscript_call_result_310679 = invoke(stypy.reporting.localization.Localization(__file__, 706, 65), getitem___310678, i_310676)
            
            unicode_310680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 706, 73), 'unicode', u':')
            # Applying the binary operator '!=' (line 706)
            result_ne_310681 = python_operator(stypy.reporting.localization.Localization(__file__, 706, 65), '!=', subscript_call_result_310679, unicode_310680)
            
            
            
            # Call to hms(...): (line 707)
            # Processing the call arguments (line 707)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 707)
            i_310684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 61), 'i', False)
            # Getting the type of 'l' (line 707)
            l_310685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 59), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 707)
            getitem___310686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 707, 59), l_310685, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 707)
            subscript_call_result_310687 = invoke(stypy.reporting.localization.Localization(__file__, 707, 59), getitem___310686, i_310684)
            
            # Processing the call keyword arguments (line 707)
            kwargs_310688 = {}
            # Getting the type of 'info' (line 707)
            info_310682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 50), 'info', False)
            # Obtaining the member 'hms' of a type (line 707)
            hms_310683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 707, 50), info_310682, 'hms')
            # Calling hms(args, kwargs) (line 707)
            hms_call_result_310689 = invoke(stypy.reporting.localization.Localization(__file__, 707, 50), hms_310683, *[subscript_call_result_310687], **kwargs_310688)
            
            # Getting the type of 'None' (line 707)
            None_310690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 68), 'None')
            # Applying the binary operator 'is' (line 707)
            result_is__310691 = python_operator(stypy.reporting.localization.Localization(__file__, 707, 50), 'is', hms_call_result_310689, None_310690)
            
            # Applying the binary operator 'and' (line 706)
            result_and_keyword_310692 = python_operator(stypy.reporting.localization.Localization(__file__, 706, 65), 'and', result_ne_310681, result_is__310691)
            
            # Applying the binary operator 'or' (line 706)
            result_or_keyword_310693 = python_operator(stypy.reporting.localization.Localization(__file__, 706, 50), 'or', result_ge_310675, result_and_keyword_310692)
            
            # Applying the binary operator 'and' (line 705)
            result_and_keyword_310694 = python_operator(stypy.reporting.localization.Localization(__file__, 705, 24), 'and', result_and_keyword_310672, result_or_keyword_310693)
            
            # Testing the type of an if condition (line 705)
            if_condition_310695 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 705, 20), result_and_keyword_310694)
            # Assigning a type to the variable 'if_condition_310695' (line 705)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 20), 'if_condition_310695', if_condition_310695)
            # SSA begins for if statement (line 705)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Name (line 709):
            
            # Assigning a Subscript to a Name (line 709):
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 709)
            i_310696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 30), 'i')
            int_310697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 709, 32), 'int')
            # Applying the binary operator '-' (line 709)
            result_sub_310698 = python_operator(stypy.reporting.localization.Localization(__file__, 709, 30), '-', i_310696, int_310697)
            
            # Getting the type of 'l' (line 709)
            l_310699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 28), 'l')
            # Obtaining the member '__getitem__' of a type (line 709)
            getitem___310700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 709, 28), l_310699, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 709)
            subscript_call_result_310701 = invoke(stypy.reporting.localization.Localization(__file__, 709, 28), getitem___310700, result_sub_310698)
            
            # Assigning a type to the variable 's' (line 709)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 709, 24), 's', subscript_call_result_310701)
            
            # Assigning a Call to a Attribute (line 710):
            
            # Assigning a Call to a Attribute (line 710):
            
            # Call to int(...): (line 710)
            # Processing the call arguments (line 710)
            
            # Obtaining the type of the subscript
            int_310703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 42), 'int')
            slice_310704 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 710, 39), None, int_310703, None)
            # Getting the type of 's' (line 710)
            s_310705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 39), 's', False)
            # Obtaining the member '__getitem__' of a type (line 710)
            getitem___310706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 710, 39), s_310705, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 710)
            subscript_call_result_310707 = invoke(stypy.reporting.localization.Localization(__file__, 710, 39), getitem___310706, slice_310704)
            
            # Processing the call keyword arguments (line 710)
            kwargs_310708 = {}
            # Getting the type of 'int' (line 710)
            int_310702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 35), 'int', False)
            # Calling int(args, kwargs) (line 710)
            int_call_result_310709 = invoke(stypy.reporting.localization.Localization(__file__, 710, 35), int_310702, *[subscript_call_result_310707], **kwargs_310708)
            
            # Getting the type of 'res' (line 710)
            res_310710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 24), 'res')
            # Setting the type of the member 'hour' of a type (line 710)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 710, 24), res_310710, 'hour', int_call_result_310709)
            
            
            # Getting the type of 'len_li' (line 712)
            len_li_310711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 27), 'len_li')
            int_310712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 712, 37), 'int')
            # Applying the binary operator '==' (line 712)
            result_eq_310713 = python_operator(stypy.reporting.localization.Localization(__file__, 712, 27), '==', len_li_310711, int_310712)
            
            # Testing the type of an if condition (line 712)
            if_condition_310714 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 712, 24), result_eq_310713)
            # Assigning a type to the variable 'if_condition_310714' (line 712)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 712, 24), 'if_condition_310714', if_condition_310714)
            # SSA begins for if statement (line 712)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 713):
            
            # Assigning a Call to a Attribute (line 713):
            
            # Call to int(...): (line 713)
            # Processing the call arguments (line 713)
            
            # Obtaining the type of the subscript
            int_310716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 713, 47), 'int')
            slice_310717 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 713, 45), int_310716, None, None)
            # Getting the type of 's' (line 713)
            s_310718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 45), 's', False)
            # Obtaining the member '__getitem__' of a type (line 713)
            getitem___310719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 45), s_310718, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 713)
            subscript_call_result_310720 = invoke(stypy.reporting.localization.Localization(__file__, 713, 45), getitem___310719, slice_310717)
            
            # Processing the call keyword arguments (line 713)
            kwargs_310721 = {}
            # Getting the type of 'int' (line 713)
            int_310715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 41), 'int', False)
            # Calling int(args, kwargs) (line 713)
            int_call_result_310722 = invoke(stypy.reporting.localization.Localization(__file__, 713, 41), int_310715, *[subscript_call_result_310720], **kwargs_310721)
            
            # Getting the type of 'res' (line 713)
            res_310723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 28), 'res')
            # Setting the type of the member 'minute' of a type (line 713)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 28), res_310723, 'minute', int_call_result_310722)
            # SSA join for if statement (line 712)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the else part of an if statement (line 705)
            module_type_store.open_ssa_branch('else')
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'len_li' (line 715)
            len_li_310724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 25), 'len_li')
            int_310725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 715, 35), 'int')
            # Applying the binary operator '==' (line 715)
            result_eq_310726 = python_operator(stypy.reporting.localization.Localization(__file__, 715, 25), '==', len_li_310724, int_310725)
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'len_li' (line 715)
            len_li_310727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 41), 'len_li')
            int_310728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 715, 50), 'int')
            # Applying the binary operator '>' (line 715)
            result_gt_310729 = python_operator(stypy.reporting.localization.Localization(__file__, 715, 41), '>', len_li_310727, int_310728)
            
            
            
            # Call to find(...): (line 715)
            # Processing the call arguments (line 715)
            unicode_310737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 715, 68), 'unicode', u'.')
            # Processing the call keyword arguments (line 715)
            kwargs_310738 = {}
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 715)
            i_310730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 58), 'i', False)
            int_310731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 715, 60), 'int')
            # Applying the binary operator '-' (line 715)
            result_sub_310732 = python_operator(stypy.reporting.localization.Localization(__file__, 715, 58), '-', i_310730, int_310731)
            
            # Getting the type of 'l' (line 715)
            l_310733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 56), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 715)
            getitem___310734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 715, 56), l_310733, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 715)
            subscript_call_result_310735 = invoke(stypy.reporting.localization.Localization(__file__, 715, 56), getitem___310734, result_sub_310732)
            
            # Obtaining the member 'find' of a type (line 715)
            find_310736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 715, 56), subscript_call_result_310735, 'find')
            # Calling find(args, kwargs) (line 715)
            find_call_result_310739 = invoke(stypy.reporting.localization.Localization(__file__, 715, 56), find_310736, *[unicode_310737], **kwargs_310738)
            
            int_310740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 715, 76), 'int')
            # Applying the binary operator '==' (line 715)
            result_eq_310741 = python_operator(stypy.reporting.localization.Localization(__file__, 715, 56), '==', find_call_result_310739, int_310740)
            
            # Applying the binary operator 'and' (line 715)
            result_and_keyword_310742 = python_operator(stypy.reporting.localization.Localization(__file__, 715, 41), 'and', result_gt_310729, result_eq_310741)
            
            # Applying the binary operator 'or' (line 715)
            result_or_keyword_310743 = python_operator(stypy.reporting.localization.Localization(__file__, 715, 25), 'or', result_eq_310726, result_and_keyword_310742)
            
            # Testing the type of an if condition (line 715)
            if_condition_310744 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 715, 25), result_or_keyword_310743)
            # Assigning a type to the variable 'if_condition_310744' (line 715)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 715, 25), 'if_condition_310744', if_condition_310744)
            # SSA begins for if statement (line 715)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Name (line 717):
            
            # Assigning a Subscript to a Name (line 717):
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 717)
            i_310745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 30), 'i')
            int_310746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 717, 32), 'int')
            # Applying the binary operator '-' (line 717)
            result_sub_310747 = python_operator(stypy.reporting.localization.Localization(__file__, 717, 30), '-', i_310745, int_310746)
            
            # Getting the type of 'l' (line 717)
            l_310748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 28), 'l')
            # Obtaining the member '__getitem__' of a type (line 717)
            getitem___310749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 717, 28), l_310748, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 717)
            subscript_call_result_310750 = invoke(stypy.reporting.localization.Localization(__file__, 717, 28), getitem___310749, result_sub_310747)
            
            # Assigning a type to the variable 's' (line 717)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 717, 24), 's', subscript_call_result_310750)
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'ymd' (line 719)
            ymd_310751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 31), 'ymd')
            # Applying the 'not' unary operator (line 719)
            result_not__310752 = python_operator(stypy.reporting.localization.Localization(__file__, 719, 27), 'not', ymd_310751)
            
            
            
            # Call to find(...): (line 719)
            # Processing the call arguments (line 719)
            unicode_310760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 51), 'unicode', u'.')
            # Processing the call keyword arguments (line 719)
            kwargs_310761 = {}
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 719)
            i_310753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 41), 'i', False)
            int_310754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 43), 'int')
            # Applying the binary operator '-' (line 719)
            result_sub_310755 = python_operator(stypy.reporting.localization.Localization(__file__, 719, 41), '-', i_310753, int_310754)
            
            # Getting the type of 'l' (line 719)
            l_310756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 39), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 719)
            getitem___310757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 719, 39), l_310756, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 719)
            subscript_call_result_310758 = invoke(stypy.reporting.localization.Localization(__file__, 719, 39), getitem___310757, result_sub_310755)
            
            # Obtaining the member 'find' of a type (line 719)
            find_310759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 719, 39), subscript_call_result_310758, 'find')
            # Calling find(args, kwargs) (line 719)
            find_call_result_310762 = invoke(stypy.reporting.localization.Localization(__file__, 719, 39), find_310759, *[unicode_310760], **kwargs_310761)
            
            int_310763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 59), 'int')
            # Applying the binary operator '==' (line 719)
            result_eq_310764 = python_operator(stypy.reporting.localization.Localization(__file__, 719, 39), '==', find_call_result_310762, int_310763)
            
            # Applying the binary operator 'and' (line 719)
            result_and_keyword_310765 = python_operator(stypy.reporting.localization.Localization(__file__, 719, 27), 'and', result_not__310752, result_eq_310764)
            
            # Testing the type of an if condition (line 719)
            if_condition_310766 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 719, 24), result_and_keyword_310765)
            # Assigning a type to the variable 'if_condition_310766' (line 719)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 24), 'if_condition_310766', if_condition_310766)
            # SSA begins for if statement (line 719)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to append(...): (line 722)
            # Processing the call arguments (line 722)
            
            # Obtaining the type of the subscript
            int_310769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 722, 42), 'int')
            slice_310770 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 722, 39), None, int_310769, None)
            # Getting the type of 's' (line 722)
            s_310771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 39), 's', False)
            # Obtaining the member '__getitem__' of a type (line 722)
            getitem___310772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 39), s_310771, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 722)
            subscript_call_result_310773 = invoke(stypy.reporting.localization.Localization(__file__, 722, 39), getitem___310772, slice_310770)
            
            # Processing the call keyword arguments (line 722)
            kwargs_310774 = {}
            # Getting the type of 'ymd' (line 722)
            ymd_310767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 28), 'ymd', False)
            # Obtaining the member 'append' of a type (line 722)
            append_310768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 28), ymd_310767, 'append')
            # Calling append(args, kwargs) (line 722)
            append_call_result_310775 = invoke(stypy.reporting.localization.Localization(__file__, 722, 28), append_310768, *[subscript_call_result_310773], **kwargs_310774)
            
            
            # Call to append(...): (line 723)
            # Processing the call arguments (line 723)
            
            # Obtaining the type of the subscript
            int_310778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 723, 41), 'int')
            int_310779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 723, 43), 'int')
            slice_310780 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 723, 39), int_310778, int_310779, None)
            # Getting the type of 's' (line 723)
            s_310781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 39), 's', False)
            # Obtaining the member '__getitem__' of a type (line 723)
            getitem___310782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 723, 39), s_310781, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 723)
            subscript_call_result_310783 = invoke(stypy.reporting.localization.Localization(__file__, 723, 39), getitem___310782, slice_310780)
            
            # Processing the call keyword arguments (line 723)
            kwargs_310784 = {}
            # Getting the type of 'ymd' (line 723)
            ymd_310776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 28), 'ymd', False)
            # Obtaining the member 'append' of a type (line 723)
            append_310777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 723, 28), ymd_310776, 'append')
            # Calling append(args, kwargs) (line 723)
            append_call_result_310785 = invoke(stypy.reporting.localization.Localization(__file__, 723, 28), append_310777, *[subscript_call_result_310783], **kwargs_310784)
            
            
            # Call to append(...): (line 724)
            # Processing the call arguments (line 724)
            
            # Obtaining the type of the subscript
            int_310788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 724, 41), 'int')
            slice_310789 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 724, 39), int_310788, None, None)
            # Getting the type of 's' (line 724)
            s_310790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 39), 's', False)
            # Obtaining the member '__getitem__' of a type (line 724)
            getitem___310791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 724, 39), s_310790, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 724)
            subscript_call_result_310792 = invoke(stypy.reporting.localization.Localization(__file__, 724, 39), getitem___310791, slice_310789)
            
            # Processing the call keyword arguments (line 724)
            kwargs_310793 = {}
            # Getting the type of 'ymd' (line 724)
            ymd_310786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 28), 'ymd', False)
            # Obtaining the member 'append' of a type (line 724)
            append_310787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 724, 28), ymd_310786, 'append')
            # Calling append(args, kwargs) (line 724)
            append_call_result_310794 = invoke(stypy.reporting.localization.Localization(__file__, 724, 28), append_310787, *[subscript_call_result_310792], **kwargs_310793)
            
            # SSA branch for the else part of an if statement (line 719)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Attribute (line 727):
            
            # Assigning a Call to a Attribute (line 727):
            
            # Call to int(...): (line 727)
            # Processing the call arguments (line 727)
            
            # Obtaining the type of the subscript
            int_310796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 46), 'int')
            slice_310797 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 727, 43), None, int_310796, None)
            # Getting the type of 's' (line 727)
            s_310798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 43), 's', False)
            # Obtaining the member '__getitem__' of a type (line 727)
            getitem___310799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 43), s_310798, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 727)
            subscript_call_result_310800 = invoke(stypy.reporting.localization.Localization(__file__, 727, 43), getitem___310799, slice_310797)
            
            # Processing the call keyword arguments (line 727)
            kwargs_310801 = {}
            # Getting the type of 'int' (line 727)
            int_310795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 39), 'int', False)
            # Calling int(args, kwargs) (line 727)
            int_call_result_310802 = invoke(stypy.reporting.localization.Localization(__file__, 727, 39), int_310795, *[subscript_call_result_310800], **kwargs_310801)
            
            # Getting the type of 'res' (line 727)
            res_310803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 28), 'res')
            # Setting the type of the member 'hour' of a type (line 727)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 28), res_310803, 'hour', int_call_result_310802)
            
            # Assigning a Call to a Attribute (line 728):
            
            # Assigning a Call to a Attribute (line 728):
            
            # Call to int(...): (line 728)
            # Processing the call arguments (line 728)
            
            # Obtaining the type of the subscript
            int_310805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 728, 47), 'int')
            int_310806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 728, 49), 'int')
            slice_310807 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 728, 45), int_310805, int_310806, None)
            # Getting the type of 's' (line 728)
            s_310808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 45), 's', False)
            # Obtaining the member '__getitem__' of a type (line 728)
            getitem___310809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 45), s_310808, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 728)
            subscript_call_result_310810 = invoke(stypy.reporting.localization.Localization(__file__, 728, 45), getitem___310809, slice_310807)
            
            # Processing the call keyword arguments (line 728)
            kwargs_310811 = {}
            # Getting the type of 'int' (line 728)
            int_310804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 41), 'int', False)
            # Calling int(args, kwargs) (line 728)
            int_call_result_310812 = invoke(stypy.reporting.localization.Localization(__file__, 728, 41), int_310804, *[subscript_call_result_310810], **kwargs_310811)
            
            # Getting the type of 'res' (line 728)
            res_310813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 28), 'res')
            # Setting the type of the member 'minute' of a type (line 728)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 28), res_310813, 'minute', int_call_result_310812)
            
            # Assigning a Call to a Tuple (line 729):
            
            # Assigning a Call to a Name:
            
            # Call to _parsems(...): (line 729)
            # Processing the call arguments (line 729)
            
            # Obtaining the type of the subscript
            int_310815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 729, 69), 'int')
            slice_310816 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 729, 67), int_310815, None, None)
            # Getting the type of 's' (line 729)
            s_310817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 67), 's', False)
            # Obtaining the member '__getitem__' of a type (line 729)
            getitem___310818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 67), s_310817, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 729)
            subscript_call_result_310819 = invoke(stypy.reporting.localization.Localization(__file__, 729, 67), getitem___310818, slice_310816)
            
            # Processing the call keyword arguments (line 729)
            kwargs_310820 = {}
            # Getting the type of '_parsems' (line 729)
            _parsems_310814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 58), '_parsems', False)
            # Calling _parsems(args, kwargs) (line 729)
            _parsems_call_result_310821 = invoke(stypy.reporting.localization.Localization(__file__, 729, 58), _parsems_310814, *[subscript_call_result_310819], **kwargs_310820)
            
            # Assigning a type to the variable 'call_assignment_308899' (line 729)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 729, 28), 'call_assignment_308899', _parsems_call_result_310821)
            
            # Assigning a Call to a Name (line 729):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_310824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 729, 28), 'int')
            # Processing the call keyword arguments
            kwargs_310825 = {}
            # Getting the type of 'call_assignment_308899' (line 729)
            call_assignment_308899_310822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 28), 'call_assignment_308899', False)
            # Obtaining the member '__getitem__' of a type (line 729)
            getitem___310823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 28), call_assignment_308899_310822, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_310826 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___310823, *[int_310824], **kwargs_310825)
            
            # Assigning a type to the variable 'call_assignment_308900' (line 729)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 729, 28), 'call_assignment_308900', getitem___call_result_310826)
            
            # Assigning a Name to a Attribute (line 729):
            # Getting the type of 'call_assignment_308900' (line 729)
            call_assignment_308900_310827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 28), 'call_assignment_308900')
            # Getting the type of 'res' (line 729)
            res_310828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 28), 'res')
            # Setting the type of the member 'second' of a type (line 729)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 28), res_310828, 'second', call_assignment_308900_310827)
            
            # Assigning a Call to a Name (line 729):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_310831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 729, 28), 'int')
            # Processing the call keyword arguments
            kwargs_310832 = {}
            # Getting the type of 'call_assignment_308899' (line 729)
            call_assignment_308899_310829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 28), 'call_assignment_308899', False)
            # Obtaining the member '__getitem__' of a type (line 729)
            getitem___310830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 28), call_assignment_308899_310829, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_310833 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___310830, *[int_310831], **kwargs_310832)
            
            # Assigning a type to the variable 'call_assignment_308901' (line 729)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 729, 28), 'call_assignment_308901', getitem___call_result_310833)
            
            # Assigning a Name to a Attribute (line 729):
            # Getting the type of 'call_assignment_308901' (line 729)
            call_assignment_308901_310834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 28), 'call_assignment_308901')
            # Getting the type of 'res' (line 729)
            res_310835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 40), 'res')
            # Setting the type of the member 'microsecond' of a type (line 729)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 40), res_310835, 'microsecond', call_assignment_308901_310834)
            # SSA join for if statement (line 719)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the else part of an if statement (line 715)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'len_li' (line 731)
            len_li_310836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 25), 'len_li')
            
            # Obtaining an instance of the builtin type 'tuple' (line 731)
            tuple_310837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 36), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 731)
            # Adding element type (line 731)
            int_310838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 36), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 731, 36), tuple_310837, int_310838)
            # Adding element type (line 731)
            int_310839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 39), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 731, 36), tuple_310837, int_310839)
            # Adding element type (line 731)
            int_310840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 43), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 731, 36), tuple_310837, int_310840)
            
            # Applying the binary operator 'in' (line 731)
            result_contains_310841 = python_operator(stypy.reporting.localization.Localization(__file__, 731, 25), 'in', len_li_310836, tuple_310837)
            
            # Testing the type of an if condition (line 731)
            if_condition_310842 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 731, 25), result_contains_310841)
            # Assigning a type to the variable 'if_condition_310842' (line 731)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 731, 25), 'if_condition_310842', if_condition_310842)
            # SSA begins for if statement (line 731)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Name (line 733):
            
            # Assigning a Subscript to a Name (line 733):
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 733)
            i_310843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 30), 'i')
            int_310844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 733, 32), 'int')
            # Applying the binary operator '-' (line 733)
            result_sub_310845 = python_operator(stypy.reporting.localization.Localization(__file__, 733, 30), '-', i_310843, int_310844)
            
            # Getting the type of 'l' (line 733)
            l_310846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 28), 'l')
            # Obtaining the member '__getitem__' of a type (line 733)
            getitem___310847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 733, 28), l_310846, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 733)
            subscript_call_result_310848 = invoke(stypy.reporting.localization.Localization(__file__, 733, 28), getitem___310847, result_sub_310845)
            
            # Assigning a type to the variable 's' (line 733)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 733, 24), 's', subscript_call_result_310848)
            
            # Call to append(...): (line 734)
            # Processing the call arguments (line 734)
            
            # Obtaining the type of the subscript
            int_310851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 38), 'int')
            slice_310852 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 734, 35), None, int_310851, None)
            # Getting the type of 's' (line 734)
            s_310853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 35), 's', False)
            # Obtaining the member '__getitem__' of a type (line 734)
            getitem___310854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 35), s_310853, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 734)
            subscript_call_result_310855 = invoke(stypy.reporting.localization.Localization(__file__, 734, 35), getitem___310854, slice_310852)
            
            # Processing the call keyword arguments (line 734)
            kwargs_310856 = {}
            # Getting the type of 'ymd' (line 734)
            ymd_310849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 24), 'ymd', False)
            # Obtaining the member 'append' of a type (line 734)
            append_310850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 24), ymd_310849, 'append')
            # Calling append(args, kwargs) (line 734)
            append_call_result_310857 = invoke(stypy.reporting.localization.Localization(__file__, 734, 24), append_310850, *[subscript_call_result_310855], **kwargs_310856)
            
            
            # Call to append(...): (line 735)
            # Processing the call arguments (line 735)
            
            # Obtaining the type of the subscript
            int_310860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 735, 37), 'int')
            int_310861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 735, 39), 'int')
            slice_310862 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 735, 35), int_310860, int_310861, None)
            # Getting the type of 's' (line 735)
            s_310863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 35), 's', False)
            # Obtaining the member '__getitem__' of a type (line 735)
            getitem___310864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 35), s_310863, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 735)
            subscript_call_result_310865 = invoke(stypy.reporting.localization.Localization(__file__, 735, 35), getitem___310864, slice_310862)
            
            # Processing the call keyword arguments (line 735)
            kwargs_310866 = {}
            # Getting the type of 'ymd' (line 735)
            ymd_310858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 24), 'ymd', False)
            # Obtaining the member 'append' of a type (line 735)
            append_310859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 24), ymd_310858, 'append')
            # Calling append(args, kwargs) (line 735)
            append_call_result_310867 = invoke(stypy.reporting.localization.Localization(__file__, 735, 24), append_310859, *[subscript_call_result_310865], **kwargs_310866)
            
            
            # Call to append(...): (line 736)
            # Processing the call arguments (line 736)
            
            # Obtaining the type of the subscript
            int_310870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 736, 37), 'int')
            int_310871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 736, 39), 'int')
            slice_310872 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 736, 35), int_310870, int_310871, None)
            # Getting the type of 's' (line 736)
            s_310873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 35), 's', False)
            # Obtaining the member '__getitem__' of a type (line 736)
            getitem___310874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 736, 35), s_310873, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 736)
            subscript_call_result_310875 = invoke(stypy.reporting.localization.Localization(__file__, 736, 35), getitem___310874, slice_310872)
            
            # Processing the call keyword arguments (line 736)
            kwargs_310876 = {}
            # Getting the type of 'ymd' (line 736)
            ymd_310868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 24), 'ymd', False)
            # Obtaining the member 'append' of a type (line 736)
            append_310869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 736, 24), ymd_310868, 'append')
            # Calling append(args, kwargs) (line 736)
            append_call_result_310877 = invoke(stypy.reporting.localization.Localization(__file__, 736, 24), append_310869, *[subscript_call_result_310875], **kwargs_310876)
            
            
            
            # Getting the type of 'len_li' (line 738)
            len_li_310878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 27), 'len_li')
            int_310879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 738, 36), 'int')
            # Applying the binary operator '>' (line 738)
            result_gt_310880 = python_operator(stypy.reporting.localization.Localization(__file__, 738, 27), '>', len_li_310878, int_310879)
            
            # Testing the type of an if condition (line 738)
            if_condition_310881 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 738, 24), result_gt_310880)
            # Assigning a type to the variable 'if_condition_310881' (line 738)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 738, 24), 'if_condition_310881', if_condition_310881)
            # SSA begins for if statement (line 738)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 739):
            
            # Assigning a Call to a Attribute (line 739):
            
            # Call to int(...): (line 739)
            # Processing the call arguments (line 739)
            
            # Obtaining the type of the subscript
            int_310883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 739, 45), 'int')
            int_310884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 739, 47), 'int')
            slice_310885 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 739, 43), int_310883, int_310884, None)
            # Getting the type of 's' (line 739)
            s_310886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 43), 's', False)
            # Obtaining the member '__getitem__' of a type (line 739)
            getitem___310887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 739, 43), s_310886, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 739)
            subscript_call_result_310888 = invoke(stypy.reporting.localization.Localization(__file__, 739, 43), getitem___310887, slice_310885)
            
            # Processing the call keyword arguments (line 739)
            kwargs_310889 = {}
            # Getting the type of 'int' (line 739)
            int_310882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 39), 'int', False)
            # Calling int(args, kwargs) (line 739)
            int_call_result_310890 = invoke(stypy.reporting.localization.Localization(__file__, 739, 39), int_310882, *[subscript_call_result_310888], **kwargs_310889)
            
            # Getting the type of 'res' (line 739)
            res_310891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 28), 'res')
            # Setting the type of the member 'hour' of a type (line 739)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 739, 28), res_310891, 'hour', int_call_result_310890)
            
            # Assigning a Call to a Attribute (line 740):
            
            # Assigning a Call to a Attribute (line 740):
            
            # Call to int(...): (line 740)
            # Processing the call arguments (line 740)
            
            # Obtaining the type of the subscript
            int_310893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 740, 47), 'int')
            int_310894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 740, 50), 'int')
            slice_310895 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 740, 45), int_310893, int_310894, None)
            # Getting the type of 's' (line 740)
            s_310896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 45), 's', False)
            # Obtaining the member '__getitem__' of a type (line 740)
            getitem___310897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 45), s_310896, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 740)
            subscript_call_result_310898 = invoke(stypy.reporting.localization.Localization(__file__, 740, 45), getitem___310897, slice_310895)
            
            # Processing the call keyword arguments (line 740)
            kwargs_310899 = {}
            # Getting the type of 'int' (line 740)
            int_310892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 41), 'int', False)
            # Calling int(args, kwargs) (line 740)
            int_call_result_310900 = invoke(stypy.reporting.localization.Localization(__file__, 740, 41), int_310892, *[subscript_call_result_310898], **kwargs_310899)
            
            # Getting the type of 'res' (line 740)
            res_310901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 28), 'res')
            # Setting the type of the member 'minute' of a type (line 740)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 28), res_310901, 'minute', int_call_result_310900)
            
            
            # Getting the type of 'len_li' (line 742)
            len_li_310902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 31), 'len_li')
            int_310903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 742, 40), 'int')
            # Applying the binary operator '>' (line 742)
            result_gt_310904 = python_operator(stypy.reporting.localization.Localization(__file__, 742, 31), '>', len_li_310902, int_310903)
            
            # Testing the type of an if condition (line 742)
            if_condition_310905 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 742, 28), result_gt_310904)
            # Assigning a type to the variable 'if_condition_310905' (line 742)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 28), 'if_condition_310905', if_condition_310905)
            # SSA begins for if statement (line 742)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 743):
            
            # Assigning a Call to a Attribute (line 743):
            
            # Call to int(...): (line 743)
            # Processing the call arguments (line 743)
            
            # Obtaining the type of the subscript
            int_310907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 743, 51), 'int')
            slice_310908 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 743, 49), int_310907, None, None)
            # Getting the type of 's' (line 743)
            s_310909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 49), 's', False)
            # Obtaining the member '__getitem__' of a type (line 743)
            getitem___310910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 49), s_310909, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 743)
            subscript_call_result_310911 = invoke(stypy.reporting.localization.Localization(__file__, 743, 49), getitem___310910, slice_310908)
            
            # Processing the call keyword arguments (line 743)
            kwargs_310912 = {}
            # Getting the type of 'int' (line 743)
            int_310906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 45), 'int', False)
            # Calling int(args, kwargs) (line 743)
            int_call_result_310913 = invoke(stypy.reporting.localization.Localization(__file__, 743, 45), int_310906, *[subscript_call_result_310911], **kwargs_310912)
            
            # Getting the type of 'res' (line 743)
            res_310914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 32), 'res')
            # Setting the type of the member 'second' of a type (line 743)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 32), res_310914, 'second', int_call_result_310913)
            # SSA join for if statement (line 742)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 738)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the else part of an if statement (line 731)
            module_type_store.open_ssa_branch('else')
            
            
            # Evaluating a boolean operation
            
            # Evaluating a boolean operation
            
            # Getting the type of 'i' (line 745)
            i_310915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 27), 'i')
            # Getting the type of 'len_l' (line 745)
            len_l_310916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 31), 'len_l')
            # Applying the binary operator '<' (line 745)
            result_lt_310917 = python_operator(stypy.reporting.localization.Localization(__file__, 745, 27), '<', i_310915, len_l_310916)
            
            
            
            # Call to hms(...): (line 745)
            # Processing the call arguments (line 745)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 745)
            i_310920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 52), 'i', False)
            # Getting the type of 'l' (line 745)
            l_310921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 50), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 745)
            getitem___310922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 745, 50), l_310921, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 745)
            subscript_call_result_310923 = invoke(stypy.reporting.localization.Localization(__file__, 745, 50), getitem___310922, i_310920)
            
            # Processing the call keyword arguments (line 745)
            kwargs_310924 = {}
            # Getting the type of 'info' (line 745)
            info_310918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 41), 'info', False)
            # Obtaining the member 'hms' of a type (line 745)
            hms_310919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 745, 41), info_310918, 'hms')
            # Calling hms(args, kwargs) (line 745)
            hms_call_result_310925 = invoke(stypy.reporting.localization.Localization(__file__, 745, 41), hms_310919, *[subscript_call_result_310923], **kwargs_310924)
            
            # Getting the type of 'None' (line 745)
            None_310926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 63), 'None')
            # Applying the binary operator 'isnot' (line 745)
            result_is_not_310927 = python_operator(stypy.reporting.localization.Localization(__file__, 745, 41), 'isnot', hms_call_result_310925, None_310926)
            
            # Applying the binary operator 'and' (line 745)
            result_and_keyword_310928 = python_operator(stypy.reporting.localization.Localization(__file__, 745, 27), 'and', result_lt_310917, result_is_not_310927)
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'i' (line 746)
            i_310929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 27), 'i')
            int_310930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 746, 29), 'int')
            # Applying the binary operator '+' (line 746)
            result_add_310931 = python_operator(stypy.reporting.localization.Localization(__file__, 746, 27), '+', i_310929, int_310930)
            
            # Getting the type of 'len_l' (line 746)
            len_l_310932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 33), 'len_l')
            # Applying the binary operator '<' (line 746)
            result_lt_310933 = python_operator(stypy.reporting.localization.Localization(__file__, 746, 27), '<', result_add_310931, len_l_310932)
            
            
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 746)
            i_310934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 45), 'i')
            # Getting the type of 'l' (line 746)
            l_310935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 43), 'l')
            # Obtaining the member '__getitem__' of a type (line 746)
            getitem___310936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 746, 43), l_310935, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 746)
            subscript_call_result_310937 = invoke(stypy.reporting.localization.Localization(__file__, 746, 43), getitem___310936, i_310934)
            
            unicode_310938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 746, 51), 'unicode', u' ')
            # Applying the binary operator '==' (line 746)
            result_eq_310939 = python_operator(stypy.reporting.localization.Localization(__file__, 746, 43), '==', subscript_call_result_310937, unicode_310938)
            
            # Applying the binary operator 'and' (line 746)
            result_and_keyword_310940 = python_operator(stypy.reporting.localization.Localization(__file__, 746, 27), 'and', result_lt_310933, result_eq_310939)
            
            
            # Call to hms(...): (line 747)
            # Processing the call arguments (line 747)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 747)
            i_310943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 38), 'i', False)
            int_310944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 747, 40), 'int')
            # Applying the binary operator '+' (line 747)
            result_add_310945 = python_operator(stypy.reporting.localization.Localization(__file__, 747, 38), '+', i_310943, int_310944)
            
            # Getting the type of 'l' (line 747)
            l_310946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 36), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 747)
            getitem___310947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 747, 36), l_310946, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 747)
            subscript_call_result_310948 = invoke(stypy.reporting.localization.Localization(__file__, 747, 36), getitem___310947, result_add_310945)
            
            # Processing the call keyword arguments (line 747)
            kwargs_310949 = {}
            # Getting the type of 'info' (line 747)
            info_310941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 27), 'info', False)
            # Obtaining the member 'hms' of a type (line 747)
            hms_310942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 747, 27), info_310941, 'hms')
            # Calling hms(args, kwargs) (line 747)
            hms_call_result_310950 = invoke(stypy.reporting.localization.Localization(__file__, 747, 27), hms_310942, *[subscript_call_result_310948], **kwargs_310949)
            
            # Getting the type of 'None' (line 747)
            None_310951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 51), 'None')
            # Applying the binary operator 'isnot' (line 747)
            result_is_not_310952 = python_operator(stypy.reporting.localization.Localization(__file__, 747, 27), 'isnot', hms_call_result_310950, None_310951)
            
            # Applying the binary operator 'and' (line 746)
            result_and_keyword_310953 = python_operator(stypy.reporting.localization.Localization(__file__, 746, 27), 'and', result_and_keyword_310940, result_is_not_310952)
            
            # Applying the binary operator 'or' (line 745)
            result_or_keyword_310954 = python_operator(stypy.reporting.localization.Localization(__file__, 745, 26), 'or', result_and_keyword_310928, result_and_keyword_310953)
            
            # Testing the type of an if condition (line 745)
            if_condition_310955 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 745, 25), result_or_keyword_310954)
            # Assigning a type to the variable 'if_condition_310955' (line 745)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 745, 25), 'if_condition_310955', if_condition_310955)
            # SSA begins for if statement (line 745)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 750)
            i_310956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 29), 'i')
            # Getting the type of 'l' (line 750)
            l_310957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 27), 'l')
            # Obtaining the member '__getitem__' of a type (line 750)
            getitem___310958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 27), l_310957, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 750)
            subscript_call_result_310959 = invoke(stypy.reporting.localization.Localization(__file__, 750, 27), getitem___310958, i_310956)
            
            unicode_310960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 750, 35), 'unicode', u' ')
            # Applying the binary operator '==' (line 750)
            result_eq_310961 = python_operator(stypy.reporting.localization.Localization(__file__, 750, 27), '==', subscript_call_result_310959, unicode_310960)
            
            # Testing the type of an if condition (line 750)
            if_condition_310962 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 750, 24), result_eq_310961)
            # Assigning a type to the variable 'if_condition_310962' (line 750)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 24), 'if_condition_310962', if_condition_310962)
            # SSA begins for if statement (line 750)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Getting the type of 'i' (line 751)
            i_310963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 28), 'i')
            int_310964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 33), 'int')
            # Applying the binary operator '+=' (line 751)
            result_iadd_310965 = python_operator(stypy.reporting.localization.Localization(__file__, 751, 28), '+=', i_310963, int_310964)
            # Assigning a type to the variable 'i' (line 751)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 28), 'i', result_iadd_310965)
            
            # SSA join for if statement (line 750)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Name (line 753):
            
            # Assigning a Call to a Name (line 753):
            
            # Call to hms(...): (line 753)
            # Processing the call arguments (line 753)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 753)
            i_310968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 41), 'i', False)
            # Getting the type of 'l' (line 753)
            l_310969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 39), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 753)
            getitem___310970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 753, 39), l_310969, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 753)
            subscript_call_result_310971 = invoke(stypy.reporting.localization.Localization(__file__, 753, 39), getitem___310970, i_310968)
            
            # Processing the call keyword arguments (line 753)
            kwargs_310972 = {}
            # Getting the type of 'info' (line 753)
            info_310966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 30), 'info', False)
            # Obtaining the member 'hms' of a type (line 753)
            hms_310967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 753, 30), info_310966, 'hms')
            # Calling hms(args, kwargs) (line 753)
            hms_call_result_310973 = invoke(stypy.reporting.localization.Localization(__file__, 753, 30), hms_310967, *[subscript_call_result_310971], **kwargs_310972)
            
            # Assigning a type to the variable 'idx' (line 753)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 24), 'idx', hms_call_result_310973)
            
            # Getting the type of 'True' (line 755)
            True_310974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 30), 'True')
            # Testing the type of an if condition (line 755)
            is_suitable_condition(stypy.reporting.localization.Localization(__file__, 755, 24), True_310974)
            # SSA begins for while statement (line 755)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
            
            
            # Getting the type of 'idx' (line 756)
            idx_310975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 31), 'idx')
            int_310976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 38), 'int')
            # Applying the binary operator '==' (line 756)
            result_eq_310977 = python_operator(stypy.reporting.localization.Localization(__file__, 756, 31), '==', idx_310975, int_310976)
            
            # Testing the type of an if condition (line 756)
            if_condition_310978 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 756, 28), result_eq_310977)
            # Assigning a type to the variable 'if_condition_310978' (line 756)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 28), 'if_condition_310978', if_condition_310978)
            # SSA begins for if statement (line 756)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 757):
            
            # Assigning a Call to a Attribute (line 757):
            
            # Call to int(...): (line 757)
            # Processing the call arguments (line 757)
            # Getting the type of 'value' (line 757)
            value_310980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 47), 'value', False)
            # Processing the call keyword arguments (line 757)
            kwargs_310981 = {}
            # Getting the type of 'int' (line 757)
            int_310979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 43), 'int', False)
            # Calling int(args, kwargs) (line 757)
            int_call_result_310982 = invoke(stypy.reporting.localization.Localization(__file__, 757, 43), int_310979, *[value_310980], **kwargs_310981)
            
            # Getting the type of 'res' (line 757)
            res_310983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 32), 'res')
            # Setting the type of the member 'hour' of a type (line 757)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 32), res_310983, 'hour', int_call_result_310982)
            
            # Getting the type of 'value' (line 759)
            value_310984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 35), 'value')
            int_310985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 759, 43), 'int')
            # Applying the binary operator '%' (line 759)
            result_mod_310986 = python_operator(stypy.reporting.localization.Localization(__file__, 759, 35), '%', value_310984, int_310985)
            
            # Testing the type of an if condition (line 759)
            if_condition_310987 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 759, 32), result_mod_310986)
            # Assigning a type to the variable 'if_condition_310987' (line 759)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 759, 32), 'if_condition_310987', if_condition_310987)
            # SSA begins for if statement (line 759)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 760):
            
            # Assigning a Call to a Attribute (line 760):
            
            # Call to int(...): (line 760)
            # Processing the call arguments (line 760)
            int_310989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 760, 53), 'int')
            # Getting the type of 'value' (line 760)
            value_310990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 57), 'value', False)
            int_310991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 760, 65), 'int')
            # Applying the binary operator '%' (line 760)
            result_mod_310992 = python_operator(stypy.reporting.localization.Localization(__file__, 760, 57), '%', value_310990, int_310991)
            
            # Applying the binary operator '*' (line 760)
            result_mul_310993 = python_operator(stypy.reporting.localization.Localization(__file__, 760, 53), '*', int_310989, result_mod_310992)
            
            # Processing the call keyword arguments (line 760)
            kwargs_310994 = {}
            # Getting the type of 'int' (line 760)
            int_310988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 49), 'int', False)
            # Calling int(args, kwargs) (line 760)
            int_call_result_310995 = invoke(stypy.reporting.localization.Localization(__file__, 760, 49), int_310988, *[result_mul_310993], **kwargs_310994)
            
            # Getting the type of 'res' (line 760)
            res_310996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 36), 'res')
            # Setting the type of the member 'minute' of a type (line 760)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 760, 36), res_310996, 'minute', int_call_result_310995)
            # SSA join for if statement (line 759)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the else part of an if statement (line 756)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'idx' (line 762)
            idx_310997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 33), 'idx')
            int_310998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 762, 40), 'int')
            # Applying the binary operator '==' (line 762)
            result_eq_310999 = python_operator(stypy.reporting.localization.Localization(__file__, 762, 33), '==', idx_310997, int_310998)
            
            # Testing the type of an if condition (line 762)
            if_condition_311000 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 762, 33), result_eq_310999)
            # Assigning a type to the variable 'if_condition_311000' (line 762)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 762, 33), 'if_condition_311000', if_condition_311000)
            # SSA begins for if statement (line 762)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 763):
            
            # Assigning a Call to a Attribute (line 763):
            
            # Call to int(...): (line 763)
            # Processing the call arguments (line 763)
            # Getting the type of 'value' (line 763)
            value_311002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 49), 'value', False)
            # Processing the call keyword arguments (line 763)
            kwargs_311003 = {}
            # Getting the type of 'int' (line 763)
            int_311001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 45), 'int', False)
            # Calling int(args, kwargs) (line 763)
            int_call_result_311004 = invoke(stypy.reporting.localization.Localization(__file__, 763, 45), int_311001, *[value_311002], **kwargs_311003)
            
            # Getting the type of 'res' (line 763)
            res_311005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 32), 'res')
            # Setting the type of the member 'minute' of a type (line 763)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 32), res_311005, 'minute', int_call_result_311004)
            
            # Getting the type of 'value' (line 765)
            value_311006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 35), 'value')
            int_311007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 765, 43), 'int')
            # Applying the binary operator '%' (line 765)
            result_mod_311008 = python_operator(stypy.reporting.localization.Localization(__file__, 765, 35), '%', value_311006, int_311007)
            
            # Testing the type of an if condition (line 765)
            if_condition_311009 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 765, 32), result_mod_311008)
            # Assigning a type to the variable 'if_condition_311009' (line 765)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 765, 32), 'if_condition_311009', if_condition_311009)
            # SSA begins for if statement (line 765)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 766):
            
            # Assigning a Call to a Attribute (line 766):
            
            # Call to int(...): (line 766)
            # Processing the call arguments (line 766)
            int_311011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 53), 'int')
            # Getting the type of 'value' (line 766)
            value_311012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 57), 'value', False)
            int_311013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 65), 'int')
            # Applying the binary operator '%' (line 766)
            result_mod_311014 = python_operator(stypy.reporting.localization.Localization(__file__, 766, 57), '%', value_311012, int_311013)
            
            # Applying the binary operator '*' (line 766)
            result_mul_311015 = python_operator(stypy.reporting.localization.Localization(__file__, 766, 53), '*', int_311011, result_mod_311014)
            
            # Processing the call keyword arguments (line 766)
            kwargs_311016 = {}
            # Getting the type of 'int' (line 766)
            int_311010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 49), 'int', False)
            # Calling int(args, kwargs) (line 766)
            int_call_result_311017 = invoke(stypy.reporting.localization.Localization(__file__, 766, 49), int_311010, *[result_mul_311015], **kwargs_311016)
            
            # Getting the type of 'res' (line 766)
            res_311018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 36), 'res')
            # Setting the type of the member 'second' of a type (line 766)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 766, 36), res_311018, 'second', int_call_result_311017)
            # SSA join for if statement (line 765)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the else part of an if statement (line 762)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'idx' (line 768)
            idx_311019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 33), 'idx')
            int_311020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 768, 40), 'int')
            # Applying the binary operator '==' (line 768)
            result_eq_311021 = python_operator(stypy.reporting.localization.Localization(__file__, 768, 33), '==', idx_311019, int_311020)
            
            # Testing the type of an if condition (line 768)
            if_condition_311022 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 768, 33), result_eq_311021)
            # Assigning a type to the variable 'if_condition_311022' (line 768)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 33), 'if_condition_311022', if_condition_311022)
            # SSA begins for if statement (line 768)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Tuple (line 769):
            
            # Assigning a Call to a Name:
            
            # Call to _parsems(...): (line 770)
            # Processing the call arguments (line 770)
            # Getting the type of 'value_repr' (line 770)
            value_repr_311024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 45), 'value_repr', False)
            # Processing the call keyword arguments (line 770)
            kwargs_311025 = {}
            # Getting the type of '_parsems' (line 770)
            _parsems_311023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 36), '_parsems', False)
            # Calling _parsems(args, kwargs) (line 770)
            _parsems_call_result_311026 = invoke(stypy.reporting.localization.Localization(__file__, 770, 36), _parsems_311023, *[value_repr_311024], **kwargs_311025)
            
            # Assigning a type to the variable 'call_assignment_308902' (line 769)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 769, 32), 'call_assignment_308902', _parsems_call_result_311026)
            
            # Assigning a Call to a Name (line 769):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_311029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 769, 32), 'int')
            # Processing the call keyword arguments
            kwargs_311030 = {}
            # Getting the type of 'call_assignment_308902' (line 769)
            call_assignment_308902_311027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 32), 'call_assignment_308902', False)
            # Obtaining the member '__getitem__' of a type (line 769)
            getitem___311028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 32), call_assignment_308902_311027, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_311031 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___311028, *[int_311029], **kwargs_311030)
            
            # Assigning a type to the variable 'call_assignment_308903' (line 769)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 769, 32), 'call_assignment_308903', getitem___call_result_311031)
            
            # Assigning a Name to a Attribute (line 769):
            # Getting the type of 'call_assignment_308903' (line 769)
            call_assignment_308903_311032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 32), 'call_assignment_308903')
            # Getting the type of 'res' (line 769)
            res_311033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 32), 'res')
            # Setting the type of the member 'second' of a type (line 769)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 32), res_311033, 'second', call_assignment_308903_311032)
            
            # Assigning a Call to a Name (line 769):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_311036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 769, 32), 'int')
            # Processing the call keyword arguments
            kwargs_311037 = {}
            # Getting the type of 'call_assignment_308902' (line 769)
            call_assignment_308902_311034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 32), 'call_assignment_308902', False)
            # Obtaining the member '__getitem__' of a type (line 769)
            getitem___311035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 32), call_assignment_308902_311034, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_311038 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___311035, *[int_311036], **kwargs_311037)
            
            # Assigning a type to the variable 'call_assignment_308904' (line 769)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 769, 32), 'call_assignment_308904', getitem___call_result_311038)
            
            # Assigning a Name to a Attribute (line 769):
            # Getting the type of 'call_assignment_308904' (line 769)
            call_assignment_308904_311039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 32), 'call_assignment_308904')
            # Getting the type of 'res' (line 769)
            res_311040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 44), 'res')
            # Setting the type of the member 'microsecond' of a type (line 769)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 44), res_311040, 'microsecond', call_assignment_308904_311039)
            # SSA join for if statement (line 768)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 762)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 756)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Getting the type of 'i' (line 772)
            i_311041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 28), 'i')
            int_311042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 772, 33), 'int')
            # Applying the binary operator '+=' (line 772)
            result_iadd_311043 = python_operator(stypy.reporting.localization.Localization(__file__, 772, 28), '+=', i_311041, int_311042)
            # Assigning a type to the variable 'i' (line 772)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 772, 28), 'i', result_iadd_311043)
            
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'i' (line 774)
            i_311044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 31), 'i')
            # Getting the type of 'len_l' (line 774)
            len_l_311045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 36), 'len_l')
            # Applying the binary operator '>=' (line 774)
            result_ge_311046 = python_operator(stypy.reporting.localization.Localization(__file__, 774, 31), '>=', i_311044, len_l_311045)
            
            
            # Getting the type of 'idx' (line 774)
            idx_311047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 45), 'idx')
            int_311048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 774, 52), 'int')
            # Applying the binary operator '==' (line 774)
            result_eq_311049 = python_operator(stypy.reporting.localization.Localization(__file__, 774, 45), '==', idx_311047, int_311048)
            
            # Applying the binary operator 'or' (line 774)
            result_or_keyword_311050 = python_operator(stypy.reporting.localization.Localization(__file__, 774, 31), 'or', result_ge_311046, result_eq_311049)
            
            # Testing the type of an if condition (line 774)
            if_condition_311051 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 774, 28), result_or_keyword_311050)
            # Assigning a type to the variable 'if_condition_311051' (line 774)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 774, 28), 'if_condition_311051', if_condition_311051)
            # SSA begins for if statement (line 774)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            # SSA join for if statement (line 774)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # SSA begins for try-except statement (line 778)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Assigning a Subscript to a Name (line 779):
            
            # Assigning a Subscript to a Name (line 779):
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 779)
            i_311052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 47), 'i')
            # Getting the type of 'l' (line 779)
            l_311053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 45), 'l')
            # Obtaining the member '__getitem__' of a type (line 779)
            getitem___311054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 779, 45), l_311053, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 779)
            subscript_call_result_311055 = invoke(stypy.reporting.localization.Localization(__file__, 779, 45), getitem___311054, i_311052)
            
            # Assigning a type to the variable 'value_repr' (line 779)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 779, 32), 'value_repr', subscript_call_result_311055)
            
            # Assigning a Call to a Name (line 780):
            
            # Assigning a Call to a Name (line 780):
            
            # Call to float(...): (line 780)
            # Processing the call arguments (line 780)
            # Getting the type of 'value_repr' (line 780)
            value_repr_311057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 46), 'value_repr', False)
            # Processing the call keyword arguments (line 780)
            kwargs_311058 = {}
            # Getting the type of 'float' (line 780)
            float_311056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 40), 'float', False)
            # Calling float(args, kwargs) (line 780)
            float_call_result_311059 = invoke(stypy.reporting.localization.Localization(__file__, 780, 40), float_311056, *[value_repr_311057], **kwargs_311058)
            
            # Assigning a type to the variable 'value' (line 780)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 780, 32), 'value', float_call_result_311059)
            # SSA branch for the except part of a try statement (line 778)
            # SSA branch for the except 'ValueError' branch of a try statement (line 778)
            module_type_store.open_ssa_branch('except')
            # SSA branch for the else branch of a try statement (line 778)
            module_type_store.open_ssa_branch('except else')
            
            # Getting the type of 'i' (line 784)
            i_311060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 32), 'i')
            int_311061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 784, 37), 'int')
            # Applying the binary operator '+=' (line 784)
            result_iadd_311062 = python_operator(stypy.reporting.localization.Localization(__file__, 784, 32), '+=', i_311060, int_311061)
            # Assigning a type to the variable 'i' (line 784)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 784, 32), 'i', result_iadd_311062)
            
            
            # Getting the type of 'idx' (line 785)
            idx_311063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 32), 'idx')
            int_311064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 785, 39), 'int')
            # Applying the binary operator '+=' (line 785)
            result_iadd_311065 = python_operator(stypy.reporting.localization.Localization(__file__, 785, 32), '+=', idx_311063, int_311064)
            # Assigning a type to the variable 'idx' (line 785)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 785, 32), 'idx', result_iadd_311065)
            
            
            
            # Getting the type of 'i' (line 787)
            i_311066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 35), 'i')
            # Getting the type of 'len_l' (line 787)
            len_l_311067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 39), 'len_l')
            # Applying the binary operator '<' (line 787)
            result_lt_311068 = python_operator(stypy.reporting.localization.Localization(__file__, 787, 35), '<', i_311066, len_l_311067)
            
            # Testing the type of an if condition (line 787)
            if_condition_311069 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 787, 32), result_lt_311068)
            # Assigning a type to the variable 'if_condition_311069' (line 787)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 787, 32), 'if_condition_311069', if_condition_311069)
            # SSA begins for if statement (line 787)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 788):
            
            # Assigning a Call to a Name (line 788):
            
            # Call to hms(...): (line 788)
            # Processing the call arguments (line 788)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 788)
            i_311072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 56), 'i', False)
            # Getting the type of 'l' (line 788)
            l_311073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 54), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 788)
            getitem___311074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 54), l_311073, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 788)
            subscript_call_result_311075 = invoke(stypy.reporting.localization.Localization(__file__, 788, 54), getitem___311074, i_311072)
            
            # Processing the call keyword arguments (line 788)
            kwargs_311076 = {}
            # Getting the type of 'info' (line 788)
            info_311070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 45), 'info', False)
            # Obtaining the member 'hms' of a type (line 788)
            hms_311071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 45), info_311070, 'hms')
            # Calling hms(args, kwargs) (line 788)
            hms_call_result_311077 = invoke(stypy.reporting.localization.Localization(__file__, 788, 45), hms_311071, *[subscript_call_result_311075], **kwargs_311076)
            
            # Assigning a type to the variable 'newidx' (line 788)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 788, 36), 'newidx', hms_call_result_311077)
            
            # Type idiom detected: calculating its left and rigth part (line 790)
            # Getting the type of 'newidx' (line 790)
            newidx_311078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 36), 'newidx')
            # Getting the type of 'None' (line 790)
            None_311079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 53), 'None')
            
            (may_be_311080, more_types_in_union_311081) = may_not_be_none(newidx_311078, None_311079)

            if may_be_311080:

                if more_types_in_union_311081:
                    # Runtime conditional SSA (line 790)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Assigning a Name to a Name (line 791):
                
                # Assigning a Name to a Name (line 791):
                # Getting the type of 'newidx' (line 791)
                newidx_311082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 46), 'newidx')
                # Assigning a type to the variable 'idx' (line 791)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 791, 40), 'idx', newidx_311082)

                if more_types_in_union_311081:
                    # SSA join for if statement (line 790)
                    module_type_store = module_type_store.join_ssa_context()


            
            # SSA join for if statement (line 787)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for try-except statement (line 778)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for while statement (line 755)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the else part of an if statement (line 745)
            module_type_store.open_ssa_branch('else')
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'i' (line 793)
            i_311083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 26), 'i')
            # Getting the type of 'len_l' (line 793)
            len_l_311084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 31), 'len_l')
            # Applying the binary operator '==' (line 793)
            result_eq_311085 = python_operator(stypy.reporting.localization.Localization(__file__, 793, 26), '==', i_311083, len_l_311084)
            
            
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 793)
            i_311086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 43), 'i')
            int_311087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 793, 45), 'int')
            # Applying the binary operator '-' (line 793)
            result_sub_311088 = python_operator(stypy.reporting.localization.Localization(__file__, 793, 43), '-', i_311086, int_311087)
            
            # Getting the type of 'l' (line 793)
            l_311089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 41), 'l')
            # Obtaining the member '__getitem__' of a type (line 793)
            getitem___311090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 41), l_311089, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 793)
            subscript_call_result_311091 = invoke(stypy.reporting.localization.Localization(__file__, 793, 41), getitem___311090, result_sub_311088)
            
            unicode_311092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 793, 51), 'unicode', u' ')
            # Applying the binary operator '==' (line 793)
            result_eq_311093 = python_operator(stypy.reporting.localization.Localization(__file__, 793, 41), '==', subscript_call_result_311091, unicode_311092)
            
            # Applying the binary operator 'and' (line 793)
            result_and_keyword_311094 = python_operator(stypy.reporting.localization.Localization(__file__, 793, 26), 'and', result_eq_311085, result_eq_311093)
            
            
            # Call to hms(...): (line 794)
            # Processing the call arguments (line 794)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 794)
            i_311097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 37), 'i', False)
            int_311098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 794, 39), 'int')
            # Applying the binary operator '-' (line 794)
            result_sub_311099 = python_operator(stypy.reporting.localization.Localization(__file__, 794, 37), '-', i_311097, int_311098)
            
            # Getting the type of 'l' (line 794)
            l_311100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 35), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 794)
            getitem___311101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 794, 35), l_311100, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 794)
            subscript_call_result_311102 = invoke(stypy.reporting.localization.Localization(__file__, 794, 35), getitem___311101, result_sub_311099)
            
            # Processing the call keyword arguments (line 794)
            kwargs_311103 = {}
            # Getting the type of 'info' (line 794)
            info_311095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 26), 'info', False)
            # Obtaining the member 'hms' of a type (line 794)
            hms_311096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 794, 26), info_311095, 'hms')
            # Calling hms(args, kwargs) (line 794)
            hms_call_result_311104 = invoke(stypy.reporting.localization.Localization(__file__, 794, 26), hms_311096, *[subscript_call_result_311102], **kwargs_311103)
            
            # Getting the type of 'None' (line 794)
            None_311105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 50), 'None')
            # Applying the binary operator 'isnot' (line 794)
            result_is_not_311106 = python_operator(stypy.reporting.localization.Localization(__file__, 794, 26), 'isnot', hms_call_result_311104, None_311105)
            
            # Applying the binary operator 'and' (line 793)
            result_and_keyword_311107 = python_operator(stypy.reporting.localization.Localization(__file__, 793, 26), 'and', result_and_keyword_311094, result_is_not_311106)
            
            # Testing the type of an if condition (line 793)
            if_condition_311108 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 793, 25), result_and_keyword_311107)
            # Assigning a type to the variable 'if_condition_311108' (line 793)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 793, 25), 'if_condition_311108', if_condition_311108)
            # SSA begins for if statement (line 793)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 796):
            
            # Assigning a Call to a Name (line 796):
            
            # Call to hms(...): (line 796)
            # Processing the call arguments (line 796)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 796)
            i_311111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 41), 'i', False)
            int_311112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, 43), 'int')
            # Applying the binary operator '-' (line 796)
            result_sub_311113 = python_operator(stypy.reporting.localization.Localization(__file__, 796, 41), '-', i_311111, int_311112)
            
            # Getting the type of 'l' (line 796)
            l_311114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 39), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 796)
            getitem___311115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 796, 39), l_311114, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 796)
            subscript_call_result_311116 = invoke(stypy.reporting.localization.Localization(__file__, 796, 39), getitem___311115, result_sub_311113)
            
            # Processing the call keyword arguments (line 796)
            kwargs_311117 = {}
            # Getting the type of 'info' (line 796)
            info_311109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 30), 'info', False)
            # Obtaining the member 'hms' of a type (line 796)
            hms_311110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 796, 30), info_311109, 'hms')
            # Calling hms(args, kwargs) (line 796)
            hms_call_result_311118 = invoke(stypy.reporting.localization.Localization(__file__, 796, 30), hms_311110, *[subscript_call_result_311116], **kwargs_311117)
            
            # Assigning a type to the variable 'idx' (line 796)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 24), 'idx', hms_call_result_311118)
            
            
            # Getting the type of 'idx' (line 798)
            idx_311119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 27), 'idx')
            int_311120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 34), 'int')
            # Applying the binary operator '==' (line 798)
            result_eq_311121 = python_operator(stypy.reporting.localization.Localization(__file__, 798, 27), '==', idx_311119, int_311120)
            
            # Testing the type of an if condition (line 798)
            if_condition_311122 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 798, 24), result_eq_311121)
            # Assigning a type to the variable 'if_condition_311122' (line 798)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 798, 24), 'if_condition_311122', if_condition_311122)
            # SSA begins for if statement (line 798)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 799):
            
            # Assigning a Call to a Attribute (line 799):
            
            # Call to int(...): (line 799)
            # Processing the call arguments (line 799)
            # Getting the type of 'value' (line 799)
            value_311124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 45), 'value', False)
            # Processing the call keyword arguments (line 799)
            kwargs_311125 = {}
            # Getting the type of 'int' (line 799)
            int_311123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 41), 'int', False)
            # Calling int(args, kwargs) (line 799)
            int_call_result_311126 = invoke(stypy.reporting.localization.Localization(__file__, 799, 41), int_311123, *[value_311124], **kwargs_311125)
            
            # Getting the type of 'res' (line 799)
            res_311127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 28), 'res')
            # Setting the type of the member 'minute' of a type (line 799)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 28), res_311127, 'minute', int_call_result_311126)
            
            # Assigning a BinOp to a Name (line 801):
            
            # Assigning a BinOp to a Name (line 801):
            # Getting the type of 'value' (line 801)
            value_311128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 44), 'value')
            int_311129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 801, 52), 'int')
            # Applying the binary operator '%' (line 801)
            result_mod_311130 = python_operator(stypy.reporting.localization.Localization(__file__, 801, 44), '%', value_311128, int_311129)
            
            # Assigning a type to the variable 'sec_remainder' (line 801)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 801, 28), 'sec_remainder', result_mod_311130)
            
            # Getting the type of 'sec_remainder' (line 802)
            sec_remainder_311131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 31), 'sec_remainder')
            # Testing the type of an if condition (line 802)
            if_condition_311132 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 802, 28), sec_remainder_311131)
            # Assigning a type to the variable 'if_condition_311132' (line 802)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 28), 'if_condition_311132', if_condition_311132)
            # SSA begins for if statement (line 802)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 803):
            
            # Assigning a Call to a Attribute (line 803):
            
            # Call to int(...): (line 803)
            # Processing the call arguments (line 803)
            int_311134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 803, 49), 'int')
            # Getting the type of 'sec_remainder' (line 803)
            sec_remainder_311135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 54), 'sec_remainder', False)
            # Applying the binary operator '*' (line 803)
            result_mul_311136 = python_operator(stypy.reporting.localization.Localization(__file__, 803, 49), '*', int_311134, sec_remainder_311135)
            
            # Processing the call keyword arguments (line 803)
            kwargs_311137 = {}
            # Getting the type of 'int' (line 803)
            int_311133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 45), 'int', False)
            # Calling int(args, kwargs) (line 803)
            int_call_result_311138 = invoke(stypy.reporting.localization.Localization(__file__, 803, 45), int_311133, *[result_mul_311136], **kwargs_311137)
            
            # Getting the type of 'res' (line 803)
            res_311139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 32), 'res')
            # Setting the type of the member 'second' of a type (line 803)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 803, 32), res_311139, 'second', int_call_result_311138)
            # SSA join for if statement (line 802)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the else part of an if statement (line 798)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'idx' (line 804)
            idx_311140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 29), 'idx')
            int_311141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 804, 36), 'int')
            # Applying the binary operator '==' (line 804)
            result_eq_311142 = python_operator(stypy.reporting.localization.Localization(__file__, 804, 29), '==', idx_311140, int_311141)
            
            # Testing the type of an if condition (line 804)
            if_condition_311143 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 804, 29), result_eq_311142)
            # Assigning a type to the variable 'if_condition_311143' (line 804)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 804, 29), 'if_condition_311143', if_condition_311143)
            # SSA begins for if statement (line 804)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Tuple (line 805):
            
            # Assigning a Call to a Name:
            
            # Call to _parsems(...): (line 806)
            # Processing the call arguments (line 806)
            # Getting the type of 'value_repr' (line 806)
            value_repr_311145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 41), 'value_repr', False)
            # Processing the call keyword arguments (line 806)
            kwargs_311146 = {}
            # Getting the type of '_parsems' (line 806)
            _parsems_311144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 32), '_parsems', False)
            # Calling _parsems(args, kwargs) (line 806)
            _parsems_call_result_311147 = invoke(stypy.reporting.localization.Localization(__file__, 806, 32), _parsems_311144, *[value_repr_311145], **kwargs_311146)
            
            # Assigning a type to the variable 'call_assignment_308905' (line 805)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 805, 28), 'call_assignment_308905', _parsems_call_result_311147)
            
            # Assigning a Call to a Name (line 805):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_311150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 805, 28), 'int')
            # Processing the call keyword arguments
            kwargs_311151 = {}
            # Getting the type of 'call_assignment_308905' (line 805)
            call_assignment_308905_311148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 28), 'call_assignment_308905', False)
            # Obtaining the member '__getitem__' of a type (line 805)
            getitem___311149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 28), call_assignment_308905_311148, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_311152 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___311149, *[int_311150], **kwargs_311151)
            
            # Assigning a type to the variable 'call_assignment_308906' (line 805)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 805, 28), 'call_assignment_308906', getitem___call_result_311152)
            
            # Assigning a Name to a Attribute (line 805):
            # Getting the type of 'call_assignment_308906' (line 805)
            call_assignment_308906_311153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 28), 'call_assignment_308906')
            # Getting the type of 'res' (line 805)
            res_311154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 28), 'res')
            # Setting the type of the member 'second' of a type (line 805)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 28), res_311154, 'second', call_assignment_308906_311153)
            
            # Assigning a Call to a Name (line 805):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_311157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 805, 28), 'int')
            # Processing the call keyword arguments
            kwargs_311158 = {}
            # Getting the type of 'call_assignment_308905' (line 805)
            call_assignment_308905_311155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 28), 'call_assignment_308905', False)
            # Obtaining the member '__getitem__' of a type (line 805)
            getitem___311156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 28), call_assignment_308905_311155, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_311159 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___311156, *[int_311157], **kwargs_311158)
            
            # Assigning a type to the variable 'call_assignment_308907' (line 805)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 805, 28), 'call_assignment_308907', getitem___call_result_311159)
            
            # Assigning a Name to a Attribute (line 805):
            # Getting the type of 'call_assignment_308907' (line 805)
            call_assignment_308907_311160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 28), 'call_assignment_308907')
            # Getting the type of 'res' (line 805)
            res_311161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 40), 'res')
            # Setting the type of the member 'microsecond' of a type (line 805)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 40), res_311161, 'microsecond', call_assignment_308907_311160)
            # SSA join for if statement (line 804)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 798)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the else part of an if statement (line 793)
            module_type_store.open_ssa_branch('else')
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'i' (line 812)
            i_311162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 25), 'i')
            int_311163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 812, 27), 'int')
            # Applying the binary operator '+' (line 812)
            result_add_311164 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 25), '+', i_311162, int_311163)
            
            # Getting the type of 'len_l' (line 812)
            len_l_311165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 31), 'len_l')
            # Applying the binary operator '<' (line 812)
            result_lt_311166 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 25), '<', result_add_311164, len_l_311165)
            
            
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 812)
            i_311167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 43), 'i')
            # Getting the type of 'l' (line 812)
            l_311168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 41), 'l')
            # Obtaining the member '__getitem__' of a type (line 812)
            getitem___311169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 41), l_311168, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 812)
            subscript_call_result_311170 = invoke(stypy.reporting.localization.Localization(__file__, 812, 41), getitem___311169, i_311167)
            
            unicode_311171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 812, 49), 'unicode', u':')
            # Applying the binary operator '==' (line 812)
            result_eq_311172 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 41), '==', subscript_call_result_311170, unicode_311171)
            
            # Applying the binary operator 'and' (line 812)
            result_and_keyword_311173 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 25), 'and', result_lt_311166, result_eq_311172)
            
            # Testing the type of an if condition (line 812)
            if_condition_311174 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 812, 25), result_and_keyword_311173)
            # Assigning a type to the variable 'if_condition_311174' (line 812)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 812, 25), 'if_condition_311174', if_condition_311174)
            # SSA begins for if statement (line 812)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 814):
            
            # Assigning a Call to a Attribute (line 814):
            
            # Call to int(...): (line 814)
            # Processing the call arguments (line 814)
            # Getting the type of 'value' (line 814)
            value_311176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 39), 'value', False)
            # Processing the call keyword arguments (line 814)
            kwargs_311177 = {}
            # Getting the type of 'int' (line 814)
            int_311175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 35), 'int', False)
            # Calling int(args, kwargs) (line 814)
            int_call_result_311178 = invoke(stypy.reporting.localization.Localization(__file__, 814, 35), int_311175, *[value_311176], **kwargs_311177)
            
            # Getting the type of 'res' (line 814)
            res_311179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 24), 'res')
            # Setting the type of the member 'hour' of a type (line 814)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 24), res_311179, 'hour', int_call_result_311178)
            
            # Getting the type of 'i' (line 815)
            i_311180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 24), 'i')
            int_311181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 815, 29), 'int')
            # Applying the binary operator '+=' (line 815)
            result_iadd_311182 = python_operator(stypy.reporting.localization.Localization(__file__, 815, 24), '+=', i_311180, int_311181)
            # Assigning a type to the variable 'i' (line 815)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 815, 24), 'i', result_iadd_311182)
            
            
            # Assigning a Call to a Name (line 816):
            
            # Assigning a Call to a Name (line 816):
            
            # Call to float(...): (line 816)
            # Processing the call arguments (line 816)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 816)
            i_311184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 40), 'i', False)
            # Getting the type of 'l' (line 816)
            l_311185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 38), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 816)
            getitem___311186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 816, 38), l_311185, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 816)
            subscript_call_result_311187 = invoke(stypy.reporting.localization.Localization(__file__, 816, 38), getitem___311186, i_311184)
            
            # Processing the call keyword arguments (line 816)
            kwargs_311188 = {}
            # Getting the type of 'float' (line 816)
            float_311183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 32), 'float', False)
            # Calling float(args, kwargs) (line 816)
            float_call_result_311189 = invoke(stypy.reporting.localization.Localization(__file__, 816, 32), float_311183, *[subscript_call_result_311187], **kwargs_311188)
            
            # Assigning a type to the variable 'value' (line 816)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 816, 24), 'value', float_call_result_311189)
            
            # Assigning a Call to a Attribute (line 817):
            
            # Assigning a Call to a Attribute (line 817):
            
            # Call to int(...): (line 817)
            # Processing the call arguments (line 817)
            # Getting the type of 'value' (line 817)
            value_311191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 41), 'value', False)
            # Processing the call keyword arguments (line 817)
            kwargs_311192 = {}
            # Getting the type of 'int' (line 817)
            int_311190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 37), 'int', False)
            # Calling int(args, kwargs) (line 817)
            int_call_result_311193 = invoke(stypy.reporting.localization.Localization(__file__, 817, 37), int_311190, *[value_311191], **kwargs_311192)
            
            # Getting the type of 'res' (line 817)
            res_311194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 24), 'res')
            # Setting the type of the member 'minute' of a type (line 817)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 24), res_311194, 'minute', int_call_result_311193)
            
            # Getting the type of 'value' (line 819)
            value_311195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 27), 'value')
            int_311196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 819, 35), 'int')
            # Applying the binary operator '%' (line 819)
            result_mod_311197 = python_operator(stypy.reporting.localization.Localization(__file__, 819, 27), '%', value_311195, int_311196)
            
            # Testing the type of an if condition (line 819)
            if_condition_311198 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 819, 24), result_mod_311197)
            # Assigning a type to the variable 'if_condition_311198' (line 819)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 819, 24), 'if_condition_311198', if_condition_311198)
            # SSA begins for if statement (line 819)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 820):
            
            # Assigning a Call to a Attribute (line 820):
            
            # Call to int(...): (line 820)
            # Processing the call arguments (line 820)
            int_311200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 820, 45), 'int')
            # Getting the type of 'value' (line 820)
            value_311201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 49), 'value', False)
            int_311202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 820, 57), 'int')
            # Applying the binary operator '%' (line 820)
            result_mod_311203 = python_operator(stypy.reporting.localization.Localization(__file__, 820, 49), '%', value_311201, int_311202)
            
            # Applying the binary operator '*' (line 820)
            result_mul_311204 = python_operator(stypy.reporting.localization.Localization(__file__, 820, 45), '*', int_311200, result_mod_311203)
            
            # Processing the call keyword arguments (line 820)
            kwargs_311205 = {}
            # Getting the type of 'int' (line 820)
            int_311199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 41), 'int', False)
            # Calling int(args, kwargs) (line 820)
            int_call_result_311206 = invoke(stypy.reporting.localization.Localization(__file__, 820, 41), int_311199, *[result_mul_311204], **kwargs_311205)
            
            # Getting the type of 'res' (line 820)
            res_311207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 28), 'res')
            # Setting the type of the member 'second' of a type (line 820)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 28), res_311207, 'second', int_call_result_311206)
            # SSA join for if statement (line 819)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Getting the type of 'i' (line 822)
            i_311208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 24), 'i')
            int_311209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 29), 'int')
            # Applying the binary operator '+=' (line 822)
            result_iadd_311210 = python_operator(stypy.reporting.localization.Localization(__file__, 822, 24), '+=', i_311208, int_311209)
            # Assigning a type to the variable 'i' (line 822)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 24), 'i', result_iadd_311210)
            
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'i' (line 824)
            i_311211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 27), 'i')
            # Getting the type of 'len_l' (line 824)
            len_l_311212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 31), 'len_l')
            # Applying the binary operator '<' (line 824)
            result_lt_311213 = python_operator(stypy.reporting.localization.Localization(__file__, 824, 27), '<', i_311211, len_l_311212)
            
            
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 824)
            i_311214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 43), 'i')
            # Getting the type of 'l' (line 824)
            l_311215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 41), 'l')
            # Obtaining the member '__getitem__' of a type (line 824)
            getitem___311216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 824, 41), l_311215, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 824)
            subscript_call_result_311217 = invoke(stypy.reporting.localization.Localization(__file__, 824, 41), getitem___311216, i_311214)
            
            unicode_311218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 824, 49), 'unicode', u':')
            # Applying the binary operator '==' (line 824)
            result_eq_311219 = python_operator(stypy.reporting.localization.Localization(__file__, 824, 41), '==', subscript_call_result_311217, unicode_311218)
            
            # Applying the binary operator 'and' (line 824)
            result_and_keyword_311220 = python_operator(stypy.reporting.localization.Localization(__file__, 824, 27), 'and', result_lt_311213, result_eq_311219)
            
            # Testing the type of an if condition (line 824)
            if_condition_311221 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 824, 24), result_and_keyword_311220)
            # Assigning a type to the variable 'if_condition_311221' (line 824)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 824, 24), 'if_condition_311221', if_condition_311221)
            # SSA begins for if statement (line 824)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Tuple (line 825):
            
            # Assigning a Call to a Name:
            
            # Call to _parsems(...): (line 825)
            # Processing the call arguments (line 825)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 825)
            i_311223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 69), 'i', False)
            int_311224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 71), 'int')
            # Applying the binary operator '+' (line 825)
            result_add_311225 = python_operator(stypy.reporting.localization.Localization(__file__, 825, 69), '+', i_311223, int_311224)
            
            # Getting the type of 'l' (line 825)
            l_311226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 67), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 825)
            getitem___311227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 67), l_311226, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 825)
            subscript_call_result_311228 = invoke(stypy.reporting.localization.Localization(__file__, 825, 67), getitem___311227, result_add_311225)
            
            # Processing the call keyword arguments (line 825)
            kwargs_311229 = {}
            # Getting the type of '_parsems' (line 825)
            _parsems_311222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 58), '_parsems', False)
            # Calling _parsems(args, kwargs) (line 825)
            _parsems_call_result_311230 = invoke(stypy.reporting.localization.Localization(__file__, 825, 58), _parsems_311222, *[subscript_call_result_311228], **kwargs_311229)
            
            # Assigning a type to the variable 'call_assignment_308908' (line 825)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 28), 'call_assignment_308908', _parsems_call_result_311230)
            
            # Assigning a Call to a Name (line 825):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_311233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 28), 'int')
            # Processing the call keyword arguments
            kwargs_311234 = {}
            # Getting the type of 'call_assignment_308908' (line 825)
            call_assignment_308908_311231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 28), 'call_assignment_308908', False)
            # Obtaining the member '__getitem__' of a type (line 825)
            getitem___311232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 28), call_assignment_308908_311231, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_311235 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___311232, *[int_311233], **kwargs_311234)
            
            # Assigning a type to the variable 'call_assignment_308909' (line 825)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 28), 'call_assignment_308909', getitem___call_result_311235)
            
            # Assigning a Name to a Attribute (line 825):
            # Getting the type of 'call_assignment_308909' (line 825)
            call_assignment_308909_311236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 28), 'call_assignment_308909')
            # Getting the type of 'res' (line 825)
            res_311237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 28), 'res')
            # Setting the type of the member 'second' of a type (line 825)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 28), res_311237, 'second', call_assignment_308909_311236)
            
            # Assigning a Call to a Name (line 825):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_311240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 28), 'int')
            # Processing the call keyword arguments
            kwargs_311241 = {}
            # Getting the type of 'call_assignment_308908' (line 825)
            call_assignment_308908_311238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 28), 'call_assignment_308908', False)
            # Obtaining the member '__getitem__' of a type (line 825)
            getitem___311239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 28), call_assignment_308908_311238, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_311242 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___311239, *[int_311240], **kwargs_311241)
            
            # Assigning a type to the variable 'call_assignment_308910' (line 825)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 28), 'call_assignment_308910', getitem___call_result_311242)
            
            # Assigning a Name to a Attribute (line 825):
            # Getting the type of 'call_assignment_308910' (line 825)
            call_assignment_308910_311243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 28), 'call_assignment_308910')
            # Getting the type of 'res' (line 825)
            res_311244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 40), 'res')
            # Setting the type of the member 'microsecond' of a type (line 825)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 40), res_311244, 'microsecond', call_assignment_308910_311243)
            
            # Getting the type of 'i' (line 826)
            i_311245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 28), 'i')
            int_311246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 33), 'int')
            # Applying the binary operator '+=' (line 826)
            result_iadd_311247 = python_operator(stypy.reporting.localization.Localization(__file__, 826, 28), '+=', i_311245, int_311246)
            # Assigning a type to the variable 'i' (line 826)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 28), 'i', result_iadd_311247)
            
            # SSA join for if statement (line 824)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the else part of an if statement (line 812)
            module_type_store.open_ssa_branch('else')
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'i' (line 828)
            i_311248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 25), 'i')
            # Getting the type of 'len_l' (line 828)
            len_l_311249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 29), 'len_l')
            # Applying the binary operator '<' (line 828)
            result_lt_311250 = python_operator(stypy.reporting.localization.Localization(__file__, 828, 25), '<', i_311248, len_l_311249)
            
            
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 828)
            i_311251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 41), 'i')
            # Getting the type of 'l' (line 828)
            l_311252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 39), 'l')
            # Obtaining the member '__getitem__' of a type (line 828)
            getitem___311253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 39), l_311252, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 828)
            subscript_call_result_311254 = invoke(stypy.reporting.localization.Localization(__file__, 828, 39), getitem___311253, i_311251)
            
            
            # Obtaining an instance of the builtin type 'tuple' (line 828)
            tuple_311255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 48), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 828)
            # Adding element type (line 828)
            unicode_311256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 48), 'unicode', u'-')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 828, 48), tuple_311255, unicode_311256)
            # Adding element type (line 828)
            unicode_311257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 53), 'unicode', u'/')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 828, 48), tuple_311255, unicode_311257)
            # Adding element type (line 828)
            unicode_311258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 58), 'unicode', u'.')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 828, 48), tuple_311255, unicode_311258)
            
            # Applying the binary operator 'in' (line 828)
            result_contains_311259 = python_operator(stypy.reporting.localization.Localization(__file__, 828, 39), 'in', subscript_call_result_311254, tuple_311255)
            
            # Applying the binary operator 'and' (line 828)
            result_and_keyword_311260 = python_operator(stypy.reporting.localization.Localization(__file__, 828, 25), 'and', result_lt_311250, result_contains_311259)
            
            # Testing the type of an if condition (line 828)
            if_condition_311261 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 828, 25), result_and_keyword_311260)
            # Assigning a type to the variable 'if_condition_311261' (line 828)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 25), 'if_condition_311261', if_condition_311261)
            # SSA begins for if statement (line 828)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Name (line 829):
            
            # Assigning a Subscript to a Name (line 829):
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 829)
            i_311262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 32), 'i')
            # Getting the type of 'l' (line 829)
            l_311263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 30), 'l')
            # Obtaining the member '__getitem__' of a type (line 829)
            getitem___311264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 30), l_311263, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 829)
            subscript_call_result_311265 = invoke(stypy.reporting.localization.Localization(__file__, 829, 30), getitem___311264, i_311262)
            
            # Assigning a type to the variable 'sep' (line 829)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 829, 24), 'sep', subscript_call_result_311265)
            
            # Call to append(...): (line 830)
            # Processing the call arguments (line 830)
            # Getting the type of 'value_repr' (line 830)
            value_repr_311268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 35), 'value_repr', False)
            # Processing the call keyword arguments (line 830)
            kwargs_311269 = {}
            # Getting the type of 'ymd' (line 830)
            ymd_311266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 24), 'ymd', False)
            # Obtaining the member 'append' of a type (line 830)
            append_311267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 830, 24), ymd_311266, 'append')
            # Calling append(args, kwargs) (line 830)
            append_call_result_311270 = invoke(stypy.reporting.localization.Localization(__file__, 830, 24), append_311267, *[value_repr_311268], **kwargs_311269)
            
            
            # Getting the type of 'i' (line 831)
            i_311271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 24), 'i')
            int_311272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 831, 29), 'int')
            # Applying the binary operator '+=' (line 831)
            result_iadd_311273 = python_operator(stypy.reporting.localization.Localization(__file__, 831, 24), '+=', i_311271, int_311272)
            # Assigning a type to the variable 'i' (line 831)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 831, 24), 'i', result_iadd_311273)
            
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'i' (line 833)
            i_311274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 27), 'i')
            # Getting the type of 'len_l' (line 833)
            len_l_311275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 31), 'len_l')
            # Applying the binary operator '<' (line 833)
            result_lt_311276 = python_operator(stypy.reporting.localization.Localization(__file__, 833, 27), '<', i_311274, len_l_311275)
            
            
            
            # Call to jump(...): (line 833)
            # Processing the call arguments (line 833)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 833)
            i_311279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 57), 'i', False)
            # Getting the type of 'l' (line 833)
            l_311280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 55), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 833)
            getitem___311281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 55), l_311280, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 833)
            subscript_call_result_311282 = invoke(stypy.reporting.localization.Localization(__file__, 833, 55), getitem___311281, i_311279)
            
            # Processing the call keyword arguments (line 833)
            kwargs_311283 = {}
            # Getting the type of 'info' (line 833)
            info_311277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 45), 'info', False)
            # Obtaining the member 'jump' of a type (line 833)
            jump_311278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 45), info_311277, 'jump')
            # Calling jump(args, kwargs) (line 833)
            jump_call_result_311284 = invoke(stypy.reporting.localization.Localization(__file__, 833, 45), jump_311278, *[subscript_call_result_311282], **kwargs_311283)
            
            # Applying the 'not' unary operator (line 833)
            result_not__311285 = python_operator(stypy.reporting.localization.Localization(__file__, 833, 41), 'not', jump_call_result_311284)
            
            # Applying the binary operator 'and' (line 833)
            result_and_keyword_311286 = python_operator(stypy.reporting.localization.Localization(__file__, 833, 27), 'and', result_lt_311276, result_not__311285)
            
            # Testing the type of an if condition (line 833)
            if_condition_311287 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 833, 24), result_and_keyword_311286)
            # Assigning a type to the variable 'if_condition_311287' (line 833)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 833, 24), 'if_condition_311287', if_condition_311287)
            # SSA begins for if statement (line 833)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            
            # SSA begins for try-except statement (line 834)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Call to append(...): (line 836)
            # Processing the call arguments (line 836)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 836)
            i_311290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 45), 'i', False)
            # Getting the type of 'l' (line 836)
            l_311291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 43), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 836)
            getitem___311292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 43), l_311291, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 836)
            subscript_call_result_311293 = invoke(stypy.reporting.localization.Localization(__file__, 836, 43), getitem___311292, i_311290)
            
            # Processing the call keyword arguments (line 836)
            kwargs_311294 = {}
            # Getting the type of 'ymd' (line 836)
            ymd_311288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 32), 'ymd', False)
            # Obtaining the member 'append' of a type (line 836)
            append_311289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 32), ymd_311288, 'append')
            # Calling append(args, kwargs) (line 836)
            append_call_result_311295 = invoke(stypy.reporting.localization.Localization(__file__, 836, 32), append_311289, *[subscript_call_result_311293], **kwargs_311294)
            
            # SSA branch for the except part of a try statement (line 834)
            # SSA branch for the except 'ValueError' branch of a try statement (line 834)
            module_type_store.open_ssa_branch('except')
            
            # Assigning a Call to a Name (line 839):
            
            # Assigning a Call to a Name (line 839):
            
            # Call to month(...): (line 839)
            # Processing the call arguments (line 839)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 839)
            i_311298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 53), 'i', False)
            # Getting the type of 'l' (line 839)
            l_311299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 51), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 839)
            getitem___311300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 839, 51), l_311299, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 839)
            subscript_call_result_311301 = invoke(stypy.reporting.localization.Localization(__file__, 839, 51), getitem___311300, i_311298)
            
            # Processing the call keyword arguments (line 839)
            kwargs_311302 = {}
            # Getting the type of 'info' (line 839)
            info_311296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 40), 'info', False)
            # Obtaining the member 'month' of a type (line 839)
            month_311297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 839, 40), info_311296, 'month')
            # Calling month(args, kwargs) (line 839)
            month_call_result_311303 = invoke(stypy.reporting.localization.Localization(__file__, 839, 40), month_311297, *[subscript_call_result_311301], **kwargs_311302)
            
            # Assigning a type to the variable 'value' (line 839)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 839, 32), 'value', month_call_result_311303)
            
            # Type idiom detected: calculating its left and rigth part (line 841)
            # Getting the type of 'value' (line 841)
            value_311304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 32), 'value')
            # Getting the type of 'None' (line 841)
            None_311305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 48), 'None')
            
            (may_be_311306, more_types_in_union_311307) = may_not_be_none(value_311304, None_311305)

            if may_be_311306:

                if more_types_in_union_311307:
                    # Runtime conditional SSA (line 841)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Call to append(...): (line 842)
                # Processing the call arguments (line 842)
                # Getting the type of 'value' (line 842)
                value_311310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 47), 'value', False)
                # Processing the call keyword arguments (line 842)
                kwargs_311311 = {}
                # Getting the type of 'ymd' (line 842)
                ymd_311308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 36), 'ymd', False)
                # Obtaining the member 'append' of a type (line 842)
                append_311309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 842, 36), ymd_311308, 'append')
                # Calling append(args, kwargs) (line 842)
                append_call_result_311312 = invoke(stypy.reporting.localization.Localization(__file__, 842, 36), append_311309, *[value_311310], **kwargs_311311)
                
                # Evaluating assert statement condition
                
                # Getting the type of 'mstridx' (line 843)
                mstridx_311313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 43), 'mstridx')
                int_311314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 843, 54), 'int')
                # Applying the binary operator '==' (line 843)
                result_eq_311315 = python_operator(stypy.reporting.localization.Localization(__file__, 843, 43), '==', mstridx_311313, int_311314)
                
                
                # Assigning a BinOp to a Name (line 844):
                
                # Assigning a BinOp to a Name (line 844):
                
                # Call to len(...): (line 844)
                # Processing the call arguments (line 844)
                # Getting the type of 'ymd' (line 844)
                ymd_311317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 50), 'ymd', False)
                # Processing the call keyword arguments (line 844)
                kwargs_311318 = {}
                # Getting the type of 'len' (line 844)
                len_311316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 46), 'len', False)
                # Calling len(args, kwargs) (line 844)
                len_call_result_311319 = invoke(stypy.reporting.localization.Localization(__file__, 844, 46), len_311316, *[ymd_311317], **kwargs_311318)
                
                int_311320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 844, 55), 'int')
                # Applying the binary operator '-' (line 844)
                result_sub_311321 = python_operator(stypy.reporting.localization.Localization(__file__, 844, 46), '-', len_call_result_311319, int_311320)
                
                # Assigning a type to the variable 'mstridx' (line 844)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 844, 36), 'mstridx', result_sub_311321)

                if more_types_in_union_311307:
                    # Runtime conditional SSA for else branch (line 841)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_311306) or more_types_in_union_311307):
                
                # Obtaining an instance of the builtin type 'tuple' (line 846)
                tuple_311322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 846, 43), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 846)
                # Adding element type (line 846)
                # Getting the type of 'None' (line 846)
                None_311323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 43), 'None')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 846, 43), tuple_311322, None_311323)
                # Adding element type (line 846)
                # Getting the type of 'None' (line 846)
                None_311324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 49), 'None')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 846, 43), tuple_311322, None_311324)
                
                # Assigning a type to the variable 'stypy_return_type' (line 846)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 846, 36), 'stypy_return_type', tuple_311322)

                if (may_be_311306 and more_types_in_union_311307):
                    # SSA join for if statement (line 841)
                    module_type_store = module_type_store.join_ssa_context()


            
            # SSA join for try-except statement (line 834)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Getting the type of 'i' (line 848)
            i_311325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 28), 'i')
            int_311326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 848, 33), 'int')
            # Applying the binary operator '+=' (line 848)
            result_iadd_311327 = python_operator(stypy.reporting.localization.Localization(__file__, 848, 28), '+=', i_311325, int_311326)
            # Assigning a type to the variable 'i' (line 848)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 848, 28), 'i', result_iadd_311327)
            
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'i' (line 850)
            i_311328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 31), 'i')
            # Getting the type of 'len_l' (line 850)
            len_l_311329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 35), 'len_l')
            # Applying the binary operator '<' (line 850)
            result_lt_311330 = python_operator(stypy.reporting.localization.Localization(__file__, 850, 31), '<', i_311328, len_l_311329)
            
            
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 850)
            i_311331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 47), 'i')
            # Getting the type of 'l' (line 850)
            l_311332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 45), 'l')
            # Obtaining the member '__getitem__' of a type (line 850)
            getitem___311333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 850, 45), l_311332, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 850)
            subscript_call_result_311334 = invoke(stypy.reporting.localization.Localization(__file__, 850, 45), getitem___311333, i_311331)
            
            # Getting the type of 'sep' (line 850)
            sep_311335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 53), 'sep')
            # Applying the binary operator '==' (line 850)
            result_eq_311336 = python_operator(stypy.reporting.localization.Localization(__file__, 850, 45), '==', subscript_call_result_311334, sep_311335)
            
            # Applying the binary operator 'and' (line 850)
            result_and_keyword_311337 = python_operator(stypy.reporting.localization.Localization(__file__, 850, 31), 'and', result_lt_311330, result_eq_311336)
            
            # Testing the type of an if condition (line 850)
            if_condition_311338 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 850, 28), result_and_keyword_311337)
            # Assigning a type to the variable 'if_condition_311338' (line 850)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 850, 28), 'if_condition_311338', if_condition_311338)
            # SSA begins for if statement (line 850)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Getting the type of 'i' (line 852)
            i_311339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 32), 'i')
            int_311340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 852, 37), 'int')
            # Applying the binary operator '+=' (line 852)
            result_iadd_311341 = python_operator(stypy.reporting.localization.Localization(__file__, 852, 32), '+=', i_311339, int_311340)
            # Assigning a type to the variable 'i' (line 852)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 852, 32), 'i', result_iadd_311341)
            
            
            # Assigning a Call to a Name (line 853):
            
            # Assigning a Call to a Name (line 853):
            
            # Call to month(...): (line 853)
            # Processing the call arguments (line 853)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 853)
            i_311344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 53), 'i', False)
            # Getting the type of 'l' (line 853)
            l_311345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 51), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 853)
            getitem___311346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 853, 51), l_311345, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 853)
            subscript_call_result_311347 = invoke(stypy.reporting.localization.Localization(__file__, 853, 51), getitem___311346, i_311344)
            
            # Processing the call keyword arguments (line 853)
            kwargs_311348 = {}
            # Getting the type of 'info' (line 853)
            info_311342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 40), 'info', False)
            # Obtaining the member 'month' of a type (line 853)
            month_311343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 853, 40), info_311342, 'month')
            # Calling month(args, kwargs) (line 853)
            month_call_result_311349 = invoke(stypy.reporting.localization.Localization(__file__, 853, 40), month_311343, *[subscript_call_result_311347], **kwargs_311348)
            
            # Assigning a type to the variable 'value' (line 853)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 853, 32), 'value', month_call_result_311349)
            
            # Type idiom detected: calculating its left and rigth part (line 855)
            # Getting the type of 'value' (line 855)
            value_311350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 32), 'value')
            # Getting the type of 'None' (line 855)
            None_311351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 48), 'None')
            
            (may_be_311352, more_types_in_union_311353) = may_not_be_none(value_311350, None_311351)

            if may_be_311352:

                if more_types_in_union_311353:
                    # Runtime conditional SSA (line 855)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Call to append(...): (line 856)
                # Processing the call arguments (line 856)
                # Getting the type of 'value' (line 856)
                value_311356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 47), 'value', False)
                # Processing the call keyword arguments (line 856)
                kwargs_311357 = {}
                # Getting the type of 'ymd' (line 856)
                ymd_311354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 36), 'ymd', False)
                # Obtaining the member 'append' of a type (line 856)
                append_311355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 856, 36), ymd_311354, 'append')
                # Calling append(args, kwargs) (line 856)
                append_call_result_311358 = invoke(stypy.reporting.localization.Localization(__file__, 856, 36), append_311355, *[value_311356], **kwargs_311357)
                
                
                # Assigning a BinOp to a Name (line 857):
                
                # Assigning a BinOp to a Name (line 857):
                
                # Call to len(...): (line 857)
                # Processing the call arguments (line 857)
                # Getting the type of 'ymd' (line 857)
                ymd_311360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 50), 'ymd', False)
                # Processing the call keyword arguments (line 857)
                kwargs_311361 = {}
                # Getting the type of 'len' (line 857)
                len_311359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 46), 'len', False)
                # Calling len(args, kwargs) (line 857)
                len_call_result_311362 = invoke(stypy.reporting.localization.Localization(__file__, 857, 46), len_311359, *[ymd_311360], **kwargs_311361)
                
                int_311363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 857, 55), 'int')
                # Applying the binary operator '-' (line 857)
                result_sub_311364 = python_operator(stypy.reporting.localization.Localization(__file__, 857, 46), '-', len_call_result_311362, int_311363)
                
                # Assigning a type to the variable 'mstridx' (line 857)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 857, 36), 'mstridx', result_sub_311364)
                # Evaluating assert statement condition
                
                # Getting the type of 'mstridx' (line 858)
                mstridx_311365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 858, 43), 'mstridx')
                int_311366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 858, 54), 'int')
                # Applying the binary operator '==' (line 858)
                result_eq_311367 = python_operator(stypy.reporting.localization.Localization(__file__, 858, 43), '==', mstridx_311365, int_311366)
                

                if more_types_in_union_311353:
                    # Runtime conditional SSA for else branch (line 855)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_311352) or more_types_in_union_311353):
                
                # Call to append(...): (line 860)
                # Processing the call arguments (line 860)
                
                # Obtaining the type of the subscript
                # Getting the type of 'i' (line 860)
                i_311370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 49), 'i', False)
                # Getting the type of 'l' (line 860)
                l_311371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 47), 'l', False)
                # Obtaining the member '__getitem__' of a type (line 860)
                getitem___311372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 860, 47), l_311371, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 860)
                subscript_call_result_311373 = invoke(stypy.reporting.localization.Localization(__file__, 860, 47), getitem___311372, i_311370)
                
                # Processing the call keyword arguments (line 860)
                kwargs_311374 = {}
                # Getting the type of 'ymd' (line 860)
                ymd_311368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 36), 'ymd', False)
                # Obtaining the member 'append' of a type (line 860)
                append_311369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 860, 36), ymd_311368, 'append')
                # Calling append(args, kwargs) (line 860)
                append_call_result_311375 = invoke(stypy.reporting.localization.Localization(__file__, 860, 36), append_311369, *[subscript_call_result_311373], **kwargs_311374)
                

                if (may_be_311352 and more_types_in_union_311353):
                    # SSA join for if statement (line 855)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            # Getting the type of 'i' (line 862)
            i_311376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 32), 'i')
            int_311377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 862, 37), 'int')
            # Applying the binary operator '+=' (line 862)
            result_iadd_311378 = python_operator(stypy.reporting.localization.Localization(__file__, 862, 32), '+=', i_311376, int_311377)
            # Assigning a type to the variable 'i' (line 862)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 862, 32), 'i', result_iadd_311378)
            
            # SSA join for if statement (line 850)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 833)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the else part of an if statement (line 828)
            module_type_store.open_ssa_branch('else')
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'i' (line 863)
            i_311379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 25), 'i')
            # Getting the type of 'len_l' (line 863)
            len_l_311380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 30), 'len_l')
            # Applying the binary operator '>=' (line 863)
            result_ge_311381 = python_operator(stypy.reporting.localization.Localization(__file__, 863, 25), '>=', i_311379, len_l_311380)
            
            
            # Call to jump(...): (line 863)
            # Processing the call arguments (line 863)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 863)
            i_311384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 51), 'i', False)
            # Getting the type of 'l' (line 863)
            l_311385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 49), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 863)
            getitem___311386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 863, 49), l_311385, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 863)
            subscript_call_result_311387 = invoke(stypy.reporting.localization.Localization(__file__, 863, 49), getitem___311386, i_311384)
            
            # Processing the call keyword arguments (line 863)
            kwargs_311388 = {}
            # Getting the type of 'info' (line 863)
            info_311382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 39), 'info', False)
            # Obtaining the member 'jump' of a type (line 863)
            jump_311383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 863, 39), info_311382, 'jump')
            # Calling jump(args, kwargs) (line 863)
            jump_call_result_311389 = invoke(stypy.reporting.localization.Localization(__file__, 863, 39), jump_311383, *[subscript_call_result_311387], **kwargs_311388)
            
            # Applying the binary operator 'or' (line 863)
            result_or_keyword_311390 = python_operator(stypy.reporting.localization.Localization(__file__, 863, 25), 'or', result_ge_311381, jump_call_result_311389)
            
            # Testing the type of an if condition (line 863)
            if_condition_311391 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 863, 25), result_or_keyword_311390)
            # Assigning a type to the variable 'if_condition_311391' (line 863)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 863, 25), 'if_condition_311391', if_condition_311391)
            # SSA begins for if statement (line 863)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'i' (line 864)
            i_311392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 27), 'i')
            int_311393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 864, 29), 'int')
            # Applying the binary operator '+' (line 864)
            result_add_311394 = python_operator(stypy.reporting.localization.Localization(__file__, 864, 27), '+', i_311392, int_311393)
            
            # Getting the type of 'len_l' (line 864)
            len_l_311395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 33), 'len_l')
            # Applying the binary operator '<' (line 864)
            result_lt_311396 = python_operator(stypy.reporting.localization.Localization(__file__, 864, 27), '<', result_add_311394, len_l_311395)
            
            
            
            # Call to ampm(...): (line 864)
            # Processing the call arguments (line 864)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 864)
            i_311399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 55), 'i', False)
            int_311400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 864, 57), 'int')
            # Applying the binary operator '+' (line 864)
            result_add_311401 = python_operator(stypy.reporting.localization.Localization(__file__, 864, 55), '+', i_311399, int_311400)
            
            # Getting the type of 'l' (line 864)
            l_311402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 53), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 864)
            getitem___311403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 864, 53), l_311402, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 864)
            subscript_call_result_311404 = invoke(stypy.reporting.localization.Localization(__file__, 864, 53), getitem___311403, result_add_311401)
            
            # Processing the call keyword arguments (line 864)
            kwargs_311405 = {}
            # Getting the type of 'info' (line 864)
            info_311397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 43), 'info', False)
            # Obtaining the member 'ampm' of a type (line 864)
            ampm_311398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 864, 43), info_311397, 'ampm')
            # Calling ampm(args, kwargs) (line 864)
            ampm_call_result_311406 = invoke(stypy.reporting.localization.Localization(__file__, 864, 43), ampm_311398, *[subscript_call_result_311404], **kwargs_311405)
            
            # Getting the type of 'None' (line 864)
            None_311407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 68), 'None')
            # Applying the binary operator 'isnot' (line 864)
            result_is_not_311408 = python_operator(stypy.reporting.localization.Localization(__file__, 864, 43), 'isnot', ampm_call_result_311406, None_311407)
            
            # Applying the binary operator 'and' (line 864)
            result_and_keyword_311409 = python_operator(stypy.reporting.localization.Localization(__file__, 864, 27), 'and', result_lt_311396, result_is_not_311408)
            
            # Testing the type of an if condition (line 864)
            if_condition_311410 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 864, 24), result_and_keyword_311409)
            # Assigning a type to the variable 'if_condition_311410' (line 864)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 864, 24), 'if_condition_311410', if_condition_311410)
            # SSA begins for if statement (line 864)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 866):
            
            # Assigning a Call to a Attribute (line 866):
            
            # Call to int(...): (line 866)
            # Processing the call arguments (line 866)
            # Getting the type of 'value' (line 866)
            value_311412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 43), 'value', False)
            # Processing the call keyword arguments (line 866)
            kwargs_311413 = {}
            # Getting the type of 'int' (line 866)
            int_311411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 39), 'int', False)
            # Calling int(args, kwargs) (line 866)
            int_call_result_311414 = invoke(stypy.reporting.localization.Localization(__file__, 866, 39), int_311411, *[value_311412], **kwargs_311413)
            
            # Getting the type of 'res' (line 866)
            res_311415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 28), 'res')
            # Setting the type of the member 'hour' of a type (line 866)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 866, 28), res_311415, 'hour', int_call_result_311414)
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'res' (line 868)
            res_311416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 31), 'res')
            # Obtaining the member 'hour' of a type (line 868)
            hour_311417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 868, 31), res_311416, 'hour')
            int_311418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 868, 42), 'int')
            # Applying the binary operator '<' (line 868)
            result_lt_311419 = python_operator(stypy.reporting.localization.Localization(__file__, 868, 31), '<', hour_311417, int_311418)
            
            
            
            # Call to ampm(...): (line 868)
            # Processing the call arguments (line 868)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 868)
            i_311422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 61), 'i', False)
            int_311423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 868, 63), 'int')
            # Applying the binary operator '+' (line 868)
            result_add_311424 = python_operator(stypy.reporting.localization.Localization(__file__, 868, 61), '+', i_311422, int_311423)
            
            # Getting the type of 'l' (line 868)
            l_311425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 59), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 868)
            getitem___311426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 868, 59), l_311425, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 868)
            subscript_call_result_311427 = invoke(stypy.reporting.localization.Localization(__file__, 868, 59), getitem___311426, result_add_311424)
            
            # Processing the call keyword arguments (line 868)
            kwargs_311428 = {}
            # Getting the type of 'info' (line 868)
            info_311420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 49), 'info', False)
            # Obtaining the member 'ampm' of a type (line 868)
            ampm_311421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 868, 49), info_311420, 'ampm')
            # Calling ampm(args, kwargs) (line 868)
            ampm_call_result_311429 = invoke(stypy.reporting.localization.Localization(__file__, 868, 49), ampm_311421, *[subscript_call_result_311427], **kwargs_311428)
            
            int_311430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 868, 70), 'int')
            # Applying the binary operator '==' (line 868)
            result_eq_311431 = python_operator(stypy.reporting.localization.Localization(__file__, 868, 49), '==', ampm_call_result_311429, int_311430)
            
            # Applying the binary operator 'and' (line 868)
            result_and_keyword_311432 = python_operator(stypy.reporting.localization.Localization(__file__, 868, 31), 'and', result_lt_311419, result_eq_311431)
            
            # Testing the type of an if condition (line 868)
            if_condition_311433 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 868, 28), result_and_keyword_311432)
            # Assigning a type to the variable 'if_condition_311433' (line 868)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 868, 28), 'if_condition_311433', if_condition_311433)
            # SSA begins for if statement (line 868)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Getting the type of 'res' (line 869)
            res_311434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 32), 'res')
            # Obtaining the member 'hour' of a type (line 869)
            hour_311435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 869, 32), res_311434, 'hour')
            int_311436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 869, 44), 'int')
            # Applying the binary operator '+=' (line 869)
            result_iadd_311437 = python_operator(stypy.reporting.localization.Localization(__file__, 869, 32), '+=', hour_311435, int_311436)
            # Getting the type of 'res' (line 869)
            res_311438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 32), 'res')
            # Setting the type of the member 'hour' of a type (line 869)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 869, 32), res_311438, 'hour', result_iadd_311437)
            
            # SSA branch for the else part of an if statement (line 868)
            module_type_store.open_ssa_branch('else')
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'res' (line 870)
            res_311439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 33), 'res')
            # Obtaining the member 'hour' of a type (line 870)
            hour_311440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 33), res_311439, 'hour')
            int_311441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 45), 'int')
            # Applying the binary operator '==' (line 870)
            result_eq_311442 = python_operator(stypy.reporting.localization.Localization(__file__, 870, 33), '==', hour_311440, int_311441)
            
            
            
            # Call to ampm(...): (line 870)
            # Processing the call arguments (line 870)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 870)
            i_311445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 64), 'i', False)
            int_311446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 66), 'int')
            # Applying the binary operator '+' (line 870)
            result_add_311447 = python_operator(stypy.reporting.localization.Localization(__file__, 870, 64), '+', i_311445, int_311446)
            
            # Getting the type of 'l' (line 870)
            l_311448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 62), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 870)
            getitem___311449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 62), l_311448, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 870)
            subscript_call_result_311450 = invoke(stypy.reporting.localization.Localization(__file__, 870, 62), getitem___311449, result_add_311447)
            
            # Processing the call keyword arguments (line 870)
            kwargs_311451 = {}
            # Getting the type of 'info' (line 870)
            info_311443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 52), 'info', False)
            # Obtaining the member 'ampm' of a type (line 870)
            ampm_311444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 52), info_311443, 'ampm')
            # Calling ampm(args, kwargs) (line 870)
            ampm_call_result_311452 = invoke(stypy.reporting.localization.Localization(__file__, 870, 52), ampm_311444, *[subscript_call_result_311450], **kwargs_311451)
            
            int_311453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 73), 'int')
            # Applying the binary operator '==' (line 870)
            result_eq_311454 = python_operator(stypy.reporting.localization.Localization(__file__, 870, 52), '==', ampm_call_result_311452, int_311453)
            
            # Applying the binary operator 'and' (line 870)
            result_and_keyword_311455 = python_operator(stypy.reporting.localization.Localization(__file__, 870, 33), 'and', result_eq_311442, result_eq_311454)
            
            # Testing the type of an if condition (line 870)
            if_condition_311456 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 870, 33), result_and_keyword_311455)
            # Assigning a type to the variable 'if_condition_311456' (line 870)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 870, 33), 'if_condition_311456', if_condition_311456)
            # SSA begins for if statement (line 870)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Num to a Attribute (line 871):
            
            # Assigning a Num to a Attribute (line 871):
            int_311457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 871, 43), 'int')
            # Getting the type of 'res' (line 871)
            res_311458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 32), 'res')
            # Setting the type of the member 'hour' of a type (line 871)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 871, 32), res_311458, 'hour', int_311457)
            # SSA join for if statement (line 870)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 868)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Getting the type of 'i' (line 873)
            i_311459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 28), 'i')
            int_311460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 873, 33), 'int')
            # Applying the binary operator '+=' (line 873)
            result_iadd_311461 = python_operator(stypy.reporting.localization.Localization(__file__, 873, 28), '+=', i_311459, int_311460)
            # Assigning a type to the variable 'i' (line 873)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 873, 28), 'i', result_iadd_311461)
            
            # SSA branch for the else part of an if statement (line 864)
            module_type_store.open_ssa_branch('else')
            
            # Call to append(...): (line 876)
            # Processing the call arguments (line 876)
            # Getting the type of 'value' (line 876)
            value_311464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 39), 'value', False)
            # Processing the call keyword arguments (line 876)
            kwargs_311465 = {}
            # Getting the type of 'ymd' (line 876)
            ymd_311462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 28), 'ymd', False)
            # Obtaining the member 'append' of a type (line 876)
            append_311463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 28), ymd_311462, 'append')
            # Calling append(args, kwargs) (line 876)
            append_call_result_311466 = invoke(stypy.reporting.localization.Localization(__file__, 876, 28), append_311463, *[value_311464], **kwargs_311465)
            
            # SSA join for if statement (line 864)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Getting the type of 'i' (line 877)
            i_311467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 24), 'i')
            int_311468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 877, 29), 'int')
            # Applying the binary operator '+=' (line 877)
            result_iadd_311469 = python_operator(stypy.reporting.localization.Localization(__file__, 877, 24), '+=', i_311467, int_311468)
            # Assigning a type to the variable 'i' (line 877)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 877, 24), 'i', result_iadd_311469)
            
            # SSA branch for the else part of an if statement (line 863)
            module_type_store.open_ssa_branch('else')
            
            
            
            # Call to ampm(...): (line 878)
            # Processing the call arguments (line 878)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 878)
            i_311472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 37), 'i', False)
            # Getting the type of 'l' (line 878)
            l_311473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 35), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 878)
            getitem___311474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 878, 35), l_311473, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 878)
            subscript_call_result_311475 = invoke(stypy.reporting.localization.Localization(__file__, 878, 35), getitem___311474, i_311472)
            
            # Processing the call keyword arguments (line 878)
            kwargs_311476 = {}
            # Getting the type of 'info' (line 878)
            info_311470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 25), 'info', False)
            # Obtaining the member 'ampm' of a type (line 878)
            ampm_311471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 878, 25), info_311470, 'ampm')
            # Calling ampm(args, kwargs) (line 878)
            ampm_call_result_311477 = invoke(stypy.reporting.localization.Localization(__file__, 878, 25), ampm_311471, *[subscript_call_result_311475], **kwargs_311476)
            
            # Getting the type of 'None' (line 878)
            None_311478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 48), 'None')
            # Applying the binary operator 'isnot' (line 878)
            result_is_not_311479 = python_operator(stypy.reporting.localization.Localization(__file__, 878, 25), 'isnot', ampm_call_result_311477, None_311478)
            
            # Testing the type of an if condition (line 878)
            if_condition_311480 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 878, 25), result_is_not_311479)
            # Assigning a type to the variable 'if_condition_311480' (line 878)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 878, 25), 'if_condition_311480', if_condition_311480)
            # SSA begins for if statement (line 878)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 881):
            
            # Assigning a Call to a Attribute (line 881):
            
            # Call to int(...): (line 881)
            # Processing the call arguments (line 881)
            # Getting the type of 'value' (line 881)
            value_311482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 39), 'value', False)
            # Processing the call keyword arguments (line 881)
            kwargs_311483 = {}
            # Getting the type of 'int' (line 881)
            int_311481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 35), 'int', False)
            # Calling int(args, kwargs) (line 881)
            int_call_result_311484 = invoke(stypy.reporting.localization.Localization(__file__, 881, 35), int_311481, *[value_311482], **kwargs_311483)
            
            # Getting the type of 'res' (line 881)
            res_311485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 24), 'res')
            # Setting the type of the member 'hour' of a type (line 881)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 24), res_311485, 'hour', int_call_result_311484)
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'res' (line 883)
            res_311486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 27), 'res')
            # Obtaining the member 'hour' of a type (line 883)
            hour_311487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 27), res_311486, 'hour')
            int_311488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 883, 38), 'int')
            # Applying the binary operator '<' (line 883)
            result_lt_311489 = python_operator(stypy.reporting.localization.Localization(__file__, 883, 27), '<', hour_311487, int_311488)
            
            
            
            # Call to ampm(...): (line 883)
            # Processing the call arguments (line 883)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 883)
            i_311492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 57), 'i', False)
            # Getting the type of 'l' (line 883)
            l_311493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 55), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 883)
            getitem___311494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 55), l_311493, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 883)
            subscript_call_result_311495 = invoke(stypy.reporting.localization.Localization(__file__, 883, 55), getitem___311494, i_311492)
            
            # Processing the call keyword arguments (line 883)
            kwargs_311496 = {}
            # Getting the type of 'info' (line 883)
            info_311490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 45), 'info', False)
            # Obtaining the member 'ampm' of a type (line 883)
            ampm_311491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 45), info_311490, 'ampm')
            # Calling ampm(args, kwargs) (line 883)
            ampm_call_result_311497 = invoke(stypy.reporting.localization.Localization(__file__, 883, 45), ampm_311491, *[subscript_call_result_311495], **kwargs_311496)
            
            int_311498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 883, 64), 'int')
            # Applying the binary operator '==' (line 883)
            result_eq_311499 = python_operator(stypy.reporting.localization.Localization(__file__, 883, 45), '==', ampm_call_result_311497, int_311498)
            
            # Applying the binary operator 'and' (line 883)
            result_and_keyword_311500 = python_operator(stypy.reporting.localization.Localization(__file__, 883, 27), 'and', result_lt_311489, result_eq_311499)
            
            # Testing the type of an if condition (line 883)
            if_condition_311501 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 883, 24), result_and_keyword_311500)
            # Assigning a type to the variable 'if_condition_311501' (line 883)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 883, 24), 'if_condition_311501', if_condition_311501)
            # SSA begins for if statement (line 883)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Getting the type of 'res' (line 884)
            res_311502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 28), 'res')
            # Obtaining the member 'hour' of a type (line 884)
            hour_311503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 884, 28), res_311502, 'hour')
            int_311504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 884, 40), 'int')
            # Applying the binary operator '+=' (line 884)
            result_iadd_311505 = python_operator(stypy.reporting.localization.Localization(__file__, 884, 28), '+=', hour_311503, int_311504)
            # Getting the type of 'res' (line 884)
            res_311506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 28), 'res')
            # Setting the type of the member 'hour' of a type (line 884)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 884, 28), res_311506, 'hour', result_iadd_311505)
            
            # SSA branch for the else part of an if statement (line 883)
            module_type_store.open_ssa_branch('else')
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'res' (line 885)
            res_311507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 29), 'res')
            # Obtaining the member 'hour' of a type (line 885)
            hour_311508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 29), res_311507, 'hour')
            int_311509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 885, 41), 'int')
            # Applying the binary operator '==' (line 885)
            result_eq_311510 = python_operator(stypy.reporting.localization.Localization(__file__, 885, 29), '==', hour_311508, int_311509)
            
            
            
            # Call to ampm(...): (line 885)
            # Processing the call arguments (line 885)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 885)
            i_311513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 60), 'i', False)
            # Getting the type of 'l' (line 885)
            l_311514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 58), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 885)
            getitem___311515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 58), l_311514, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 885)
            subscript_call_result_311516 = invoke(stypy.reporting.localization.Localization(__file__, 885, 58), getitem___311515, i_311513)
            
            # Processing the call keyword arguments (line 885)
            kwargs_311517 = {}
            # Getting the type of 'info' (line 885)
            info_311511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 48), 'info', False)
            # Obtaining the member 'ampm' of a type (line 885)
            ampm_311512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 48), info_311511, 'ampm')
            # Calling ampm(args, kwargs) (line 885)
            ampm_call_result_311518 = invoke(stypy.reporting.localization.Localization(__file__, 885, 48), ampm_311512, *[subscript_call_result_311516], **kwargs_311517)
            
            int_311519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 885, 67), 'int')
            # Applying the binary operator '==' (line 885)
            result_eq_311520 = python_operator(stypy.reporting.localization.Localization(__file__, 885, 48), '==', ampm_call_result_311518, int_311519)
            
            # Applying the binary operator 'and' (line 885)
            result_and_keyword_311521 = python_operator(stypy.reporting.localization.Localization(__file__, 885, 29), 'and', result_eq_311510, result_eq_311520)
            
            # Testing the type of an if condition (line 885)
            if_condition_311522 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 885, 29), result_and_keyword_311521)
            # Assigning a type to the variable 'if_condition_311522' (line 885)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 885, 29), 'if_condition_311522', if_condition_311522)
            # SSA begins for if statement (line 885)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Num to a Attribute (line 886):
            
            # Assigning a Num to a Attribute (line 886):
            int_311523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 886, 39), 'int')
            # Getting the type of 'res' (line 886)
            res_311524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 28), 'res')
            # Setting the type of the member 'hour' of a type (line 886)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 886, 28), res_311524, 'hour', int_311523)
            # SSA join for if statement (line 885)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 883)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Getting the type of 'i' (line 887)
            i_311525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 24), 'i')
            int_311526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 887, 29), 'int')
            # Applying the binary operator '+=' (line 887)
            result_iadd_311527 = python_operator(stypy.reporting.localization.Localization(__file__, 887, 24), '+=', i_311525, int_311526)
            # Assigning a type to the variable 'i' (line 887)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 887, 24), 'i', result_iadd_311527)
            
            # SSA branch for the else part of an if statement (line 878)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'fuzzy' (line 889)
            fuzzy_311528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 29), 'fuzzy')
            # Applying the 'not' unary operator (line 889)
            result_not__311529 = python_operator(stypy.reporting.localization.Localization(__file__, 889, 25), 'not', fuzzy_311528)
            
            # Testing the type of an if condition (line 889)
            if_condition_311530 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 889, 25), result_not__311529)
            # Assigning a type to the variable 'if_condition_311530' (line 889)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 889, 25), 'if_condition_311530', if_condition_311530)
            # SSA begins for if statement (line 889)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Obtaining an instance of the builtin type 'tuple' (line 890)
            tuple_311531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 890, 31), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 890)
            # Adding element type (line 890)
            # Getting the type of 'None' (line 890)
            None_311532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 31), 'None')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 890, 31), tuple_311531, None_311532)
            # Adding element type (line 890)
            # Getting the type of 'None' (line 890)
            None_311533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 37), 'None')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 890, 31), tuple_311531, None_311533)
            
            # Assigning a type to the variable 'stypy_return_type' (line 890)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 890, 24), 'stypy_return_type', tuple_311531)
            # SSA branch for the else part of an if statement (line 889)
            module_type_store.open_ssa_branch('else')
            
            # Getting the type of 'i' (line 892)
            i_311534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 24), 'i')
            int_311535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 892, 29), 'int')
            # Applying the binary operator '+=' (line 892)
            result_iadd_311536 = python_operator(stypy.reporting.localization.Localization(__file__, 892, 24), '+=', i_311534, int_311535)
            # Assigning a type to the variable 'i' (line 892)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 892, 24), 'i', result_iadd_311536)
            
            # SSA join for if statement (line 889)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 878)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 863)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 828)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 812)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 793)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 745)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 731)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 715)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 705)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_310645:
                # SSA join for if statement (line 700)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 896):
        
        # Assigning a Call to a Name (line 896):
        
        # Call to weekday(...): (line 896)
        # Processing the call arguments (line 896)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 896)
        i_311539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 39), 'i', False)
        # Getting the type of 'l' (line 896)
        l_311540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 37), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 896)
        getitem___311541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 896, 37), l_311540, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 896)
        subscript_call_result_311542 = invoke(stypy.reporting.localization.Localization(__file__, 896, 37), getitem___311541, i_311539)
        
        # Processing the call keyword arguments (line 896)
        kwargs_311543 = {}
        # Getting the type of 'info' (line 896)
        info_311537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 24), 'info', False)
        # Obtaining the member 'weekday' of a type (line 896)
        weekday_311538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 896, 24), info_311537, 'weekday')
        # Calling weekday(args, kwargs) (line 896)
        weekday_call_result_311544 = invoke(stypy.reporting.localization.Localization(__file__, 896, 24), weekday_311538, *[subscript_call_result_311542], **kwargs_311543)
        
        # Assigning a type to the variable 'value' (line 896)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 16), 'value', weekday_call_result_311544)
        
        # Type idiom detected: calculating its left and rigth part (line 897)
        # Getting the type of 'value' (line 897)
        value_311545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 16), 'value')
        # Getting the type of 'None' (line 897)
        None_311546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 32), 'None')
        
        (may_be_311547, more_types_in_union_311548) = may_not_be_none(value_311545, None_311546)

        if may_be_311547:

            if more_types_in_union_311548:
                # Runtime conditional SSA (line 897)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 898):
            
            # Assigning a Name to a Attribute (line 898):
            # Getting the type of 'value' (line 898)
            value_311549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 34), 'value')
            # Getting the type of 'res' (line 898)
            res_311550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 20), 'res')
            # Setting the type of the member 'weekday' of a type (line 898)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 898, 20), res_311550, 'weekday', value_311549)
            
            # Getting the type of 'i' (line 899)
            i_311551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 20), 'i')
            int_311552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 899, 25), 'int')
            # Applying the binary operator '+=' (line 899)
            result_iadd_311553 = python_operator(stypy.reporting.localization.Localization(__file__, 899, 20), '+=', i_311551, int_311552)
            # Assigning a type to the variable 'i' (line 899)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 899, 20), 'i', result_iadd_311553)
            

            if more_types_in_union_311548:
                # SSA join for if statement (line 897)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 903):
        
        # Assigning a Call to a Name (line 903):
        
        # Call to month(...): (line 903)
        # Processing the call arguments (line 903)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 903)
        i_311556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 37), 'i', False)
        # Getting the type of 'l' (line 903)
        l_311557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 35), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 903)
        getitem___311558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 35), l_311557, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 903)
        subscript_call_result_311559 = invoke(stypy.reporting.localization.Localization(__file__, 903, 35), getitem___311558, i_311556)
        
        # Processing the call keyword arguments (line 903)
        kwargs_311560 = {}
        # Getting the type of 'info' (line 903)
        info_311554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 24), 'info', False)
        # Obtaining the member 'month' of a type (line 903)
        month_311555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 24), info_311554, 'month')
        # Calling month(args, kwargs) (line 903)
        month_call_result_311561 = invoke(stypy.reporting.localization.Localization(__file__, 903, 24), month_311555, *[subscript_call_result_311559], **kwargs_311560)
        
        # Assigning a type to the variable 'value' (line 903)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 903, 16), 'value', month_call_result_311561)
        
        # Type idiom detected: calculating its left and rigth part (line 904)
        # Getting the type of 'value' (line 904)
        value_311562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 16), 'value')
        # Getting the type of 'None' (line 904)
        None_311563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 32), 'None')
        
        (may_be_311564, more_types_in_union_311565) = may_not_be_none(value_311562, None_311563)

        if may_be_311564:

            if more_types_in_union_311565:
                # Runtime conditional SSA (line 904)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to append(...): (line 905)
            # Processing the call arguments (line 905)
            # Getting the type of 'value' (line 905)
            value_311568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 31), 'value', False)
            # Processing the call keyword arguments (line 905)
            kwargs_311569 = {}
            # Getting the type of 'ymd' (line 905)
            ymd_311566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 20), 'ymd', False)
            # Obtaining the member 'append' of a type (line 905)
            append_311567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 905, 20), ymd_311566, 'append')
            # Calling append(args, kwargs) (line 905)
            append_call_result_311570 = invoke(stypy.reporting.localization.Localization(__file__, 905, 20), append_311567, *[value_311568], **kwargs_311569)
            
            # Evaluating assert statement condition
            
            # Getting the type of 'mstridx' (line 906)
            mstridx_311571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 27), 'mstridx')
            int_311572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 906, 38), 'int')
            # Applying the binary operator '==' (line 906)
            result_eq_311573 = python_operator(stypy.reporting.localization.Localization(__file__, 906, 27), '==', mstridx_311571, int_311572)
            
            
            # Assigning a BinOp to a Name (line 907):
            
            # Assigning a BinOp to a Name (line 907):
            
            # Call to len(...): (line 907)
            # Processing the call arguments (line 907)
            # Getting the type of 'ymd' (line 907)
            ymd_311575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 907, 34), 'ymd', False)
            # Processing the call keyword arguments (line 907)
            kwargs_311576 = {}
            # Getting the type of 'len' (line 907)
            len_311574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 907, 30), 'len', False)
            # Calling len(args, kwargs) (line 907)
            len_call_result_311577 = invoke(stypy.reporting.localization.Localization(__file__, 907, 30), len_311574, *[ymd_311575], **kwargs_311576)
            
            int_311578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 907, 39), 'int')
            # Applying the binary operator '-' (line 907)
            result_sub_311579 = python_operator(stypy.reporting.localization.Localization(__file__, 907, 30), '-', len_call_result_311577, int_311578)
            
            # Assigning a type to the variable 'mstridx' (line 907)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 907, 20), 'mstridx', result_sub_311579)
            
            # Getting the type of 'i' (line 909)
            i_311580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 20), 'i')
            int_311581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 909, 25), 'int')
            # Applying the binary operator '+=' (line 909)
            result_iadd_311582 = python_operator(stypy.reporting.localization.Localization(__file__, 909, 20), '+=', i_311580, int_311581)
            # Assigning a type to the variable 'i' (line 909)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 909, 20), 'i', result_iadd_311582)
            
            
            
            # Getting the type of 'i' (line 910)
            i_311583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 23), 'i')
            # Getting the type of 'len_l' (line 910)
            len_l_311584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 27), 'len_l')
            # Applying the binary operator '<' (line 910)
            result_lt_311585 = python_operator(stypy.reporting.localization.Localization(__file__, 910, 23), '<', i_311583, len_l_311584)
            
            # Testing the type of an if condition (line 910)
            if_condition_311586 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 910, 20), result_lt_311585)
            # Assigning a type to the variable 'if_condition_311586' (line 910)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 910, 20), 'if_condition_311586', if_condition_311586)
            # SSA begins for if statement (line 910)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 911)
            i_311587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 29), 'i')
            # Getting the type of 'l' (line 911)
            l_311588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 27), 'l')
            # Obtaining the member '__getitem__' of a type (line 911)
            getitem___311589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 911, 27), l_311588, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 911)
            subscript_call_result_311590 = invoke(stypy.reporting.localization.Localization(__file__, 911, 27), getitem___311589, i_311587)
            
            
            # Obtaining an instance of the builtin type 'tuple' (line 911)
            tuple_311591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 911, 36), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 911)
            # Adding element type (line 911)
            unicode_311592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 911, 36), 'unicode', u'-')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 911, 36), tuple_311591, unicode_311592)
            # Adding element type (line 911)
            unicode_311593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 911, 41), 'unicode', u'/')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 911, 36), tuple_311591, unicode_311593)
            
            # Applying the binary operator 'in' (line 911)
            result_contains_311594 = python_operator(stypy.reporting.localization.Localization(__file__, 911, 27), 'in', subscript_call_result_311590, tuple_311591)
            
            # Testing the type of an if condition (line 911)
            if_condition_311595 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 911, 24), result_contains_311594)
            # Assigning a type to the variable 'if_condition_311595' (line 911)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 24), 'if_condition_311595', if_condition_311595)
            # SSA begins for if statement (line 911)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Name (line 913):
            
            # Assigning a Subscript to a Name (line 913):
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 913)
            i_311596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 36), 'i')
            # Getting the type of 'l' (line 913)
            l_311597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 34), 'l')
            # Obtaining the member '__getitem__' of a type (line 913)
            getitem___311598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 913, 34), l_311597, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 913)
            subscript_call_result_311599 = invoke(stypy.reporting.localization.Localization(__file__, 913, 34), getitem___311598, i_311596)
            
            # Assigning a type to the variable 'sep' (line 913)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 913, 28), 'sep', subscript_call_result_311599)
            
            # Getting the type of 'i' (line 914)
            i_311600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 28), 'i')
            int_311601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 914, 33), 'int')
            # Applying the binary operator '+=' (line 914)
            result_iadd_311602 = python_operator(stypy.reporting.localization.Localization(__file__, 914, 28), '+=', i_311600, int_311601)
            # Assigning a type to the variable 'i' (line 914)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 914, 28), 'i', result_iadd_311602)
            
            
            # Call to append(...): (line 915)
            # Processing the call arguments (line 915)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 915)
            i_311605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 41), 'i', False)
            # Getting the type of 'l' (line 915)
            l_311606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 39), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 915)
            getitem___311607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 915, 39), l_311606, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 915)
            subscript_call_result_311608 = invoke(stypy.reporting.localization.Localization(__file__, 915, 39), getitem___311607, i_311605)
            
            # Processing the call keyword arguments (line 915)
            kwargs_311609 = {}
            # Getting the type of 'ymd' (line 915)
            ymd_311603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 28), 'ymd', False)
            # Obtaining the member 'append' of a type (line 915)
            append_311604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 915, 28), ymd_311603, 'append')
            # Calling append(args, kwargs) (line 915)
            append_call_result_311610 = invoke(stypy.reporting.localization.Localization(__file__, 915, 28), append_311604, *[subscript_call_result_311608], **kwargs_311609)
            
            
            # Getting the type of 'i' (line 916)
            i_311611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 28), 'i')
            int_311612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 916, 33), 'int')
            # Applying the binary operator '+=' (line 916)
            result_iadd_311613 = python_operator(stypy.reporting.localization.Localization(__file__, 916, 28), '+=', i_311611, int_311612)
            # Assigning a type to the variable 'i' (line 916)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 916, 28), 'i', result_iadd_311613)
            
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'i' (line 918)
            i_311614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 31), 'i')
            # Getting the type of 'len_l' (line 918)
            len_l_311615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 35), 'len_l')
            # Applying the binary operator '<' (line 918)
            result_lt_311616 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 31), '<', i_311614, len_l_311615)
            
            
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 918)
            i_311617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 47), 'i')
            # Getting the type of 'l' (line 918)
            l_311618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 45), 'l')
            # Obtaining the member '__getitem__' of a type (line 918)
            getitem___311619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 45), l_311618, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 918)
            subscript_call_result_311620 = invoke(stypy.reporting.localization.Localization(__file__, 918, 45), getitem___311619, i_311617)
            
            # Getting the type of 'sep' (line 918)
            sep_311621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 53), 'sep')
            # Applying the binary operator '==' (line 918)
            result_eq_311622 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 45), '==', subscript_call_result_311620, sep_311621)
            
            # Applying the binary operator 'and' (line 918)
            result_and_keyword_311623 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 31), 'and', result_lt_311616, result_eq_311622)
            
            # Testing the type of an if condition (line 918)
            if_condition_311624 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 918, 28), result_and_keyword_311623)
            # Assigning a type to the variable 'if_condition_311624' (line 918)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 918, 28), 'if_condition_311624', if_condition_311624)
            # SSA begins for if statement (line 918)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Getting the type of 'i' (line 920)
            i_311625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 32), 'i')
            int_311626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 920, 37), 'int')
            # Applying the binary operator '+=' (line 920)
            result_iadd_311627 = python_operator(stypy.reporting.localization.Localization(__file__, 920, 32), '+=', i_311625, int_311626)
            # Assigning a type to the variable 'i' (line 920)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 32), 'i', result_iadd_311627)
            
            
            # Call to append(...): (line 921)
            # Processing the call arguments (line 921)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 921)
            i_311630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 45), 'i', False)
            # Getting the type of 'l' (line 921)
            l_311631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 43), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 921)
            getitem___311632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 921, 43), l_311631, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 921)
            subscript_call_result_311633 = invoke(stypy.reporting.localization.Localization(__file__, 921, 43), getitem___311632, i_311630)
            
            # Processing the call keyword arguments (line 921)
            kwargs_311634 = {}
            # Getting the type of 'ymd' (line 921)
            ymd_311628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 32), 'ymd', False)
            # Obtaining the member 'append' of a type (line 921)
            append_311629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 921, 32), ymd_311628, 'append')
            # Calling append(args, kwargs) (line 921)
            append_call_result_311635 = invoke(stypy.reporting.localization.Localization(__file__, 921, 32), append_311629, *[subscript_call_result_311633], **kwargs_311634)
            
            
            # Getting the type of 'i' (line 922)
            i_311636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 32), 'i')
            int_311637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 922, 37), 'int')
            # Applying the binary operator '+=' (line 922)
            result_iadd_311638 = python_operator(stypy.reporting.localization.Localization(__file__, 922, 32), '+=', i_311636, int_311637)
            # Assigning a type to the variable 'i' (line 922)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 922, 32), 'i', result_iadd_311638)
            
            # SSA join for if statement (line 918)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the else part of an if statement (line 911)
            module_type_store.open_ssa_branch('else')
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'i' (line 924)
            i_311639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 30), 'i')
            int_311640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 924, 32), 'int')
            # Applying the binary operator '+' (line 924)
            result_add_311641 = python_operator(stypy.reporting.localization.Localization(__file__, 924, 30), '+', i_311639, int_311640)
            
            # Getting the type of 'len_l' (line 924)
            len_l_311642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 36), 'len_l')
            # Applying the binary operator '<' (line 924)
            result_lt_311643 = python_operator(stypy.reporting.localization.Localization(__file__, 924, 30), '<', result_add_311641, len_l_311642)
            
            
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 924)
            i_311644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 48), 'i')
            # Getting the type of 'l' (line 924)
            l_311645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 46), 'l')
            # Obtaining the member '__getitem__' of a type (line 924)
            getitem___311646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 46), l_311645, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 924)
            subscript_call_result_311647 = invoke(stypy.reporting.localization.Localization(__file__, 924, 46), getitem___311646, i_311644)
            
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 924)
            i_311648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 56), 'i')
            int_311649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 924, 58), 'int')
            # Applying the binary operator '+' (line 924)
            result_add_311650 = python_operator(stypy.reporting.localization.Localization(__file__, 924, 56), '+', i_311648, int_311649)
            
            # Getting the type of 'l' (line 924)
            l_311651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 54), 'l')
            # Obtaining the member '__getitem__' of a type (line 924)
            getitem___311652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 54), l_311651, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 924)
            subscript_call_result_311653 = invoke(stypy.reporting.localization.Localization(__file__, 924, 54), getitem___311652, result_add_311650)
            
            # Applying the binary operator '==' (line 924)
            result_eq_311654 = python_operator(stypy.reporting.localization.Localization(__file__, 924, 46), '==', subscript_call_result_311647, subscript_call_result_311653)
            unicode_311655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 924, 64), 'unicode', u' ')
            # Applying the binary operator '==' (line 924)
            result_eq_311656 = python_operator(stypy.reporting.localization.Localization(__file__, 924, 46), '==', subscript_call_result_311653, unicode_311655)
            # Applying the binary operator '&' (line 924)
            result_and__311657 = python_operator(stypy.reporting.localization.Localization(__file__, 924, 46), '&', result_eq_311654, result_eq_311656)
            
            # Applying the binary operator 'and' (line 924)
            result_and_keyword_311658 = python_operator(stypy.reporting.localization.Localization(__file__, 924, 30), 'and', result_lt_311643, result_and__311657)
            
            # Call to pertain(...): (line 925)
            # Processing the call arguments (line 925)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 925)
            i_311661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 49), 'i', False)
            int_311662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 925, 51), 'int')
            # Applying the binary operator '+' (line 925)
            result_add_311663 = python_operator(stypy.reporting.localization.Localization(__file__, 925, 49), '+', i_311661, int_311662)
            
            # Getting the type of 'l' (line 925)
            l_311664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 47), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 925)
            getitem___311665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 925, 47), l_311664, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 925)
            subscript_call_result_311666 = invoke(stypy.reporting.localization.Localization(__file__, 925, 47), getitem___311665, result_add_311663)
            
            # Processing the call keyword arguments (line 925)
            kwargs_311667 = {}
            # Getting the type of 'info' (line 925)
            info_311659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 34), 'info', False)
            # Obtaining the member 'pertain' of a type (line 925)
            pertain_311660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 925, 34), info_311659, 'pertain')
            # Calling pertain(args, kwargs) (line 925)
            pertain_call_result_311668 = invoke(stypy.reporting.localization.Localization(__file__, 925, 34), pertain_311660, *[subscript_call_result_311666], **kwargs_311667)
            
            # Applying the binary operator 'and' (line 924)
            result_and_keyword_311669 = python_operator(stypy.reporting.localization.Localization(__file__, 924, 30), 'and', result_and_keyword_311658, pertain_call_result_311668)
            
            # Testing the type of an if condition (line 924)
            if_condition_311670 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 924, 29), result_and_keyword_311669)
            # Assigning a type to the variable 'if_condition_311670' (line 924)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 29), 'if_condition_311670', if_condition_311670)
            # SSA begins for if statement (line 924)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            
            # SSA begins for try-except statement (line 928)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Assigning a Call to a Name (line 929):
            
            # Assigning a Call to a Name (line 929):
            
            # Call to int(...): (line 929)
            # Processing the call arguments (line 929)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 929)
            i_311672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 46), 'i', False)
            int_311673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 929, 48), 'int')
            # Applying the binary operator '+' (line 929)
            result_add_311674 = python_operator(stypy.reporting.localization.Localization(__file__, 929, 46), '+', i_311672, int_311673)
            
            # Getting the type of 'l' (line 929)
            l_311675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 44), 'l', False)
            # Obtaining the member '__getitem__' of a type (line 929)
            getitem___311676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 929, 44), l_311675, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 929)
            subscript_call_result_311677 = invoke(stypy.reporting.localization.Localization(__file__, 929, 44), getitem___311676, result_add_311674)
            
            # Processing the call keyword arguments (line 929)
            kwargs_311678 = {}
            # Getting the type of 'int' (line 929)
            int_311671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 40), 'int', False)
            # Calling int(args, kwargs) (line 929)
            int_call_result_311679 = invoke(stypy.reporting.localization.Localization(__file__, 929, 40), int_311671, *[subscript_call_result_311677], **kwargs_311678)
            
            # Assigning a type to the variable 'value' (line 929)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 32), 'value', int_call_result_311679)
            # SSA branch for the except part of a try statement (line 928)
            # SSA branch for the except 'ValueError' branch of a try statement (line 928)
            module_type_store.open_ssa_branch('except')
            pass
            # SSA branch for the else branch of a try statement (line 928)
            module_type_store.open_ssa_branch('except else')
            
            # Call to append(...): (line 935)
            # Processing the call arguments (line 935)
            
            # Call to str(...): (line 935)
            # Processing the call arguments (line 935)
            
            # Call to convertyear(...): (line 935)
            # Processing the call arguments (line 935)
            # Getting the type of 'value' (line 935)
            value_311685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 64), 'value', False)
            # Processing the call keyword arguments (line 935)
            kwargs_311686 = {}
            # Getting the type of 'info' (line 935)
            info_311683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 47), 'info', False)
            # Obtaining the member 'convertyear' of a type (line 935)
            convertyear_311684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 935, 47), info_311683, 'convertyear')
            # Calling convertyear(args, kwargs) (line 935)
            convertyear_call_result_311687 = invoke(stypy.reporting.localization.Localization(__file__, 935, 47), convertyear_311684, *[value_311685], **kwargs_311686)
            
            # Processing the call keyword arguments (line 935)
            kwargs_311688 = {}
            # Getting the type of 'str' (line 935)
            str_311682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 43), 'str', False)
            # Calling str(args, kwargs) (line 935)
            str_call_result_311689 = invoke(stypy.reporting.localization.Localization(__file__, 935, 43), str_311682, *[convertyear_call_result_311687], **kwargs_311688)
            
            # Processing the call keyword arguments (line 935)
            kwargs_311690 = {}
            # Getting the type of 'ymd' (line 935)
            ymd_311680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 32), 'ymd', False)
            # Obtaining the member 'append' of a type (line 935)
            append_311681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 935, 32), ymd_311680, 'append')
            # Calling append(args, kwargs) (line 935)
            append_call_result_311691 = invoke(stypy.reporting.localization.Localization(__file__, 935, 32), append_311681, *[str_call_result_311689], **kwargs_311690)
            
            # SSA join for try-except statement (line 928)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Getting the type of 'i' (line 936)
            i_311692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 28), 'i')
            int_311693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 936, 33), 'int')
            # Applying the binary operator '+=' (line 936)
            result_iadd_311694 = python_operator(stypy.reporting.localization.Localization(__file__, 936, 28), '+=', i_311692, int_311693)
            # Assigning a type to the variable 'i' (line 936)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 936, 28), 'i', result_iadd_311694)
            
            # SSA join for if statement (line 924)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 911)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 910)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_311565:
                # SSA join for if statement (line 904)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 940):
        
        # Assigning a Call to a Name (line 940):
        
        # Call to ampm(...): (line 940)
        # Processing the call arguments (line 940)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 940)
        i_311697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 36), 'i', False)
        # Getting the type of 'l' (line 940)
        l_311698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 34), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 940)
        getitem___311699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 34), l_311698, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 940)
        subscript_call_result_311700 = invoke(stypy.reporting.localization.Localization(__file__, 940, 34), getitem___311699, i_311697)
        
        # Processing the call keyword arguments (line 940)
        kwargs_311701 = {}
        # Getting the type of 'info' (line 940)
        info_311695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 24), 'info', False)
        # Obtaining the member 'ampm' of a type (line 940)
        ampm_311696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 24), info_311695, 'ampm')
        # Calling ampm(args, kwargs) (line 940)
        ampm_call_result_311702 = invoke(stypy.reporting.localization.Localization(__file__, 940, 24), ampm_311696, *[subscript_call_result_311700], **kwargs_311701)
        
        # Assigning a type to the variable 'value' (line 940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 940, 16), 'value', ampm_call_result_311702)
        
        # Type idiom detected: calculating its left and rigth part (line 941)
        # Getting the type of 'value' (line 941)
        value_311703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 16), 'value')
        # Getting the type of 'None' (line 941)
        None_311704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 32), 'None')
        
        (may_be_311705, more_types_in_union_311706) = may_not_be_none(value_311703, None_311704)

        if may_be_311705:

            if more_types_in_union_311706:
                # Runtime conditional SSA (line 941)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 945):
            
            # Assigning a Name to a Name (line 945):
            # Getting the type of 'True' (line 945)
            True_311707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 34), 'True')
            # Assigning a type to the variable 'val_is_ampm' (line 945)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 20), 'val_is_ampm', True_311707)
            
            
            # Evaluating a boolean operation
            # Getting the type of 'fuzzy' (line 948)
            fuzzy_311708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 23), 'fuzzy')
            
            # Getting the type of 'res' (line 948)
            res_311709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 33), 'res')
            # Obtaining the member 'ampm' of a type (line 948)
            ampm_311710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 948, 33), res_311709, 'ampm')
            # Getting the type of 'None' (line 948)
            None_311711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 49), 'None')
            # Applying the binary operator 'isnot' (line 948)
            result_is_not_311712 = python_operator(stypy.reporting.localization.Localization(__file__, 948, 33), 'isnot', ampm_311710, None_311711)
            
            # Applying the binary operator 'and' (line 948)
            result_and_keyword_311713 = python_operator(stypy.reporting.localization.Localization(__file__, 948, 23), 'and', fuzzy_311708, result_is_not_311712)
            
            # Testing the type of an if condition (line 948)
            if_condition_311714 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 948, 20), result_and_keyword_311713)
            # Assigning a type to the variable 'if_condition_311714' (line 948)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 948, 20), 'if_condition_311714', if_condition_311714)
            # SSA begins for if statement (line 948)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Name (line 949):
            
            # Assigning a Name to a Name (line 949):
            # Getting the type of 'False' (line 949)
            False_311715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 38), 'False')
            # Assigning a type to the variable 'val_is_ampm' (line 949)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 949, 24), 'val_is_ampm', False_311715)
            # SSA join for if statement (line 948)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Type idiom detected: calculating its left and rigth part (line 952)
            # Getting the type of 'res' (line 952)
            res_311716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 23), 'res')
            # Obtaining the member 'hour' of a type (line 952)
            hour_311717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 23), res_311716, 'hour')
            # Getting the type of 'None' (line 952)
            None_311718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 35), 'None')
            
            (may_be_311719, more_types_in_union_311720) = may_be_none(hour_311717, None_311718)

            if may_be_311719:

                if more_types_in_union_311720:
                    # Runtime conditional SSA (line 952)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Getting the type of 'fuzzy' (line 953)
                fuzzy_311721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 27), 'fuzzy')
                # Testing the type of an if condition (line 953)
                if_condition_311722 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 953, 24), fuzzy_311721)
                # Assigning a type to the variable 'if_condition_311722' (line 953)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 953, 24), 'if_condition_311722', if_condition_311722)
                # SSA begins for if statement (line 953)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Name to a Name (line 954):
                
                # Assigning a Name to a Name (line 954):
                # Getting the type of 'False' (line 954)
                False_311723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 42), 'False')
                # Assigning a type to the variable 'val_is_ampm' (line 954)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 954, 28), 'val_is_ampm', False_311723)
                # SSA branch for the else part of an if statement (line 953)
                module_type_store.open_ssa_branch('else')
                
                # Call to ValueError(...): (line 956)
                # Processing the call arguments (line 956)
                unicode_311725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 956, 45), 'unicode', u'No hour specified with ')
                unicode_311726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 45), 'unicode', u'AM or PM flag.')
                # Applying the binary operator '+' (line 956)
                result_add_311727 = python_operator(stypy.reporting.localization.Localization(__file__, 956, 45), '+', unicode_311725, unicode_311726)
                
                # Processing the call keyword arguments (line 956)
                kwargs_311728 = {}
                # Getting the type of 'ValueError' (line 956)
                ValueError_311724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 34), 'ValueError', False)
                # Calling ValueError(args, kwargs) (line 956)
                ValueError_call_result_311729 = invoke(stypy.reporting.localization.Localization(__file__, 956, 34), ValueError_311724, *[result_add_311727], **kwargs_311728)
                
                ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 956, 28), ValueError_call_result_311729, 'raise parameter', BaseException)
                # SSA join for if statement (line 953)
                module_type_store = module_type_store.join_ssa_context()
                

                if more_types_in_union_311720:
                    # Runtime conditional SSA for else branch (line 952)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_311719) or more_types_in_union_311720):
                
                
                
                int_311730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 29), 'int')
                # Getting the type of 'res' (line 958)
                res_311731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 34), 'res')
                # Obtaining the member 'hour' of a type (line 958)
                hour_311732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 34), res_311731, 'hour')
                # Applying the binary operator '<=' (line 958)
                result_le_311733 = python_operator(stypy.reporting.localization.Localization(__file__, 958, 29), '<=', int_311730, hour_311732)
                int_311734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 46), 'int')
                # Applying the binary operator '<=' (line 958)
                result_le_311735 = python_operator(stypy.reporting.localization.Localization(__file__, 958, 29), '<=', hour_311732, int_311734)
                # Applying the binary operator '&' (line 958)
                result_and__311736 = python_operator(stypy.reporting.localization.Localization(__file__, 958, 29), '&', result_le_311733, result_le_311735)
                
                # Applying the 'not' unary operator (line 958)
                result_not__311737 = python_operator(stypy.reporting.localization.Localization(__file__, 958, 25), 'not', result_and__311736)
                
                # Testing the type of an if condition (line 958)
                if_condition_311738 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 958, 25), result_not__311737)
                # Assigning a type to the variable 'if_condition_311738' (line 958)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 25), 'if_condition_311738', if_condition_311738)
                # SSA begins for if statement (line 958)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Getting the type of 'fuzzy' (line 961)
                fuzzy_311739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 27), 'fuzzy')
                # Testing the type of an if condition (line 961)
                if_condition_311740 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 961, 24), fuzzy_311739)
                # Assigning a type to the variable 'if_condition_311740' (line 961)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 961, 24), 'if_condition_311740', if_condition_311740)
                # SSA begins for if statement (line 961)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Name to a Name (line 962):
                
                # Assigning a Name to a Name (line 962):
                # Getting the type of 'False' (line 962)
                False_311741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 42), 'False')
                # Assigning a type to the variable 'val_is_ampm' (line 962)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 28), 'val_is_ampm', False_311741)
                # SSA branch for the else part of an if statement (line 961)
                module_type_store.open_ssa_branch('else')
                
                # Call to ValueError(...): (line 964)
                # Processing the call arguments (line 964)
                unicode_311743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 964, 45), 'unicode', u'Invalid hour specified for ')
                unicode_311744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 965, 45), 'unicode', u'12-hour clock.')
                # Applying the binary operator '+' (line 964)
                result_add_311745 = python_operator(stypy.reporting.localization.Localization(__file__, 964, 45), '+', unicode_311743, unicode_311744)
                
                # Processing the call keyword arguments (line 964)
                kwargs_311746 = {}
                # Getting the type of 'ValueError' (line 964)
                ValueError_311742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 34), 'ValueError', False)
                # Calling ValueError(args, kwargs) (line 964)
                ValueError_call_result_311747 = invoke(stypy.reporting.localization.Localization(__file__, 964, 34), ValueError_311742, *[result_add_311745], **kwargs_311746)
                
                ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 964, 28), ValueError_call_result_311747, 'raise parameter', BaseException)
                # SSA join for if statement (line 961)
                module_type_store = module_type_store.join_ssa_context()
                
                # SSA join for if statement (line 958)
                module_type_store = module_type_store.join_ssa_context()
                

                if (may_be_311719 and more_types_in_union_311720):
                    # SSA join for if statement (line 952)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            # Getting the type of 'val_is_ampm' (line 967)
            val_is_ampm_311748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 23), 'val_is_ampm')
            # Testing the type of an if condition (line 967)
            if_condition_311749 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 967, 20), val_is_ampm_311748)
            # Assigning a type to the variable 'if_condition_311749' (line 967)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 967, 20), 'if_condition_311749', if_condition_311749)
            # SSA begins for if statement (line 967)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'value' (line 968)
            value_311750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 27), 'value')
            int_311751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 968, 36), 'int')
            # Applying the binary operator '==' (line 968)
            result_eq_311752 = python_operator(stypy.reporting.localization.Localization(__file__, 968, 27), '==', value_311750, int_311751)
            
            
            # Getting the type of 'res' (line 968)
            res_311753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 42), 'res')
            # Obtaining the member 'hour' of a type (line 968)
            hour_311754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 968, 42), res_311753, 'hour')
            int_311755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 968, 53), 'int')
            # Applying the binary operator '<' (line 968)
            result_lt_311756 = python_operator(stypy.reporting.localization.Localization(__file__, 968, 42), '<', hour_311754, int_311755)
            
            # Applying the binary operator 'and' (line 968)
            result_and_keyword_311757 = python_operator(stypy.reporting.localization.Localization(__file__, 968, 27), 'and', result_eq_311752, result_lt_311756)
            
            # Testing the type of an if condition (line 968)
            if_condition_311758 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 968, 24), result_and_keyword_311757)
            # Assigning a type to the variable 'if_condition_311758' (line 968)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 24), 'if_condition_311758', if_condition_311758)
            # SSA begins for if statement (line 968)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Getting the type of 'res' (line 969)
            res_311759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 28), 'res')
            # Obtaining the member 'hour' of a type (line 969)
            hour_311760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 969, 28), res_311759, 'hour')
            int_311761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 969, 40), 'int')
            # Applying the binary operator '+=' (line 969)
            result_iadd_311762 = python_operator(stypy.reporting.localization.Localization(__file__, 969, 28), '+=', hour_311760, int_311761)
            # Getting the type of 'res' (line 969)
            res_311763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 28), 'res')
            # Setting the type of the member 'hour' of a type (line 969)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 969, 28), res_311763, 'hour', result_iadd_311762)
            
            # SSA branch for the else part of an if statement (line 968)
            module_type_store.open_ssa_branch('else')
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'value' (line 970)
            value_311764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 29), 'value')
            int_311765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 970, 38), 'int')
            # Applying the binary operator '==' (line 970)
            result_eq_311766 = python_operator(stypy.reporting.localization.Localization(__file__, 970, 29), '==', value_311764, int_311765)
            
            
            # Getting the type of 'res' (line 970)
            res_311767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 44), 'res')
            # Obtaining the member 'hour' of a type (line 970)
            hour_311768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 970, 44), res_311767, 'hour')
            int_311769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 970, 56), 'int')
            # Applying the binary operator '==' (line 970)
            result_eq_311770 = python_operator(stypy.reporting.localization.Localization(__file__, 970, 44), '==', hour_311768, int_311769)
            
            # Applying the binary operator 'and' (line 970)
            result_and_keyword_311771 = python_operator(stypy.reporting.localization.Localization(__file__, 970, 29), 'and', result_eq_311766, result_eq_311770)
            
            # Testing the type of an if condition (line 970)
            if_condition_311772 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 970, 29), result_and_keyword_311771)
            # Assigning a type to the variable 'if_condition_311772' (line 970)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 29), 'if_condition_311772', if_condition_311772)
            # SSA begins for if statement (line 970)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Num to a Attribute (line 971):
            
            # Assigning a Num to a Attribute (line 971):
            int_311773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 971, 39), 'int')
            # Getting the type of 'res' (line 971)
            res_311774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 28), 'res')
            # Setting the type of the member 'hour' of a type (line 971)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 28), res_311774, 'hour', int_311773)
            # SSA join for if statement (line 970)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 968)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Name to a Attribute (line 973):
            
            # Assigning a Name to a Attribute (line 973):
            # Getting the type of 'value' (line 973)
            value_311775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 35), 'value')
            # Getting the type of 'res' (line 973)
            res_311776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 24), 'res')
            # Setting the type of the member 'ampm' of a type (line 973)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 24), res_311776, 'ampm', value_311775)
            # SSA branch for the else part of an if statement (line 967)
            module_type_store.open_ssa_branch('else')
            
            # Getting the type of 'fuzzy' (line 975)
            fuzzy_311777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 25), 'fuzzy')
            # Testing the type of an if condition (line 975)
            if_condition_311778 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 975, 25), fuzzy_311777)
            # Assigning a type to the variable 'if_condition_311778' (line 975)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 975, 25), 'if_condition_311778', if_condition_311778)
            # SSA begins for if statement (line 975)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 976):
            
            # Assigning a Call to a Name (line 976):
            
            # Call to _skip_token(...): (line 976)
            # Processing the call arguments (line 976)
            # Getting the type of 'skipped_tokens' (line 976)
            skipped_tokens_311781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 64), 'skipped_tokens', False)
            # Getting the type of 'last_skipped_token_i' (line 977)
            last_skipped_token_i_311782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 52), 'last_skipped_token_i', False)
            # Getting the type of 'i' (line 977)
            i_311783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 74), 'i', False)
            # Getting the type of 'l' (line 977)
            l_311784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 77), 'l', False)
            # Processing the call keyword arguments (line 976)
            kwargs_311785 = {}
            # Getting the type of 'self' (line 976)
            self_311779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 47), 'self', False)
            # Obtaining the member '_skip_token' of a type (line 976)
            _skip_token_311780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 47), self_311779, '_skip_token')
            # Calling _skip_token(args, kwargs) (line 976)
            _skip_token_call_result_311786 = invoke(stypy.reporting.localization.Localization(__file__, 976, 47), _skip_token_311780, *[skipped_tokens_311781, last_skipped_token_i_311782, i_311783, l_311784], **kwargs_311785)
            
            # Assigning a type to the variable 'last_skipped_token_i' (line 976)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 24), 'last_skipped_token_i', _skip_token_call_result_311786)
            # SSA join for if statement (line 975)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 967)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Getting the type of 'i' (line 978)
            i_311787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 20), 'i')
            int_311788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 978, 25), 'int')
            # Applying the binary operator '+=' (line 978)
            result_iadd_311789 = python_operator(stypy.reporting.localization.Localization(__file__, 978, 20), '+=', i_311787, int_311788)
            # Assigning a type to the variable 'i' (line 978)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 978, 20), 'i', result_iadd_311789)
            

            if more_types_in_union_311706:
                # SSA join for if statement (line 941)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'res' (line 982)
        res_311790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 20), 'res')
        # Obtaining the member 'hour' of a type (line 982)
        hour_311791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 982, 20), res_311790, 'hour')
        # Getting the type of 'None' (line 982)
        None_311792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 36), 'None')
        # Applying the binary operator 'isnot' (line 982)
        result_is_not_311793 = python_operator(stypy.reporting.localization.Localization(__file__, 982, 20), 'isnot', hour_311791, None_311792)
        
        
        
        # Call to len(...): (line 982)
        # Processing the call arguments (line 982)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 982)
        i_311795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 51), 'i', False)
        # Getting the type of 'l' (line 982)
        l_311796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 49), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 982)
        getitem___311797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 982, 49), l_311796, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 982)
        subscript_call_result_311798 = invoke(stypy.reporting.localization.Localization(__file__, 982, 49), getitem___311797, i_311795)
        
        # Processing the call keyword arguments (line 982)
        kwargs_311799 = {}
        # Getting the type of 'len' (line 982)
        len_311794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 45), 'len', False)
        # Calling len(args, kwargs) (line 982)
        len_call_result_311800 = invoke(stypy.reporting.localization.Localization(__file__, 982, 45), len_311794, *[subscript_call_result_311798], **kwargs_311799)
        
        int_311801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 982, 58), 'int')
        # Applying the binary operator '<=' (line 982)
        result_le_311802 = python_operator(stypy.reporting.localization.Localization(__file__, 982, 45), '<=', len_call_result_311800, int_311801)
        
        # Applying the binary operator 'and' (line 982)
        result_and_keyword_311803 = python_operator(stypy.reporting.localization.Localization(__file__, 982, 20), 'and', result_is_not_311793, result_le_311802)
        
        # Getting the type of 'res' (line 983)
        res_311804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 24), 'res')
        # Obtaining the member 'tzname' of a type (line 983)
        tzname_311805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 983, 24), res_311804, 'tzname')
        # Getting the type of 'None' (line 983)
        None_311806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 38), 'None')
        # Applying the binary operator 'is' (line 983)
        result_is__311807 = python_operator(stypy.reporting.localization.Localization(__file__, 983, 24), 'is', tzname_311805, None_311806)
        
        # Applying the binary operator 'and' (line 982)
        result_and_keyword_311808 = python_operator(stypy.reporting.localization.Localization(__file__, 982, 20), 'and', result_and_keyword_311803, result_is__311807)
        
        # Getting the type of 'res' (line 983)
        res_311809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 47), 'res')
        # Obtaining the member 'tzoffset' of a type (line 983)
        tzoffset_311810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 983, 47), res_311809, 'tzoffset')
        # Getting the type of 'None' (line 983)
        None_311811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 63), 'None')
        # Applying the binary operator 'is' (line 983)
        result_is__311812 = python_operator(stypy.reporting.localization.Localization(__file__, 983, 47), 'is', tzoffset_311810, None_311811)
        
        # Applying the binary operator 'and' (line 982)
        result_and_keyword_311813 = python_operator(stypy.reporting.localization.Localization(__file__, 982, 20), 'and', result_and_keyword_311808, result_is__311812)
        
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 984)
        i_311819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 42), 'i')
        # Getting the type of 'l' (line 984)
        l_311820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 40), 'l')
        # Obtaining the member '__getitem__' of a type (line 984)
        getitem___311821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 984, 40), l_311820, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 984)
        subscript_call_result_311822 = invoke(stypy.reporting.localization.Localization(__file__, 984, 40), getitem___311821, i_311819)
        
        comprehension_311823 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 984, 29), subscript_call_result_311822)
        # Assigning a type to the variable 'x' (line 984)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 984, 29), 'x', comprehension_311823)
        
        # Getting the type of 'x' (line 984)
        x_311815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 48), 'x')
        # Getting the type of 'string' (line 985)
        string_311816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 29), 'string')
        # Obtaining the member 'ascii_uppercase' of a type (line 985)
        ascii_uppercase_311817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 985, 29), string_311816, 'ascii_uppercase')
        # Applying the binary operator 'notin' (line 984)
        result_contains_311818 = python_operator(stypy.reporting.localization.Localization(__file__, 984, 48), 'notin', x_311815, ascii_uppercase_311817)
        
        # Getting the type of 'x' (line 984)
        x_311814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 29), 'x')
        list_311824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 984, 29), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 984, 29), list_311824, x_311814)
        # Applying the 'not' unary operator (line 984)
        result_not__311825 = python_operator(stypy.reporting.localization.Localization(__file__, 984, 24), 'not', list_311824)
        
        # Applying the binary operator 'and' (line 982)
        result_and_keyword_311826 = python_operator(stypy.reporting.localization.Localization(__file__, 982, 20), 'and', result_and_keyword_311813, result_not__311825)
        
        # Testing the type of an if condition (line 982)
        if_condition_311827 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 982, 16), result_and_keyword_311826)
        # Assigning a type to the variable 'if_condition_311827' (line 982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 16), 'if_condition_311827', if_condition_311827)
        # SSA begins for if statement (line 982)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Attribute (line 986):
        
        # Assigning a Subscript to a Attribute (line 986):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 986)
        i_311828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 35), 'i')
        # Getting the type of 'l' (line 986)
        l_311829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 33), 'l')
        # Obtaining the member '__getitem__' of a type (line 986)
        getitem___311830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 33), l_311829, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 986)
        subscript_call_result_311831 = invoke(stypy.reporting.localization.Localization(__file__, 986, 33), getitem___311830, i_311828)
        
        # Getting the type of 'res' (line 986)
        res_311832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 20), 'res')
        # Setting the type of the member 'tzname' of a type (line 986)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 20), res_311832, 'tzname', subscript_call_result_311831)
        
        # Assigning a Call to a Attribute (line 987):
        
        # Assigning a Call to a Attribute (line 987):
        
        # Call to tzoffset(...): (line 987)
        # Processing the call arguments (line 987)
        # Getting the type of 'res' (line 987)
        res_311835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 49), 'res', False)
        # Obtaining the member 'tzname' of a type (line 987)
        tzname_311836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 987, 49), res_311835, 'tzname')
        # Processing the call keyword arguments (line 987)
        kwargs_311837 = {}
        # Getting the type of 'info' (line 987)
        info_311833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 35), 'info', False)
        # Obtaining the member 'tzoffset' of a type (line 987)
        tzoffset_311834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 987, 35), info_311833, 'tzoffset')
        # Calling tzoffset(args, kwargs) (line 987)
        tzoffset_call_result_311838 = invoke(stypy.reporting.localization.Localization(__file__, 987, 35), tzoffset_311834, *[tzname_311836], **kwargs_311837)
        
        # Getting the type of 'res' (line 987)
        res_311839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 20), 'res')
        # Setting the type of the member 'tzoffset' of a type (line 987)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 987, 20), res_311839, 'tzoffset', tzoffset_call_result_311838)
        
        # Getting the type of 'i' (line 988)
        i_311840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 20), 'i')
        int_311841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 988, 25), 'int')
        # Applying the binary operator '+=' (line 988)
        result_iadd_311842 = python_operator(stypy.reporting.localization.Localization(__file__, 988, 20), '+=', i_311840, int_311841)
        # Assigning a type to the variable 'i' (line 988)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 988, 20), 'i', result_iadd_311842)
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'i' (line 995)
        i_311843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 23), 'i')
        # Getting the type of 'len_l' (line 995)
        len_l_311844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 27), 'len_l')
        # Applying the binary operator '<' (line 995)
        result_lt_311845 = python_operator(stypy.reporting.localization.Localization(__file__, 995, 23), '<', i_311843, len_l_311844)
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 995)
        i_311846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 39), 'i')
        # Getting the type of 'l' (line 995)
        l_311847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 37), 'l')
        # Obtaining the member '__getitem__' of a type (line 995)
        getitem___311848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 37), l_311847, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 995)
        subscript_call_result_311849 = invoke(stypy.reporting.localization.Localization(__file__, 995, 37), getitem___311848, i_311846)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 995)
        tuple_311850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 995, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 995)
        # Adding element type (line 995)
        unicode_311851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 995, 46), 'unicode', u'+')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 995, 46), tuple_311850, unicode_311851)
        # Adding element type (line 995)
        unicode_311852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 995, 51), 'unicode', u'-')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 995, 46), tuple_311850, unicode_311852)
        
        # Applying the binary operator 'in' (line 995)
        result_contains_311853 = python_operator(stypy.reporting.localization.Localization(__file__, 995, 37), 'in', subscript_call_result_311849, tuple_311850)
        
        # Applying the binary operator 'and' (line 995)
        result_and_keyword_311854 = python_operator(stypy.reporting.localization.Localization(__file__, 995, 23), 'and', result_lt_311845, result_contains_311853)
        
        # Testing the type of an if condition (line 995)
        if_condition_311855 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 995, 20), result_and_keyword_311854)
        # Assigning a type to the variable 'if_condition_311855' (line 995)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 995, 20), 'if_condition_311855', if_condition_311855)
        # SSA begins for if statement (line 995)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Subscript (line 996):
        
        # Assigning a Subscript to a Subscript (line 996):
        
        # Obtaining the type of the subscript
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 996)
        i_311856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 44), 'i')
        # Getting the type of 'l' (line 996)
        l_311857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 42), 'l')
        # Obtaining the member '__getitem__' of a type (line 996)
        getitem___311858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 996, 42), l_311857, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 996)
        subscript_call_result_311859 = invoke(stypy.reporting.localization.Localization(__file__, 996, 42), getitem___311858, i_311856)
        
        unicode_311860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 996, 50), 'unicode', u'+')
        # Applying the binary operator '==' (line 996)
        result_eq_311861 = python_operator(stypy.reporting.localization.Localization(__file__, 996, 42), '==', subscript_call_result_311859, unicode_311860)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 996)
        tuple_311862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 996, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 996)
        # Adding element type (line 996)
        unicode_311863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 996, 32), 'unicode', u'+')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 996, 32), tuple_311862, unicode_311863)
        # Adding element type (line 996)
        unicode_311864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 996, 37), 'unicode', u'-')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 996, 32), tuple_311862, unicode_311864)
        
        # Obtaining the member '__getitem__' of a type (line 996)
        getitem___311865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 996, 32), tuple_311862, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 996)
        subscript_call_result_311866 = invoke(stypy.reporting.localization.Localization(__file__, 996, 32), getitem___311865, result_eq_311861)
        
        # Getting the type of 'l' (line 996)
        l_311867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 24), 'l')
        # Getting the type of 'i' (line 996)
        i_311868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 26), 'i')
        # Storing an element on a container (line 996)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 996, 24), l_311867, (i_311868, subscript_call_result_311866))
        
        # Assigning a Name to a Attribute (line 997):
        
        # Assigning a Name to a Attribute (line 997):
        # Getting the type of 'None' (line 997)
        None_311869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 39), 'None')
        # Getting the type of 'res' (line 997)
        res_311870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 24), 'res')
        # Setting the type of the member 'tzoffset' of a type (line 997)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 997, 24), res_311870, 'tzoffset', None_311869)
        
        
        # Call to utczone(...): (line 998)
        # Processing the call arguments (line 998)
        # Getting the type of 'res' (line 998)
        res_311873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 40), 'res', False)
        # Obtaining the member 'tzname' of a type (line 998)
        tzname_311874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 40), res_311873, 'tzname')
        # Processing the call keyword arguments (line 998)
        kwargs_311875 = {}
        # Getting the type of 'info' (line 998)
        info_311871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 27), 'info', False)
        # Obtaining the member 'utczone' of a type (line 998)
        utczone_311872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 27), info_311871, 'utczone')
        # Calling utczone(args, kwargs) (line 998)
        utczone_call_result_311876 = invoke(stypy.reporting.localization.Localization(__file__, 998, 27), utczone_311872, *[tzname_311874], **kwargs_311875)
        
        # Testing the type of an if condition (line 998)
        if_condition_311877 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 998, 24), utczone_call_result_311876)
        # Assigning a type to the variable 'if_condition_311877' (line 998)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 998, 24), 'if_condition_311877', if_condition_311877)
        # SSA begins for if statement (line 998)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1001):
        
        # Assigning a Name to a Attribute (line 1001):
        # Getting the type of 'None' (line 1001)
        None_311878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 41), 'None')
        # Getting the type of 'res' (line 1001)
        res_311879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 28), 'res')
        # Setting the type of the member 'tzname' of a type (line 1001)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1001, 28), res_311879, 'tzname', None_311878)
        # SSA join for if statement (line 998)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 995)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 982)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'res' (line 1006)
        res_311880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 19), 'res')
        # Obtaining the member 'hour' of a type (line 1006)
        hour_311881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1006, 19), res_311880, 'hour')
        # Getting the type of 'None' (line 1006)
        None_311882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 35), 'None')
        # Applying the binary operator 'isnot' (line 1006)
        result_is_not_311883 = python_operator(stypy.reporting.localization.Localization(__file__, 1006, 19), 'isnot', hour_311881, None_311882)
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1006)
        i_311884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 46), 'i')
        # Getting the type of 'l' (line 1006)
        l_311885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 44), 'l')
        # Obtaining the member '__getitem__' of a type (line 1006)
        getitem___311886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1006, 44), l_311885, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1006)
        subscript_call_result_311887 = invoke(stypy.reporting.localization.Localization(__file__, 1006, 44), getitem___311886, i_311884)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1006)
        tuple_311888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1006, 53), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1006)
        # Adding element type (line 1006)
        unicode_311889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1006, 53), 'unicode', u'+')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1006, 53), tuple_311888, unicode_311889)
        # Adding element type (line 1006)
        unicode_311890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1006, 58), 'unicode', u'-')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1006, 53), tuple_311888, unicode_311890)
        
        # Applying the binary operator 'in' (line 1006)
        result_contains_311891 = python_operator(stypy.reporting.localization.Localization(__file__, 1006, 44), 'in', subscript_call_result_311887, tuple_311888)
        
        # Applying the binary operator 'and' (line 1006)
        result_and_keyword_311892 = python_operator(stypy.reporting.localization.Localization(__file__, 1006, 19), 'and', result_is_not_311883, result_contains_311891)
        
        # Testing the type of an if condition (line 1006)
        if_condition_311893 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1006, 16), result_and_keyword_311892)
        # Assigning a type to the variable 'if_condition_311893' (line 1006)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1006, 16), 'if_condition_311893', if_condition_311893)
        # SSA begins for if statement (line 1006)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1007):
        
        # Assigning a Subscript to a Name (line 1007):
        
        # Obtaining the type of the subscript
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1007)
        i_311894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 39), 'i')
        # Getting the type of 'l' (line 1007)
        l_311895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 37), 'l')
        # Obtaining the member '__getitem__' of a type (line 1007)
        getitem___311896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1007, 37), l_311895, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1007)
        subscript_call_result_311897 = invoke(stypy.reporting.localization.Localization(__file__, 1007, 37), getitem___311896, i_311894)
        
        unicode_311898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1007, 45), 'unicode', u'+')
        # Applying the binary operator '==' (line 1007)
        result_eq_311899 = python_operator(stypy.reporting.localization.Localization(__file__, 1007, 37), '==', subscript_call_result_311897, unicode_311898)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1007)
        tuple_311900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1007, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1007)
        # Adding element type (line 1007)
        int_311901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1007, 30), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1007, 30), tuple_311900, int_311901)
        # Adding element type (line 1007)
        int_311902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1007, 34), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1007, 30), tuple_311900, int_311902)
        
        # Obtaining the member '__getitem__' of a type (line 1007)
        getitem___311903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1007, 30), tuple_311900, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1007)
        subscript_call_result_311904 = invoke(stypy.reporting.localization.Localization(__file__, 1007, 30), getitem___311903, result_eq_311899)
        
        # Assigning a type to the variable 'signal' (line 1007)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1007, 20), 'signal', subscript_call_result_311904)
        
        # Getting the type of 'i' (line 1008)
        i_311905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 20), 'i')
        int_311906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1008, 25), 'int')
        # Applying the binary operator '+=' (line 1008)
        result_iadd_311907 = python_operator(stypy.reporting.localization.Localization(__file__, 1008, 20), '+=', i_311905, int_311906)
        # Assigning a type to the variable 'i' (line 1008)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1008, 20), 'i', result_iadd_311907)
        
        
        # Assigning a Call to a Name (line 1009):
        
        # Assigning a Call to a Name (line 1009):
        
        # Call to len(...): (line 1009)
        # Processing the call arguments (line 1009)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1009)
        i_311909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 35), 'i', False)
        # Getting the type of 'l' (line 1009)
        l_311910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 33), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1009)
        getitem___311911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 33), l_311910, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1009)
        subscript_call_result_311912 = invoke(stypy.reporting.localization.Localization(__file__, 1009, 33), getitem___311911, i_311909)
        
        # Processing the call keyword arguments (line 1009)
        kwargs_311913 = {}
        # Getting the type of 'len' (line 1009)
        len_311908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 29), 'len', False)
        # Calling len(args, kwargs) (line 1009)
        len_call_result_311914 = invoke(stypy.reporting.localization.Localization(__file__, 1009, 29), len_311908, *[subscript_call_result_311912], **kwargs_311913)
        
        # Assigning a type to the variable 'len_li' (line 1009)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1009, 20), 'len_li', len_call_result_311914)
        
        
        # Getting the type of 'len_li' (line 1011)
        len_li_311915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 23), 'len_li')
        int_311916 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1011, 33), 'int')
        # Applying the binary operator '==' (line 1011)
        result_eq_311917 = python_operator(stypy.reporting.localization.Localization(__file__, 1011, 23), '==', len_li_311915, int_311916)
        
        # Testing the type of an if condition (line 1011)
        if_condition_311918 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1011, 20), result_eq_311917)
        # Assigning a type to the variable 'if_condition_311918' (line 1011)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1011, 20), 'if_condition_311918', if_condition_311918)
        # SSA begins for if statement (line 1011)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Attribute (line 1013):
        
        # Assigning a BinOp to a Attribute (line 1013):
        
        # Call to int(...): (line 1013)
        # Processing the call arguments (line 1013)
        
        # Obtaining the type of the subscript
        int_311920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1013, 49), 'int')
        slice_311921 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1013, 43), None, int_311920, None)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1013)
        i_311922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 45), 'i', False)
        # Getting the type of 'l' (line 1013)
        l_311923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 43), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1013)
        getitem___311924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 43), l_311923, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1013)
        subscript_call_result_311925 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 43), getitem___311924, i_311922)
        
        # Obtaining the member '__getitem__' of a type (line 1013)
        getitem___311926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 43), subscript_call_result_311925, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1013)
        subscript_call_result_311927 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 43), getitem___311926, slice_311921)
        
        # Processing the call keyword arguments (line 1013)
        kwargs_311928 = {}
        # Getting the type of 'int' (line 1013)
        int_311919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 39), 'int', False)
        # Calling int(args, kwargs) (line 1013)
        int_call_result_311929 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 39), int_311919, *[subscript_call_result_311927], **kwargs_311928)
        
        int_311930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1013, 53), 'int')
        # Applying the binary operator '*' (line 1013)
        result_mul_311931 = python_operator(stypy.reporting.localization.Localization(__file__, 1013, 39), '*', int_call_result_311929, int_311930)
        
        
        # Call to int(...): (line 1013)
        # Processing the call arguments (line 1013)
        
        # Obtaining the type of the subscript
        int_311933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1013, 67), 'int')
        slice_311934 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1013, 62), int_311933, None, None)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1013)
        i_311935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 64), 'i', False)
        # Getting the type of 'l' (line 1013)
        l_311936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 62), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1013)
        getitem___311937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 62), l_311936, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1013)
        subscript_call_result_311938 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 62), getitem___311937, i_311935)
        
        # Obtaining the member '__getitem__' of a type (line 1013)
        getitem___311939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 62), subscript_call_result_311938, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1013)
        subscript_call_result_311940 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 62), getitem___311939, slice_311934)
        
        # Processing the call keyword arguments (line 1013)
        kwargs_311941 = {}
        # Getting the type of 'int' (line 1013)
        int_311932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 58), 'int', False)
        # Calling int(args, kwargs) (line 1013)
        int_call_result_311942 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 58), int_311932, *[subscript_call_result_311940], **kwargs_311941)
        
        int_311943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1013, 72), 'int')
        # Applying the binary operator '*' (line 1013)
        result_mul_311944 = python_operator(stypy.reporting.localization.Localization(__file__, 1013, 58), '*', int_call_result_311942, int_311943)
        
        # Applying the binary operator '+' (line 1013)
        result_add_311945 = python_operator(stypy.reporting.localization.Localization(__file__, 1013, 39), '+', result_mul_311931, result_mul_311944)
        
        # Getting the type of 'res' (line 1013)
        res_311946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 24), 'res')
        # Setting the type of the member 'tzoffset' of a type (line 1013)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 24), res_311946, 'tzoffset', result_add_311945)
        # SSA branch for the else part of an if statement (line 1011)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'i' (line 1014)
        i_311947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 25), 'i')
        int_311948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1014, 27), 'int')
        # Applying the binary operator '+' (line 1014)
        result_add_311949 = python_operator(stypy.reporting.localization.Localization(__file__, 1014, 25), '+', i_311947, int_311948)
        
        # Getting the type of 'len_l' (line 1014)
        len_l_311950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 31), 'len_l')
        # Applying the binary operator '<' (line 1014)
        result_lt_311951 = python_operator(stypy.reporting.localization.Localization(__file__, 1014, 25), '<', result_add_311949, len_l_311950)
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1014)
        i_311952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 43), 'i')
        int_311953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1014, 45), 'int')
        # Applying the binary operator '+' (line 1014)
        result_add_311954 = python_operator(stypy.reporting.localization.Localization(__file__, 1014, 43), '+', i_311952, int_311953)
        
        # Getting the type of 'l' (line 1014)
        l_311955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 41), 'l')
        # Obtaining the member '__getitem__' of a type (line 1014)
        getitem___311956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1014, 41), l_311955, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1014)
        subscript_call_result_311957 = invoke(stypy.reporting.localization.Localization(__file__, 1014, 41), getitem___311956, result_add_311954)
        
        unicode_311958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1014, 51), 'unicode', u':')
        # Applying the binary operator '==' (line 1014)
        result_eq_311959 = python_operator(stypy.reporting.localization.Localization(__file__, 1014, 41), '==', subscript_call_result_311957, unicode_311958)
        
        # Applying the binary operator 'and' (line 1014)
        result_and_keyword_311960 = python_operator(stypy.reporting.localization.Localization(__file__, 1014, 25), 'and', result_lt_311951, result_eq_311959)
        
        # Testing the type of an if condition (line 1014)
        if_condition_311961 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1014, 25), result_and_keyword_311960)
        # Assigning a type to the variable 'if_condition_311961' (line 1014)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1014, 25), 'if_condition_311961', if_condition_311961)
        # SSA begins for if statement (line 1014)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Attribute (line 1016):
        
        # Assigning a BinOp to a Attribute (line 1016):
        
        # Call to int(...): (line 1016)
        # Processing the call arguments (line 1016)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1016)
        i_311963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 45), 'i', False)
        # Getting the type of 'l' (line 1016)
        l_311964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 43), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1016)
        getitem___311965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1016, 43), l_311964, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1016)
        subscript_call_result_311966 = invoke(stypy.reporting.localization.Localization(__file__, 1016, 43), getitem___311965, i_311963)
        
        # Processing the call keyword arguments (line 1016)
        kwargs_311967 = {}
        # Getting the type of 'int' (line 1016)
        int_311962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 39), 'int', False)
        # Calling int(args, kwargs) (line 1016)
        int_call_result_311968 = invoke(stypy.reporting.localization.Localization(__file__, 1016, 39), int_311962, *[subscript_call_result_311966], **kwargs_311967)
        
        int_311969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1016, 49), 'int')
        # Applying the binary operator '*' (line 1016)
        result_mul_311970 = python_operator(stypy.reporting.localization.Localization(__file__, 1016, 39), '*', int_call_result_311968, int_311969)
        
        
        # Call to int(...): (line 1016)
        # Processing the call arguments (line 1016)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1016)
        i_311972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 60), 'i', False)
        int_311973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1016, 62), 'int')
        # Applying the binary operator '+' (line 1016)
        result_add_311974 = python_operator(stypy.reporting.localization.Localization(__file__, 1016, 60), '+', i_311972, int_311973)
        
        # Getting the type of 'l' (line 1016)
        l_311975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 58), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1016)
        getitem___311976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1016, 58), l_311975, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1016)
        subscript_call_result_311977 = invoke(stypy.reporting.localization.Localization(__file__, 1016, 58), getitem___311976, result_add_311974)
        
        # Processing the call keyword arguments (line 1016)
        kwargs_311978 = {}
        # Getting the type of 'int' (line 1016)
        int_311971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 54), 'int', False)
        # Calling int(args, kwargs) (line 1016)
        int_call_result_311979 = invoke(stypy.reporting.localization.Localization(__file__, 1016, 54), int_311971, *[subscript_call_result_311977], **kwargs_311978)
        
        int_311980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1016, 66), 'int')
        # Applying the binary operator '*' (line 1016)
        result_mul_311981 = python_operator(stypy.reporting.localization.Localization(__file__, 1016, 54), '*', int_call_result_311979, int_311980)
        
        # Applying the binary operator '+' (line 1016)
        result_add_311982 = python_operator(stypy.reporting.localization.Localization(__file__, 1016, 39), '+', result_mul_311970, result_mul_311981)
        
        # Getting the type of 'res' (line 1016)
        res_311983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 24), 'res')
        # Setting the type of the member 'tzoffset' of a type (line 1016)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1016, 24), res_311983, 'tzoffset', result_add_311982)
        
        # Getting the type of 'i' (line 1017)
        i_311984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 24), 'i')
        int_311985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1017, 29), 'int')
        # Applying the binary operator '+=' (line 1017)
        result_iadd_311986 = python_operator(stypy.reporting.localization.Localization(__file__, 1017, 24), '+=', i_311984, int_311985)
        # Assigning a type to the variable 'i' (line 1017)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1017, 24), 'i', result_iadd_311986)
        
        # SSA branch for the else part of an if statement (line 1014)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'len_li' (line 1018)
        len_li_311987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 25), 'len_li')
        int_311988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1018, 35), 'int')
        # Applying the binary operator '<=' (line 1018)
        result_le_311989 = python_operator(stypy.reporting.localization.Localization(__file__, 1018, 25), '<=', len_li_311987, int_311988)
        
        # Testing the type of an if condition (line 1018)
        if_condition_311990 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1018, 25), result_le_311989)
        # Assigning a type to the variable 'if_condition_311990' (line 1018)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1018, 25), 'if_condition_311990', if_condition_311990)
        # SSA begins for if statement (line 1018)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Attribute (line 1020):
        
        # Assigning a BinOp to a Attribute (line 1020):
        
        # Call to int(...): (line 1020)
        # Processing the call arguments (line 1020)
        
        # Obtaining the type of the subscript
        int_311992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 49), 'int')
        slice_311993 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1020, 43), None, int_311992, None)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1020)
        i_311994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 45), 'i', False)
        # Getting the type of 'l' (line 1020)
        l_311995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 43), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1020)
        getitem___311996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 43), l_311995, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1020)
        subscript_call_result_311997 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 43), getitem___311996, i_311994)
        
        # Obtaining the member '__getitem__' of a type (line 1020)
        getitem___311998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 43), subscript_call_result_311997, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1020)
        subscript_call_result_311999 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 43), getitem___311998, slice_311993)
        
        # Processing the call keyword arguments (line 1020)
        kwargs_312000 = {}
        # Getting the type of 'int' (line 1020)
        int_311991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 39), 'int', False)
        # Calling int(args, kwargs) (line 1020)
        int_call_result_312001 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 39), int_311991, *[subscript_call_result_311999], **kwargs_312000)
        
        int_312002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 53), 'int')
        # Applying the binary operator '*' (line 1020)
        result_mul_312003 = python_operator(stypy.reporting.localization.Localization(__file__, 1020, 39), '*', int_call_result_312001, int_312002)
        
        # Getting the type of 'res' (line 1020)
        res_312004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 24), 'res')
        # Setting the type of the member 'tzoffset' of a type (line 1020)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 24), res_312004, 'tzoffset', result_mul_312003)
        # SSA branch for the else part of an if statement (line 1018)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1022)
        tuple_312005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1022, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1022)
        # Adding element type (line 1022)
        # Getting the type of 'None' (line 1022)
        None_312006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 31), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1022, 31), tuple_312005, None_312006)
        # Adding element type (line 1022)
        # Getting the type of 'None' (line 1022)
        None_312007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 37), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1022, 31), tuple_312005, None_312007)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1022)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1022, 24), 'stypy_return_type', tuple_312005)
        # SSA join for if statement (line 1018)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1014)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1011)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'i' (line 1023)
        i_312008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 20), 'i')
        int_312009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1023, 25), 'int')
        # Applying the binary operator '+=' (line 1023)
        result_iadd_312010 = python_operator(stypy.reporting.localization.Localization(__file__, 1023, 20), '+=', i_312008, int_312009)
        # Assigning a type to the variable 'i' (line 1023)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1023, 20), 'i', result_iadd_312010)
        
        
        # Getting the type of 'res' (line 1025)
        res_312011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 20), 'res')
        # Obtaining the member 'tzoffset' of a type (line 1025)
        tzoffset_312012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1025, 20), res_312011, 'tzoffset')
        # Getting the type of 'signal' (line 1025)
        signal_312013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 36), 'signal')
        # Applying the binary operator '*=' (line 1025)
        result_imul_312014 = python_operator(stypy.reporting.localization.Localization(__file__, 1025, 20), '*=', tzoffset_312012, signal_312013)
        # Getting the type of 'res' (line 1025)
        res_312015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 20), 'res')
        # Setting the type of the member 'tzoffset' of a type (line 1025)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1025, 20), res_312015, 'tzoffset', result_imul_312014)
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'i' (line 1028)
        i_312016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 24), 'i')
        int_312017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, 26), 'int')
        # Applying the binary operator '+' (line 1028)
        result_add_312018 = python_operator(stypy.reporting.localization.Localization(__file__, 1028, 24), '+', i_312016, int_312017)
        
        # Getting the type of 'len_l' (line 1028)
        len_l_312019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 30), 'len_l')
        # Applying the binary operator '<' (line 1028)
        result_lt_312020 = python_operator(stypy.reporting.localization.Localization(__file__, 1028, 24), '<', result_add_312018, len_l_312019)
        
        
        # Call to jump(...): (line 1029)
        # Processing the call arguments (line 1029)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1029)
        i_312023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 36), 'i', False)
        # Getting the type of 'l' (line 1029)
        l_312024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 34), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1029)
        getitem___312025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1029, 34), l_312024, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1029)
        subscript_call_result_312026 = invoke(stypy.reporting.localization.Localization(__file__, 1029, 34), getitem___312025, i_312023)
        
        # Processing the call keyword arguments (line 1029)
        kwargs_312027 = {}
        # Getting the type of 'info' (line 1029)
        info_312021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 24), 'info', False)
        # Obtaining the member 'jump' of a type (line 1029)
        jump_312022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1029, 24), info_312021, 'jump')
        # Calling jump(args, kwargs) (line 1029)
        jump_call_result_312028 = invoke(stypy.reporting.localization.Localization(__file__, 1029, 24), jump_312022, *[subscript_call_result_312026], **kwargs_312027)
        
        # Applying the binary operator 'and' (line 1028)
        result_and_keyword_312029 = python_operator(stypy.reporting.localization.Localization(__file__, 1028, 24), 'and', result_lt_312020, jump_call_result_312028)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1029)
        i_312030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 46), 'i')
        int_312031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1029, 48), 'int')
        # Applying the binary operator '+' (line 1029)
        result_add_312032 = python_operator(stypy.reporting.localization.Localization(__file__, 1029, 46), '+', i_312030, int_312031)
        
        # Getting the type of 'l' (line 1029)
        l_312033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 44), 'l')
        # Obtaining the member '__getitem__' of a type (line 1029)
        getitem___312034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1029, 44), l_312033, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1029)
        subscript_call_result_312035 = invoke(stypy.reporting.localization.Localization(__file__, 1029, 44), getitem___312034, result_add_312032)
        
        unicode_312036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1029, 54), 'unicode', u'(')
        # Applying the binary operator '==' (line 1029)
        result_eq_312037 = python_operator(stypy.reporting.localization.Localization(__file__, 1029, 44), '==', subscript_call_result_312035, unicode_312036)
        
        # Applying the binary operator 'and' (line 1028)
        result_and_keyword_312038 = python_operator(stypy.reporting.localization.Localization(__file__, 1028, 24), 'and', result_and_keyword_312029, result_eq_312037)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1029)
        i_312039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 64), 'i')
        int_312040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1029, 66), 'int')
        # Applying the binary operator '+' (line 1029)
        result_add_312041 = python_operator(stypy.reporting.localization.Localization(__file__, 1029, 64), '+', i_312039, int_312040)
        
        # Getting the type of 'l' (line 1029)
        l_312042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 62), 'l')
        # Obtaining the member '__getitem__' of a type (line 1029)
        getitem___312043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1029, 62), l_312042, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1029)
        subscript_call_result_312044 = invoke(stypy.reporting.localization.Localization(__file__, 1029, 62), getitem___312043, result_add_312041)
        
        unicode_312045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1029, 72), 'unicode', u')')
        # Applying the binary operator '==' (line 1029)
        result_eq_312046 = python_operator(stypy.reporting.localization.Localization(__file__, 1029, 62), '==', subscript_call_result_312044, unicode_312045)
        
        # Applying the binary operator 'and' (line 1028)
        result_and_keyword_312047 = python_operator(stypy.reporting.localization.Localization(__file__, 1028, 24), 'and', result_and_keyword_312038, result_eq_312046)
        
        int_312048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1030, 24), 'int')
        
        # Call to len(...): (line 1030)
        # Processing the call arguments (line 1030)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1030)
        i_312050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 35), 'i', False)
        int_312051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1030, 37), 'int')
        # Applying the binary operator '+' (line 1030)
        result_add_312052 = python_operator(stypy.reporting.localization.Localization(__file__, 1030, 35), '+', i_312050, int_312051)
        
        # Getting the type of 'l' (line 1030)
        l_312053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 33), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1030)
        getitem___312054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1030, 33), l_312053, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1030)
        subscript_call_result_312055 = invoke(stypy.reporting.localization.Localization(__file__, 1030, 33), getitem___312054, result_add_312052)
        
        # Processing the call keyword arguments (line 1030)
        kwargs_312056 = {}
        # Getting the type of 'len' (line 1030)
        len_312049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 29), 'len', False)
        # Calling len(args, kwargs) (line 1030)
        len_call_result_312057 = invoke(stypy.reporting.localization.Localization(__file__, 1030, 29), len_312049, *[subscript_call_result_312055], **kwargs_312056)
        
        # Applying the binary operator '<=' (line 1030)
        result_le_312058 = python_operator(stypy.reporting.localization.Localization(__file__, 1030, 24), '<=', int_312048, len_call_result_312057)
        int_312059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1030, 44), 'int')
        # Applying the binary operator '<=' (line 1030)
        result_le_312060 = python_operator(stypy.reporting.localization.Localization(__file__, 1030, 24), '<=', len_call_result_312057, int_312059)
        # Applying the binary operator '&' (line 1030)
        result_and__312061 = python_operator(stypy.reporting.localization.Localization(__file__, 1030, 24), '&', result_le_312058, result_le_312060)
        
        # Applying the binary operator 'and' (line 1028)
        result_and_keyword_312062 = python_operator(stypy.reporting.localization.Localization(__file__, 1028, 24), 'and', result_and_keyword_312047, result_and__312061)
        
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1031)
        i_312068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 42), 'i')
        int_312069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1031, 44), 'int')
        # Applying the binary operator '+' (line 1031)
        result_add_312070 = python_operator(stypy.reporting.localization.Localization(__file__, 1031, 42), '+', i_312068, int_312069)
        
        # Getting the type of 'l' (line 1031)
        l_312071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 40), 'l')
        # Obtaining the member '__getitem__' of a type (line 1031)
        getitem___312072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1031, 40), l_312071, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1031)
        subscript_call_result_312073 = invoke(stypy.reporting.localization.Localization(__file__, 1031, 40), getitem___312072, result_add_312070)
        
        comprehension_312074 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1031, 29), subscript_call_result_312073)
        # Assigning a type to the variable 'x' (line 1031)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1031, 29), 'x', comprehension_312074)
        
        # Getting the type of 'x' (line 1032)
        x_312064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 32), 'x')
        # Getting the type of 'string' (line 1032)
        string_312065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 41), 'string')
        # Obtaining the member 'ascii_uppercase' of a type (line 1032)
        ascii_uppercase_312066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1032, 41), string_312065, 'ascii_uppercase')
        # Applying the binary operator 'notin' (line 1032)
        result_contains_312067 = python_operator(stypy.reporting.localization.Localization(__file__, 1032, 32), 'notin', x_312064, ascii_uppercase_312066)
        
        # Getting the type of 'x' (line 1031)
        x_312063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 29), 'x')
        list_312075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1031, 29), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1031, 29), list_312075, x_312063)
        # Applying the 'not' unary operator (line 1031)
        result_not__312076 = python_operator(stypy.reporting.localization.Localization(__file__, 1031, 24), 'not', list_312075)
        
        # Applying the binary operator 'and' (line 1028)
        result_and_keyword_312077 = python_operator(stypy.reporting.localization.Localization(__file__, 1028, 24), 'and', result_and_keyword_312062, result_not__312076)
        
        # Testing the type of an if condition (line 1028)
        if_condition_312078 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1028, 20), result_and_keyword_312077)
        # Assigning a type to the variable 'if_condition_312078' (line 1028)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1028, 20), 'if_condition_312078', if_condition_312078)
        # SSA begins for if statement (line 1028)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Attribute (line 1034):
        
        # Assigning a Subscript to a Attribute (line 1034):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1034)
        i_312079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 39), 'i')
        int_312080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1034, 41), 'int')
        # Applying the binary operator '+' (line 1034)
        result_add_312081 = python_operator(stypy.reporting.localization.Localization(__file__, 1034, 39), '+', i_312079, int_312080)
        
        # Getting the type of 'l' (line 1034)
        l_312082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 37), 'l')
        # Obtaining the member '__getitem__' of a type (line 1034)
        getitem___312083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 37), l_312082, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1034)
        subscript_call_result_312084 = invoke(stypy.reporting.localization.Localization(__file__, 1034, 37), getitem___312083, result_add_312081)
        
        # Getting the type of 'res' (line 1034)
        res_312085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 24), 'res')
        # Setting the type of the member 'tzname' of a type (line 1034)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 24), res_312085, 'tzname', subscript_call_result_312084)
        
        # Getting the type of 'i' (line 1035)
        i_312086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 24), 'i')
        int_312087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1035, 29), 'int')
        # Applying the binary operator '+=' (line 1035)
        result_iadd_312088 = python_operator(stypy.reporting.localization.Localization(__file__, 1035, 24), '+=', i_312086, int_312087)
        # Assigning a type to the variable 'i' (line 1035)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1035, 24), 'i', result_iadd_312088)
        
        # SSA join for if statement (line 1028)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1006)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Evaluating a boolean operation
        
        # Call to jump(...): (line 1039)
        # Processing the call arguments (line 1039)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1039)
        i_312091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 36), 'i', False)
        # Getting the type of 'l' (line 1039)
        l_312092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 34), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1039)
        getitem___312093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 34), l_312092, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1039)
        subscript_call_result_312094 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 34), getitem___312093, i_312091)
        
        # Processing the call keyword arguments (line 1039)
        kwargs_312095 = {}
        # Getting the type of 'info' (line 1039)
        info_312089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 24), 'info', False)
        # Obtaining the member 'jump' of a type (line 1039)
        jump_312090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 24), info_312089, 'jump')
        # Calling jump(args, kwargs) (line 1039)
        jump_call_result_312096 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 24), jump_312090, *[subscript_call_result_312094], **kwargs_312095)
        
        # Getting the type of 'fuzzy' (line 1039)
        fuzzy_312097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 43), 'fuzzy')
        # Applying the binary operator 'or' (line 1039)
        result_or_keyword_312098 = python_operator(stypy.reporting.localization.Localization(__file__, 1039, 24), 'or', jump_call_result_312096, fuzzy_312097)
        
        # Applying the 'not' unary operator (line 1039)
        result_not__312099 = python_operator(stypy.reporting.localization.Localization(__file__, 1039, 19), 'not', result_or_keyword_312098)
        
        # Testing the type of an if condition (line 1039)
        if_condition_312100 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1039, 16), result_not__312099)
        # Assigning a type to the variable 'if_condition_312100' (line 1039)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1039, 16), 'if_condition_312100', if_condition_312100)
        # SSA begins for if statement (line 1039)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1040)
        tuple_312101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1040)
        # Adding element type (line 1040)
        # Getting the type of 'None' (line 1040)
        None_312102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 27), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1040, 27), tuple_312101, None_312102)
        # Adding element type (line 1040)
        # Getting the type of 'None' (line 1040)
        None_312103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 33), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1040, 27), tuple_312101, None_312103)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1040)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1040, 20), 'stypy_return_type', tuple_312101)
        # SSA join for if statement (line 1039)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1042):
        
        # Assigning a Call to a Name (line 1042):
        
        # Call to _skip_token(...): (line 1042)
        # Processing the call arguments (line 1042)
        # Getting the type of 'skipped_tokens' (line 1042)
        skipped_tokens_312106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 56), 'skipped_tokens', False)
        # Getting the type of 'last_skipped_token_i' (line 1043)
        last_skipped_token_i_312107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 48), 'last_skipped_token_i', False)
        # Getting the type of 'i' (line 1043)
        i_312108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 70), 'i', False)
        # Getting the type of 'l' (line 1043)
        l_312109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 73), 'l', False)
        # Processing the call keyword arguments (line 1042)
        kwargs_312110 = {}
        # Getting the type of 'self' (line 1042)
        self_312104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 39), 'self', False)
        # Obtaining the member '_skip_token' of a type (line 1042)
        _skip_token_312105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 39), self_312104, '_skip_token')
        # Calling _skip_token(args, kwargs) (line 1042)
        _skip_token_call_result_312111 = invoke(stypy.reporting.localization.Localization(__file__, 1042, 39), _skip_token_312105, *[skipped_tokens_312106, last_skipped_token_i_312107, i_312108, l_312109], **kwargs_312110)
        
        # Assigning a type to the variable 'last_skipped_token_i' (line 1042)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1042, 16), 'last_skipped_token_i', _skip_token_call_result_312111)
        
        # Getting the type of 'i' (line 1044)
        i_312112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 16), 'i')
        int_312113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1044, 21), 'int')
        # Applying the binary operator '+=' (line 1044)
        result_iadd_312114 = python_operator(stypy.reporting.localization.Localization(__file__, 1044, 16), '+=', i_312112, int_312113)
        # Assigning a type to the variable 'i' (line 1044)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1044, 16), 'i', result_iadd_312114)
        
        # SSA join for while statement (line 691)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 1047):
        
        # Assigning a Call to a Name:
        
        # Call to resolve_ymd(...): (line 1047)
        # Processing the call arguments (line 1047)
        # Getting the type of 'mstridx' (line 1047)
        mstridx_312117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 47), 'mstridx', False)
        # Getting the type of 'yearfirst' (line 1047)
        yearfirst_312118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 56), 'yearfirst', False)
        # Getting the type of 'dayfirst' (line 1047)
        dayfirst_312119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 67), 'dayfirst', False)
        # Processing the call keyword arguments (line 1047)
        kwargs_312120 = {}
        # Getting the type of 'ymd' (line 1047)
        ymd_312115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 31), 'ymd', False)
        # Obtaining the member 'resolve_ymd' of a type (line 1047)
        resolve_ymd_312116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 31), ymd_312115, 'resolve_ymd')
        # Calling resolve_ymd(args, kwargs) (line 1047)
        resolve_ymd_call_result_312121 = invoke(stypy.reporting.localization.Localization(__file__, 1047, 31), resolve_ymd_312116, *[mstridx_312117, yearfirst_312118, dayfirst_312119], **kwargs_312120)
        
        # Assigning a type to the variable 'call_assignment_308911' (line 1047)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 12), 'call_assignment_308911', resolve_ymd_call_result_312121)
        
        # Assigning a Call to a Name (line 1047):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_312124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 12), 'int')
        # Processing the call keyword arguments
        kwargs_312125 = {}
        # Getting the type of 'call_assignment_308911' (line 1047)
        call_assignment_308911_312122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 12), 'call_assignment_308911', False)
        # Obtaining the member '__getitem__' of a type (line 1047)
        getitem___312123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 12), call_assignment_308911_312122, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_312126 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___312123, *[int_312124], **kwargs_312125)
        
        # Assigning a type to the variable 'call_assignment_308912' (line 1047)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 12), 'call_assignment_308912', getitem___call_result_312126)
        
        # Assigning a Name to a Name (line 1047):
        # Getting the type of 'call_assignment_308912' (line 1047)
        call_assignment_308912_312127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 12), 'call_assignment_308912')
        # Assigning a type to the variable 'year' (line 1047)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 12), 'year', call_assignment_308912_312127)
        
        # Assigning a Call to a Name (line 1047):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_312130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 12), 'int')
        # Processing the call keyword arguments
        kwargs_312131 = {}
        # Getting the type of 'call_assignment_308911' (line 1047)
        call_assignment_308911_312128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 12), 'call_assignment_308911', False)
        # Obtaining the member '__getitem__' of a type (line 1047)
        getitem___312129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 12), call_assignment_308911_312128, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_312132 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___312129, *[int_312130], **kwargs_312131)
        
        # Assigning a type to the variable 'call_assignment_308913' (line 1047)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 12), 'call_assignment_308913', getitem___call_result_312132)
        
        # Assigning a Name to a Name (line 1047):
        # Getting the type of 'call_assignment_308913' (line 1047)
        call_assignment_308913_312133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 12), 'call_assignment_308913')
        # Assigning a type to the variable 'month' (line 1047)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 18), 'month', call_assignment_308913_312133)
        
        # Assigning a Call to a Name (line 1047):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_312136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 12), 'int')
        # Processing the call keyword arguments
        kwargs_312137 = {}
        # Getting the type of 'call_assignment_308911' (line 1047)
        call_assignment_308911_312134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 12), 'call_assignment_308911', False)
        # Obtaining the member '__getitem__' of a type (line 1047)
        getitem___312135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 12), call_assignment_308911_312134, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_312138 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___312135, *[int_312136], **kwargs_312137)
        
        # Assigning a type to the variable 'call_assignment_308914' (line 1047)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 12), 'call_assignment_308914', getitem___call_result_312138)
        
        # Assigning a Name to a Name (line 1047):
        # Getting the type of 'call_assignment_308914' (line 1047)
        call_assignment_308914_312139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 12), 'call_assignment_308914')
        # Assigning a type to the variable 'day' (line 1047)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 25), 'day', call_assignment_308914_312139)
        
        # Type idiom detected: calculating its left and rigth part (line 1048)
        # Getting the type of 'year' (line 1048)
        year_312140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 12), 'year')
        # Getting the type of 'None' (line 1048)
        None_312141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 27), 'None')
        
        (may_be_312142, more_types_in_union_312143) = may_not_be_none(year_312140, None_312141)

        if may_be_312142:

            if more_types_in_union_312143:
                # Runtime conditional SSA (line 1048)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 1049):
            
            # Assigning a Name to a Attribute (line 1049):
            # Getting the type of 'year' (line 1049)
            year_312144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 27), 'year')
            # Getting the type of 'res' (line 1049)
            res_312145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 16), 'res')
            # Setting the type of the member 'year' of a type (line 1049)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1049, 16), res_312145, 'year', year_312144)
            
            # Assigning a Attribute to a Attribute (line 1050):
            
            # Assigning a Attribute to a Attribute (line 1050):
            # Getting the type of 'ymd' (line 1050)
            ymd_312146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 40), 'ymd')
            # Obtaining the member 'century_specified' of a type (line 1050)
            century_specified_312147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 40), ymd_312146, 'century_specified')
            # Getting the type of 'res' (line 1050)
            res_312148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 16), 'res')
            # Setting the type of the member 'century_specified' of a type (line 1050)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 16), res_312148, 'century_specified', century_specified_312147)

            if more_types_in_union_312143:
                # SSA join for if statement (line 1048)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1052)
        # Getting the type of 'month' (line 1052)
        month_312149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 12), 'month')
        # Getting the type of 'None' (line 1052)
        None_312150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 28), 'None')
        
        (may_be_312151, more_types_in_union_312152) = may_not_be_none(month_312149, None_312150)

        if may_be_312151:

            if more_types_in_union_312152:
                # Runtime conditional SSA (line 1052)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 1053):
            
            # Assigning a Name to a Attribute (line 1053):
            # Getting the type of 'month' (line 1053)
            month_312153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 28), 'month')
            # Getting the type of 'res' (line 1053)
            res_312154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 16), 'res')
            # Setting the type of the member 'month' of a type (line 1053)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1053, 16), res_312154, 'month', month_312153)

            if more_types_in_union_312152:
                # SSA join for if statement (line 1052)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1055)
        # Getting the type of 'day' (line 1055)
        day_312155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 12), 'day')
        # Getting the type of 'None' (line 1055)
        None_312156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 26), 'None')
        
        (may_be_312157, more_types_in_union_312158) = may_not_be_none(day_312155, None_312156)

        if may_be_312157:

            if more_types_in_union_312158:
                # Runtime conditional SSA (line 1055)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 1056):
            
            # Assigning a Name to a Attribute (line 1056):
            # Getting the type of 'day' (line 1056)
            day_312159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 26), 'day')
            # Getting the type of 'res' (line 1056)
            res_312160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 16), 'res')
            # Setting the type of the member 'day' of a type (line 1056)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1056, 16), res_312160, 'day', day_312159)

            if more_types_in_union_312158:
                # SSA join for if statement (line 1055)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA branch for the except part of a try statement (line 682)
        # SSA branch for the except 'Tuple' branch of a try statement (line 682)
        module_type_store.open_ssa_branch('except')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1059)
        tuple_312161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1059, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1059)
        # Adding element type (line 1059)
        # Getting the type of 'None' (line 1059)
        None_312162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 19), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1059, 19), tuple_312161, None_312162)
        # Adding element type (line 1059)
        # Getting the type of 'None' (line 1059)
        None_312163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 25), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1059, 19), tuple_312161, None_312163)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1059)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1059, 12), 'stypy_return_type', tuple_312161)
        # SSA join for try-except statement (line 682)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to validate(...): (line 1061)
        # Processing the call arguments (line 1061)
        # Getting the type of 'res' (line 1061)
        res_312166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1061, 29), 'res', False)
        # Processing the call keyword arguments (line 1061)
        kwargs_312167 = {}
        # Getting the type of 'info' (line 1061)
        info_312164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1061, 15), 'info', False)
        # Obtaining the member 'validate' of a type (line 1061)
        validate_312165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1061, 15), info_312164, 'validate')
        # Calling validate(args, kwargs) (line 1061)
        validate_call_result_312168 = invoke(stypy.reporting.localization.Localization(__file__, 1061, 15), validate_312165, *[res_312166], **kwargs_312167)
        
        # Applying the 'not' unary operator (line 1061)
        result_not__312169 = python_operator(stypy.reporting.localization.Localization(__file__, 1061, 11), 'not', validate_call_result_312168)
        
        # Testing the type of an if condition (line 1061)
        if_condition_312170 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1061, 8), result_not__312169)
        # Assigning a type to the variable 'if_condition_312170' (line 1061)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1061, 8), 'if_condition_312170', if_condition_312170)
        # SSA begins for if statement (line 1061)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1062)
        tuple_312171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1062, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1062)
        # Adding element type (line 1062)
        # Getting the type of 'None' (line 1062)
        None_312172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 19), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1062, 19), tuple_312171, None_312172)
        # Adding element type (line 1062)
        # Getting the type of 'None' (line 1062)
        None_312173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 25), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1062, 19), tuple_312171, None_312173)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1062)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1062, 12), 'stypy_return_type', tuple_312171)
        # SSA join for if statement (line 1061)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'fuzzy_with_tokens' (line 1064)
        fuzzy_with_tokens_312174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 11), 'fuzzy_with_tokens')
        # Testing the type of an if condition (line 1064)
        if_condition_312175 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1064, 8), fuzzy_with_tokens_312174)
        # Assigning a type to the variable 'if_condition_312175' (line 1064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1064, 8), 'if_condition_312175', if_condition_312175)
        # SSA begins for if statement (line 1064)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1065)
        tuple_312176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1065, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1065)
        # Adding element type (line 1065)
        # Getting the type of 'res' (line 1065)
        res_312177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 19), 'res')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1065, 19), tuple_312176, res_312177)
        # Adding element type (line 1065)
        
        # Call to tuple(...): (line 1065)
        # Processing the call arguments (line 1065)
        # Getting the type of 'skipped_tokens' (line 1065)
        skipped_tokens_312179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 30), 'skipped_tokens', False)
        # Processing the call keyword arguments (line 1065)
        kwargs_312180 = {}
        # Getting the type of 'tuple' (line 1065)
        tuple_312178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 24), 'tuple', False)
        # Calling tuple(args, kwargs) (line 1065)
        tuple_call_result_312181 = invoke(stypy.reporting.localization.Localization(__file__, 1065, 24), tuple_312178, *[skipped_tokens_312179], **kwargs_312180)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1065, 19), tuple_312176, tuple_call_result_312181)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1065, 12), 'stypy_return_type', tuple_312176)
        # SSA branch for the else part of an if statement (line 1064)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1067)
        tuple_312182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1067, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1067)
        # Adding element type (line 1067)
        # Getting the type of 'res' (line 1067)
        res_312183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 19), 'res')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1067, 19), tuple_312182, res_312183)
        # Adding element type (line 1067)
        # Getting the type of 'None' (line 1067)
        None_312184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 24), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1067, 19), tuple_312182, None_312184)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1067, 12), 'stypy_return_type', tuple_312182)
        # SSA join for if statement (line 1064)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_parse(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_parse' in the type store
        # Getting the type of 'stypy_return_type' (line 622)
        stypy_return_type_312185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_312185)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_parse'
        return stypy_return_type_312185


    @staticmethod
    @norecursion
    def _skip_token(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_skip_token'
        module_type_store = module_type_store.open_function_context('_skip_token', 1069, 4, False)
        
        # Passed parameters checking function
        parser._skip_token.__dict__.__setitem__('stypy_localization', localization)
        parser._skip_token.__dict__.__setitem__('stypy_type_of_self', None)
        parser._skip_token.__dict__.__setitem__('stypy_type_store', module_type_store)
        parser._skip_token.__dict__.__setitem__('stypy_function_name', '_skip_token')
        parser._skip_token.__dict__.__setitem__('stypy_param_names_list', ['skipped_tokens', 'last_skipped_token_i', 'i', 'l'])
        parser._skip_token.__dict__.__setitem__('stypy_varargs_param_name', None)
        parser._skip_token.__dict__.__setitem__('stypy_kwargs_param_name', None)
        parser._skip_token.__dict__.__setitem__('stypy_call_defaults', defaults)
        parser._skip_token.__dict__.__setitem__('stypy_call_varargs', varargs)
        parser._skip_token.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        parser._skip_token.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, None, module_type_store, '_skip_token', ['skipped_tokens', 'last_skipped_token_i', 'i', 'l'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_skip_token', localization, ['last_skipped_token_i', 'i', 'l'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_skip_token(...)' code ##################

        
        
        # Getting the type of 'last_skipped_token_i' (line 1071)
        last_skipped_token_i_312186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 11), 'last_skipped_token_i')
        # Getting the type of 'i' (line 1071)
        i_312187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 35), 'i')
        int_312188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1071, 39), 'int')
        # Applying the binary operator '-' (line 1071)
        result_sub_312189 = python_operator(stypy.reporting.localization.Localization(__file__, 1071, 35), '-', i_312187, int_312188)
        
        # Applying the binary operator '==' (line 1071)
        result_eq_312190 = python_operator(stypy.reporting.localization.Localization(__file__, 1071, 11), '==', last_skipped_token_i_312186, result_sub_312189)
        
        # Testing the type of an if condition (line 1071)
        if_condition_312191 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1071, 8), result_eq_312190)
        # Assigning a type to the variable 'if_condition_312191' (line 1071)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1071, 8), 'if_condition_312191', if_condition_312191)
        # SSA begins for if statement (line 1071)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'skipped_tokens' (line 1073)
        skipped_tokens_312192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 12), 'skipped_tokens')
        
        # Obtaining the type of the subscript
        int_312193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1073, 27), 'int')
        # Getting the type of 'skipped_tokens' (line 1073)
        skipped_tokens_312194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 12), 'skipped_tokens')
        # Obtaining the member '__getitem__' of a type (line 1073)
        getitem___312195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1073, 12), skipped_tokens_312194, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1073)
        subscript_call_result_312196 = invoke(stypy.reporting.localization.Localization(__file__, 1073, 12), getitem___312195, int_312193)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1073)
        i_312197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 36), 'i')
        # Getting the type of 'l' (line 1073)
        l_312198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 34), 'l')
        # Obtaining the member '__getitem__' of a type (line 1073)
        getitem___312199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1073, 34), l_312198, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1073)
        subscript_call_result_312200 = invoke(stypy.reporting.localization.Localization(__file__, 1073, 34), getitem___312199, i_312197)
        
        # Applying the binary operator '+=' (line 1073)
        result_iadd_312201 = python_operator(stypy.reporting.localization.Localization(__file__, 1073, 12), '+=', subscript_call_result_312196, subscript_call_result_312200)
        # Getting the type of 'skipped_tokens' (line 1073)
        skipped_tokens_312202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 12), 'skipped_tokens')
        int_312203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1073, 27), 'int')
        # Storing an element on a container (line 1073)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1073, 12), skipped_tokens_312202, (int_312203, result_iadd_312201))
        
        # SSA branch for the else part of an if statement (line 1071)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 1076)
        # Processing the call arguments (line 1076)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1076)
        i_312206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 36), 'i', False)
        # Getting the type of 'l' (line 1076)
        l_312207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 34), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1076)
        getitem___312208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1076, 34), l_312207, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1076)
        subscript_call_result_312209 = invoke(stypy.reporting.localization.Localization(__file__, 1076, 34), getitem___312208, i_312206)
        
        # Processing the call keyword arguments (line 1076)
        kwargs_312210 = {}
        # Getting the type of 'skipped_tokens' (line 1076)
        skipped_tokens_312204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 12), 'skipped_tokens', False)
        # Obtaining the member 'append' of a type (line 1076)
        append_312205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1076, 12), skipped_tokens_312204, 'append')
        # Calling append(args, kwargs) (line 1076)
        append_call_result_312211 = invoke(stypy.reporting.localization.Localization(__file__, 1076, 12), append_312205, *[subscript_call_result_312209], **kwargs_312210)
        
        # SSA join for if statement (line 1071)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 1077):
        
        # Assigning a Name to a Name (line 1077):
        # Getting the type of 'i' (line 1077)
        i_312212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 31), 'i')
        # Assigning a type to the variable 'last_skipped_token_i' (line 1077)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1077, 8), 'last_skipped_token_i', i_312212)
        # Getting the type of 'last_skipped_token_i' (line 1078)
        last_skipped_token_i_312213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 15), 'last_skipped_token_i')
        # Assigning a type to the variable 'stypy_return_type' (line 1078)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1078, 8), 'stypy_return_type', last_skipped_token_i_312213)
        
        # ################# End of '_skip_token(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_skip_token' in the type store
        # Getting the type of 'stypy_return_type' (line 1069)
        stypy_return_type_312214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_312214)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_skip_token'
        return stypy_return_type_312214


# Assigning a type to the variable 'parser' (line 485)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 485, 0), 'parser', parser)

# Assigning a Call to a Name (line 1081):

# Assigning a Call to a Name (line 1081):

# Call to parser(...): (line 1081)
# Processing the call keyword arguments (line 1081)
kwargs_312216 = {}
# Getting the type of 'parser' (line 1081)
parser_312215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 16), 'parser', False)
# Calling parser(args, kwargs) (line 1081)
parser_call_result_312217 = invoke(stypy.reporting.localization.Localization(__file__, 1081, 16), parser_312215, *[], **kwargs_312216)

# Assigning a type to the variable 'DEFAULTPARSER' (line 1081)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1081, 0), 'DEFAULTPARSER', parser_call_result_312217)

@norecursion
def parse(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1084)
    None_312218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 30), 'None')
    defaults = [None_312218]
    # Create a new context for function 'parse'
    module_type_store = module_type_store.open_function_context('parse', 1084, 0, False)
    
    # Passed parameters checking function
    parse.stypy_localization = localization
    parse.stypy_type_of_self = None
    parse.stypy_type_store = module_type_store
    parse.stypy_function_name = 'parse'
    parse.stypy_param_names_list = ['timestr', 'parserinfo']
    parse.stypy_varargs_param_name = None
    parse.stypy_kwargs_param_name = 'kwargs'
    parse.stypy_call_defaults = defaults
    parse.stypy_call_varargs = varargs
    parse.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'parse', ['timestr', 'parserinfo'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'parse', localization, ['timestr', 'parserinfo'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'parse(...)' code ##################

    unicode_312219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1178, (-1)), 'unicode', u'\n\n    Parse a string in one of the supported formats, using the\n    ``parserinfo`` parameters.\n\n    :param timestr:\n        A string containing a date/time stamp.\n\n    :param parserinfo:\n        A :class:`parserinfo` object containing parameters for the parser.\n        If ``None``, the default arguments to the :class:`parserinfo`\n        constructor are used.\n\n    The ``**kwargs`` parameter takes the following keyword arguments:\n\n    :param default:\n        The default datetime object, if this is a datetime object and not\n        ``None``, elements specified in ``timestr`` replace elements in the\n        default object.\n\n    :param ignoretz:\n        If set ``True``, time zones in parsed strings are ignored and a naive\n        :class:`datetime` object is returned.\n\n    :param tzinfos:\n            Additional time zone names / aliases which may be present in the\n            string. This argument maps time zone names (and optionally offsets\n            from those time zones) to time zones. This parameter can be a\n            dictionary with timezone aliases mapping time zone names to time\n            zones or a function taking two parameters (``tzname`` and\n            ``tzoffset``) and returning a time zone.\n\n            The timezones to which the names are mapped can be an integer\n            offset from UTC in minutes or a :class:`tzinfo` object.\n\n            .. doctest::\n               :options: +NORMALIZE_WHITESPACE\n\n                >>> from dateutil.parser import parse\n                >>> from dateutil.tz import gettz\n                >>> tzinfos = {"BRST": -10800, "CST": gettz("America/Chicago")}\n                >>> parse("2012-01-19 17:21:00 BRST", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u\'BRST\', -10800))\n                >>> parse("2012-01-19 17:21:00 CST", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21,\n                                  tzinfo=tzfile(\'/usr/share/zoneinfo/America/Chicago\'))\n\n            This parameter is ignored if ``ignoretz`` is set.\n\n    :param dayfirst:\n        Whether to interpret the first value in an ambiguous 3-integer date\n        (e.g. 01/05/09) as the day (``True``) or month (``False``). If\n        ``yearfirst`` is set to ``True``, this distinguishes between YDM and\n        YMD. If set to ``None``, this value is retrieved from the current\n        :class:`parserinfo` object (which itself defaults to ``False``).\n\n    :param yearfirst:\n        Whether to interpret the first value in an ambiguous 3-integer date\n        (e.g. 01/05/09) as the year. If ``True``, the first number is taken to\n        be the year, otherwise the last number is taken to be the year. If\n        this is set to ``None``, the value is retrieved from the current\n        :class:`parserinfo` object (which itself defaults to ``False``).\n\n    :param fuzzy:\n        Whether to allow fuzzy parsing, allowing for string like "Today is\n        January 1, 2047 at 8:21:00AM".\n\n    :param fuzzy_with_tokens:\n        If ``True``, ``fuzzy`` is automatically set to True, and the parser\n        will return a tuple where the first element is the parsed\n        :class:`datetime.datetime` datetimestamp and the second element is\n        a tuple containing the portions of the string which were ignored:\n\n        .. doctest::\n\n            >>> from dateutil.parser import parse\n            >>> parse("Today is January 1, 2047 at 8:21:00AM", fuzzy_with_tokens=True)\n            (datetime.datetime(2047, 1, 1, 8, 21), (u\'Today is \', u\' \', u\'at \'))\n\n    :return:\n        Returns a :class:`datetime.datetime` object or, if the\n        ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n        first element being a :class:`datetime.datetime` object, the second\n        a tuple containing the fuzzy tokens.\n\n    :raises ValueError:\n        Raised for invalid or unknown string format, if the provided\n        :class:`tzinfo` is not in a valid format, or if an invalid date\n        would be created.\n\n    :raises OverflowError:\n        Raised if the parsed date exceeds the largest valid C integer on\n        your system.\n    ')
    
    # Getting the type of 'parserinfo' (line 1179)
    parserinfo_312220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 7), 'parserinfo')
    # Testing the type of an if condition (line 1179)
    if_condition_312221 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1179, 4), parserinfo_312220)
    # Assigning a type to the variable 'if_condition_312221' (line 1179)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1179, 4), 'if_condition_312221', if_condition_312221)
    # SSA begins for if statement (line 1179)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to parse(...): (line 1180)
    # Processing the call arguments (line 1180)
    # Getting the type of 'timestr' (line 1180)
    timestr_312227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 40), 'timestr', False)
    # Processing the call keyword arguments (line 1180)
    # Getting the type of 'kwargs' (line 1180)
    kwargs_312228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 51), 'kwargs', False)
    kwargs_312229 = {'kwargs_312228': kwargs_312228}
    
    # Call to parser(...): (line 1180)
    # Processing the call arguments (line 1180)
    # Getting the type of 'parserinfo' (line 1180)
    parserinfo_312223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 22), 'parserinfo', False)
    # Processing the call keyword arguments (line 1180)
    kwargs_312224 = {}
    # Getting the type of 'parser' (line 1180)
    parser_312222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 15), 'parser', False)
    # Calling parser(args, kwargs) (line 1180)
    parser_call_result_312225 = invoke(stypy.reporting.localization.Localization(__file__, 1180, 15), parser_312222, *[parserinfo_312223], **kwargs_312224)
    
    # Obtaining the member 'parse' of a type (line 1180)
    parse_312226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1180, 15), parser_call_result_312225, 'parse')
    # Calling parse(args, kwargs) (line 1180)
    parse_call_result_312230 = invoke(stypy.reporting.localization.Localization(__file__, 1180, 15), parse_312226, *[timestr_312227], **kwargs_312229)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1180)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1180, 8), 'stypy_return_type', parse_call_result_312230)
    # SSA branch for the else part of an if statement (line 1179)
    module_type_store.open_ssa_branch('else')
    
    # Call to parse(...): (line 1182)
    # Processing the call arguments (line 1182)
    # Getting the type of 'timestr' (line 1182)
    timestr_312233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 35), 'timestr', False)
    # Processing the call keyword arguments (line 1182)
    # Getting the type of 'kwargs' (line 1182)
    kwargs_312234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 46), 'kwargs', False)
    kwargs_312235 = {'kwargs_312234': kwargs_312234}
    # Getting the type of 'DEFAULTPARSER' (line 1182)
    DEFAULTPARSER_312231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 15), 'DEFAULTPARSER', False)
    # Obtaining the member 'parse' of a type (line 1182)
    parse_312232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1182, 15), DEFAULTPARSER_312231, 'parse')
    # Calling parse(args, kwargs) (line 1182)
    parse_call_result_312236 = invoke(stypy.reporting.localization.Localization(__file__, 1182, 15), parse_312232, *[timestr_312233], **kwargs_312235)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1182)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 8), 'stypy_return_type', parse_call_result_312236)
    # SSA join for if statement (line 1179)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'parse(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'parse' in the type store
    # Getting the type of 'stypy_return_type' (line 1084)
    stypy_return_type_312237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_312237)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'parse'
    return stypy_return_type_312237

# Assigning a type to the variable 'parse' (line 1084)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1084, 0), 'parse', parse)
# Declaration of the '_tzparser' class

class _tzparser(object, ):
    # Declaration of the '_result' class
    # Getting the type of '_resultbase' (line 1187)
    _resultbase_312238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 18), '_resultbase')

    class _result(_resultbase_312238, ):
        
        # Assigning a List to a Name (line 1189):
        
        # Assigning a List to a Name (line 1189):
        
        # Obtaining an instance of the builtin type 'list' (line 1189)
        list_312239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1189, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1189)
        # Adding element type (line 1189)
        unicode_312240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1189, 21), 'unicode', u'stdabbr')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 20), list_312239, unicode_312240)
        # Adding element type (line 1189)
        unicode_312241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1189, 32), 'unicode', u'stdoffset')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 20), list_312239, unicode_312241)
        # Adding element type (line 1189)
        unicode_312242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1189, 45), 'unicode', u'dstabbr')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 20), list_312239, unicode_312242)
        # Adding element type (line 1189)
        unicode_312243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1189, 56), 'unicode', u'dstoffset')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 20), list_312239, unicode_312243)
        # Adding element type (line 1189)
        unicode_312244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1190, 21), 'unicode', u'start')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 20), list_312239, unicode_312244)
        # Adding element type (line 1189)
        unicode_312245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1190, 30), 'unicode', u'end')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 20), list_312239, unicode_312245)
        
        # Assigning a type to the variable '__slots__' (line 1189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1189, 8), '__slots__', list_312239)
        # Declaration of the '_attr' class
        # Getting the type of '_resultbase' (line 1192)
        _resultbase_312246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 20), '_resultbase')

        class _attr(_resultbase_312246, ):
            
            # Assigning a List to a Name (line 1193):
            
            # Assigning a List to a Name (line 1193):
            
            # Obtaining an instance of the builtin type 'list' (line 1193)
            list_312247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1193, 24), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1193)
            # Adding element type (line 1193)
            unicode_312248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1193, 25), 'unicode', u'month')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1193, 24), list_312247, unicode_312248)
            # Adding element type (line 1193)
            unicode_312249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1193, 34), 'unicode', u'week')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1193, 24), list_312247, unicode_312249)
            # Adding element type (line 1193)
            unicode_312250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1193, 42), 'unicode', u'weekday')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1193, 24), list_312247, unicode_312250)
            # Adding element type (line 1193)
            unicode_312251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1194, 25), 'unicode', u'yday')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1193, 24), list_312247, unicode_312251)
            # Adding element type (line 1193)
            unicode_312252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1194, 33), 'unicode', u'jyday')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1193, 24), list_312247, unicode_312252)
            # Adding element type (line 1193)
            unicode_312253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1194, 42), 'unicode', u'day')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1193, 24), list_312247, unicode_312253)
            # Adding element type (line 1193)
            unicode_312254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1194, 49), 'unicode', u'time')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1193, 24), list_312247, unicode_312254)
            
            # Assigning a type to the variable '__slots__' (line 1193)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1193, 12), '__slots__', list_312247)
        
        # Assigning a type to the variable '_attr' (line 1192)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1192, 8), '_attr', _attr)

        @norecursion
        def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '__repr__'
            module_type_store = module_type_store.open_function_context('__repr__', 1196, 8, False)
            # Assigning a type to the variable 'self' (line 1197)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1197, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            _result.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
            _result.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            _result.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
            _result.stypy__repr__.__dict__.__setitem__('stypy_function_name', '_result.stypy__repr__')
            _result.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
            _result.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
            _result.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
            _result.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
            _result.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
            _result.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            _result.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_result.stypy__repr__', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '__repr__', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__repr__(...)' code ##################

            
            # Call to _repr(...): (line 1197)
            # Processing the call arguments (line 1197)
            unicode_312257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1197, 30), 'unicode', u'')
            # Processing the call keyword arguments (line 1197)
            kwargs_312258 = {}
            # Getting the type of 'self' (line 1197)
            self_312255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 19), 'self', False)
            # Obtaining the member '_repr' of a type (line 1197)
            _repr_312256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1197, 19), self_312255, '_repr')
            # Calling _repr(args, kwargs) (line 1197)
            _repr_call_result_312259 = invoke(stypy.reporting.localization.Localization(__file__, 1197, 19), _repr_312256, *[unicode_312257], **kwargs_312258)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1197)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1197, 12), 'stypy_return_type', _repr_call_result_312259)
            
            # ################# End of '__repr__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '__repr__' in the type store
            # Getting the type of 'stypy_return_type' (line 1196)
            stypy_return_type_312260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_312260)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '__repr__'
            return stypy_return_type_312260


        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 1199, 8, False)
            # Assigning a type to the variable 'self' (line 1200)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1200, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_result.__init__', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            
            # Call to __init__(...): (line 1200)
            # Processing the call arguments (line 1200)
            # Getting the type of 'self' (line 1200)
            self_312263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 33), 'self', False)
            # Processing the call keyword arguments (line 1200)
            kwargs_312264 = {}
            # Getting the type of '_resultbase' (line 1200)
            _resultbase_312261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 12), '_resultbase', False)
            # Obtaining the member '__init__' of a type (line 1200)
            init___312262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1200, 12), _resultbase_312261, '__init__')
            # Calling __init__(args, kwargs) (line 1200)
            init___call_result_312265 = invoke(stypy.reporting.localization.Localization(__file__, 1200, 12), init___312262, *[self_312263], **kwargs_312264)
            
            
            # Assigning a Call to a Attribute (line 1201):
            
            # Assigning a Call to a Attribute (line 1201):
            
            # Call to _attr(...): (line 1201)
            # Processing the call keyword arguments (line 1201)
            kwargs_312268 = {}
            # Getting the type of 'self' (line 1201)
            self_312266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 25), 'self', False)
            # Obtaining the member '_attr' of a type (line 1201)
            _attr_312267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1201, 25), self_312266, '_attr')
            # Calling _attr(args, kwargs) (line 1201)
            _attr_call_result_312269 = invoke(stypy.reporting.localization.Localization(__file__, 1201, 25), _attr_312267, *[], **kwargs_312268)
            
            # Getting the type of 'self' (line 1201)
            self_312270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 12), 'self')
            # Setting the type of the member 'start' of a type (line 1201)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1201, 12), self_312270, 'start', _attr_call_result_312269)
            
            # Assigning a Call to a Attribute (line 1202):
            
            # Assigning a Call to a Attribute (line 1202):
            
            # Call to _attr(...): (line 1202)
            # Processing the call keyword arguments (line 1202)
            kwargs_312273 = {}
            # Getting the type of 'self' (line 1202)
            self_312271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 23), 'self', False)
            # Obtaining the member '_attr' of a type (line 1202)
            _attr_312272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 23), self_312271, '_attr')
            # Calling _attr(args, kwargs) (line 1202)
            _attr_call_result_312274 = invoke(stypy.reporting.localization.Localization(__file__, 1202, 23), _attr_312272, *[], **kwargs_312273)
            
            # Getting the type of 'self' (line 1202)
            self_312275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 12), 'self')
            # Setting the type of the member 'end' of a type (line 1202)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 12), self_312275, 'end', _attr_call_result_312274)
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()

    
    # Assigning a type to the variable '_result' (line 1187)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1187, 4), '_result', _result)

    @norecursion
    def parse(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'parse'
        module_type_store = module_type_store.open_function_context('parse', 1204, 4, False)
        # Assigning a type to the variable 'self' (line 1205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1205, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _tzparser.parse.__dict__.__setitem__('stypy_localization', localization)
        _tzparser.parse.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _tzparser.parse.__dict__.__setitem__('stypy_type_store', module_type_store)
        _tzparser.parse.__dict__.__setitem__('stypy_function_name', '_tzparser.parse')
        _tzparser.parse.__dict__.__setitem__('stypy_param_names_list', ['tzstr'])
        _tzparser.parse.__dict__.__setitem__('stypy_varargs_param_name', None)
        _tzparser.parse.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _tzparser.parse.__dict__.__setitem__('stypy_call_defaults', defaults)
        _tzparser.parse.__dict__.__setitem__('stypy_call_varargs', varargs)
        _tzparser.parse.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _tzparser.parse.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_tzparser.parse', ['tzstr'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'parse', localization, ['tzstr'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'parse(...)' code ##################

        
        # Assigning a Call to a Name (line 1205):
        
        # Assigning a Call to a Name (line 1205):
        
        # Call to _result(...): (line 1205)
        # Processing the call keyword arguments (line 1205)
        kwargs_312278 = {}
        # Getting the type of 'self' (line 1205)
        self_312276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 14), 'self', False)
        # Obtaining the member '_result' of a type (line 1205)
        _result_312277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1205, 14), self_312276, '_result')
        # Calling _result(args, kwargs) (line 1205)
        _result_call_result_312279 = invoke(stypy.reporting.localization.Localization(__file__, 1205, 14), _result_312277, *[], **kwargs_312278)
        
        # Assigning a type to the variable 'res' (line 1205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1205, 8), 'res', _result_call_result_312279)
        
        # Assigning a Call to a Name (line 1206):
        
        # Assigning a Call to a Name (line 1206):
        
        # Call to split(...): (line 1206)
        # Processing the call arguments (line 1206)
        # Getting the type of 'tzstr' (line 1206)
        tzstr_312282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 27), 'tzstr', False)
        # Processing the call keyword arguments (line 1206)
        kwargs_312283 = {}
        # Getting the type of '_timelex' (line 1206)
        _timelex_312280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 12), '_timelex', False)
        # Obtaining the member 'split' of a type (line 1206)
        split_312281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1206, 12), _timelex_312280, 'split')
        # Calling split(args, kwargs) (line 1206)
        split_call_result_312284 = invoke(stypy.reporting.localization.Localization(__file__, 1206, 12), split_312281, *[tzstr_312282], **kwargs_312283)
        
        # Assigning a type to the variable 'l' (line 1206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1206, 8), 'l', split_call_result_312284)
        
        
        # SSA begins for try-except statement (line 1207)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1209):
        
        # Assigning a Call to a Name (line 1209):
        
        # Call to len(...): (line 1209)
        # Processing the call arguments (line 1209)
        # Getting the type of 'l' (line 1209)
        l_312286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 24), 'l', False)
        # Processing the call keyword arguments (line 1209)
        kwargs_312287 = {}
        # Getting the type of 'len' (line 1209)
        len_312285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 20), 'len', False)
        # Calling len(args, kwargs) (line 1209)
        len_call_result_312288 = invoke(stypy.reporting.localization.Localization(__file__, 1209, 20), len_312285, *[l_312286], **kwargs_312287)
        
        # Assigning a type to the variable 'len_l' (line 1209)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1209, 12), 'len_l', len_call_result_312288)
        
        # Assigning a Num to a Name (line 1211):
        
        # Assigning a Num to a Name (line 1211):
        int_312289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1211, 16), 'int')
        # Assigning a type to the variable 'i' (line 1211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1211, 12), 'i', int_312289)
        
        
        # Getting the type of 'i' (line 1212)
        i_312290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 18), 'i')
        # Getting the type of 'len_l' (line 1212)
        len_l_312291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 22), 'len_l')
        # Applying the binary operator '<' (line 1212)
        result_lt_312292 = python_operator(stypy.reporting.localization.Localization(__file__, 1212, 18), '<', i_312290, len_l_312291)
        
        # Testing the type of an if condition (line 1212)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1212, 12), result_lt_312292)
        # SSA begins for while statement (line 1212)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Assigning a Name to a Name (line 1214):
        
        # Assigning a Name to a Name (line 1214):
        # Getting the type of 'i' (line 1214)
        i_312293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 20), 'i')
        # Assigning a type to the variable 'j' (line 1214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 16), 'j', i_312293)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'j' (line 1215)
        j_312294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 22), 'j')
        # Getting the type of 'len_l' (line 1215)
        len_l_312295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 26), 'len_l')
        # Applying the binary operator '<' (line 1215)
        result_lt_312296 = python_operator(stypy.reporting.localization.Localization(__file__, 1215, 22), '<', j_312294, len_l_312295)
        
        
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Obtaining the type of the subscript
        # Getting the type of 'j' (line 1215)
        j_312301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 54), 'j')
        # Getting the type of 'l' (line 1215)
        l_312302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 52), 'l')
        # Obtaining the member '__getitem__' of a type (line 1215)
        getitem___312303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1215, 52), l_312302, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1215)
        subscript_call_result_312304 = invoke(stypy.reporting.localization.Localization(__file__, 1215, 52), getitem___312303, j_312301)
        
        comprehension_312305 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1215, 41), subscript_call_result_312304)
        # Assigning a type to the variable 'x' (line 1215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1215, 41), 'x', comprehension_312305)
        
        # Getting the type of 'x' (line 1216)
        x_312298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 44), 'x')
        unicode_312299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1216, 49), 'unicode', u'0123456789:,-+')
        # Applying the binary operator 'in' (line 1216)
        result_contains_312300 = python_operator(stypy.reporting.localization.Localization(__file__, 1216, 44), 'in', x_312298, unicode_312299)
        
        # Getting the type of 'x' (line 1215)
        x_312297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 41), 'x')
        list_312306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1215, 41), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1215, 41), list_312306, x_312297)
        # Applying the 'not' unary operator (line 1215)
        result_not__312307 = python_operator(stypy.reporting.localization.Localization(__file__, 1215, 36), 'not', list_312306)
        
        # Applying the binary operator 'and' (line 1215)
        result_and_keyword_312308 = python_operator(stypy.reporting.localization.Localization(__file__, 1215, 22), 'and', result_lt_312296, result_not__312307)
        
        # Testing the type of an if condition (line 1215)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1215, 16), result_and_keyword_312308)
        # SSA begins for while statement (line 1215)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Getting the type of 'j' (line 1217)
        j_312309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 20), 'j')
        int_312310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1217, 25), 'int')
        # Applying the binary operator '+=' (line 1217)
        result_iadd_312311 = python_operator(stypy.reporting.localization.Localization(__file__, 1217, 20), '+=', j_312309, int_312310)
        # Assigning a type to the variable 'j' (line 1217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1217, 20), 'j', result_iadd_312311)
        
        # SSA join for while statement (line 1215)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'j' (line 1218)
        j_312312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 19), 'j')
        # Getting the type of 'i' (line 1218)
        i_312313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 24), 'i')
        # Applying the binary operator '!=' (line 1218)
        result_ne_312314 = python_operator(stypy.reporting.localization.Localization(__file__, 1218, 19), '!=', j_312312, i_312313)
        
        # Testing the type of an if condition (line 1218)
        if_condition_312315 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1218, 16), result_ne_312314)
        # Assigning a type to the variable 'if_condition_312315' (line 1218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1218, 16), 'if_condition_312315', if_condition_312315)
        # SSA begins for if statement (line 1218)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'res' (line 1219)
        res_312316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1219, 27), 'res')
        # Obtaining the member 'stdabbr' of a type (line 1219)
        stdabbr_312317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1219, 27), res_312316, 'stdabbr')
        # Applying the 'not' unary operator (line 1219)
        result_not__312318 = python_operator(stypy.reporting.localization.Localization(__file__, 1219, 23), 'not', stdabbr_312317)
        
        # Testing the type of an if condition (line 1219)
        if_condition_312319 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1219, 20), result_not__312318)
        # Assigning a type to the variable 'if_condition_312319' (line 1219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1219, 20), 'if_condition_312319', if_condition_312319)
        # SSA begins for if statement (line 1219)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1220):
        
        # Assigning a Str to a Name (line 1220):
        unicode_312320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1220, 34), 'unicode', u'stdoffset')
        # Assigning a type to the variable 'offattr' (line 1220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1220, 24), 'offattr', unicode_312320)
        
        # Assigning a Call to a Attribute (line 1221):
        
        # Assigning a Call to a Attribute (line 1221):
        
        # Call to join(...): (line 1221)
        # Processing the call arguments (line 1221)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1221)
        i_312323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 48), 'i', False)
        # Getting the type of 'j' (line 1221)
        j_312324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 50), 'j', False)
        slice_312325 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1221, 46), i_312323, j_312324, None)
        # Getting the type of 'l' (line 1221)
        l_312326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 46), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1221)
        getitem___312327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1221, 46), l_312326, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1221)
        subscript_call_result_312328 = invoke(stypy.reporting.localization.Localization(__file__, 1221, 46), getitem___312327, slice_312325)
        
        # Processing the call keyword arguments (line 1221)
        kwargs_312329 = {}
        unicode_312321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1221, 38), 'unicode', u'')
        # Obtaining the member 'join' of a type (line 1221)
        join_312322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1221, 38), unicode_312321, 'join')
        # Calling join(args, kwargs) (line 1221)
        join_call_result_312330 = invoke(stypy.reporting.localization.Localization(__file__, 1221, 38), join_312322, *[subscript_call_result_312328], **kwargs_312329)
        
        # Getting the type of 'res' (line 1221)
        res_312331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 24), 'res')
        # Setting the type of the member 'stdabbr' of a type (line 1221)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1221, 24), res_312331, 'stdabbr', join_call_result_312330)
        # SSA branch for the else part of an if statement (line 1219)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Name (line 1223):
        
        # Assigning a Str to a Name (line 1223):
        unicode_312332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1223, 34), 'unicode', u'dstoffset')
        # Assigning a type to the variable 'offattr' (line 1223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1223, 24), 'offattr', unicode_312332)
        
        # Assigning a Call to a Attribute (line 1224):
        
        # Assigning a Call to a Attribute (line 1224):
        
        # Call to join(...): (line 1224)
        # Processing the call arguments (line 1224)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1224)
        i_312335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 48), 'i', False)
        # Getting the type of 'j' (line 1224)
        j_312336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 50), 'j', False)
        slice_312337 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1224, 46), i_312335, j_312336, None)
        # Getting the type of 'l' (line 1224)
        l_312338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 46), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1224)
        getitem___312339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 46), l_312338, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1224)
        subscript_call_result_312340 = invoke(stypy.reporting.localization.Localization(__file__, 1224, 46), getitem___312339, slice_312337)
        
        # Processing the call keyword arguments (line 1224)
        kwargs_312341 = {}
        unicode_312333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1224, 38), 'unicode', u'')
        # Obtaining the member 'join' of a type (line 1224)
        join_312334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 38), unicode_312333, 'join')
        # Calling join(args, kwargs) (line 1224)
        join_call_result_312342 = invoke(stypy.reporting.localization.Localization(__file__, 1224, 38), join_312334, *[subscript_call_result_312340], **kwargs_312341)
        
        # Getting the type of 'res' (line 1224)
        res_312343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 24), 'res')
        # Setting the type of the member 'dstabbr' of a type (line 1224)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 24), res_312343, 'dstabbr', join_call_result_312342)
        # SSA join for if statement (line 1219)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 1225):
        
        # Assigning a Name to a Name (line 1225):
        # Getting the type of 'j' (line 1225)
        j_312344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 24), 'j')
        # Assigning a type to the variable 'i' (line 1225)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1225, 20), 'i', j_312344)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'i' (line 1226)
        i_312345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 24), 'i')
        # Getting the type of 'len_l' (line 1226)
        len_l_312346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 28), 'len_l')
        # Applying the binary operator '<' (line 1226)
        result_lt_312347 = python_operator(stypy.reporting.localization.Localization(__file__, 1226, 24), '<', i_312345, len_l_312346)
        
        
        # Evaluating a boolean operation
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1226)
        i_312348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 41), 'i')
        # Getting the type of 'l' (line 1226)
        l_312349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 39), 'l')
        # Obtaining the member '__getitem__' of a type (line 1226)
        getitem___312350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1226, 39), l_312349, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1226)
        subscript_call_result_312351 = invoke(stypy.reporting.localization.Localization(__file__, 1226, 39), getitem___312350, i_312348)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1226)
        tuple_312352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1226, 48), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1226)
        # Adding element type (line 1226)
        unicode_312353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1226, 48), 'unicode', u'+')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1226, 48), tuple_312352, unicode_312353)
        # Adding element type (line 1226)
        unicode_312354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1226, 53), 'unicode', u'-')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1226, 48), tuple_312352, unicode_312354)
        
        # Applying the binary operator 'in' (line 1226)
        result_contains_312355 = python_operator(stypy.reporting.localization.Localization(__file__, 1226, 39), 'in', subscript_call_result_312351, tuple_312352)
        
        
        
        # Obtaining the type of the subscript
        int_312356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1226, 66), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1226)
        i_312357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 63), 'i')
        # Getting the type of 'l' (line 1226)
        l_312358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 61), 'l')
        # Obtaining the member '__getitem__' of a type (line 1226)
        getitem___312359 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1226, 61), l_312358, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1226)
        subscript_call_result_312360 = invoke(stypy.reporting.localization.Localization(__file__, 1226, 61), getitem___312359, i_312357)
        
        # Obtaining the member '__getitem__' of a type (line 1226)
        getitem___312361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1226, 61), subscript_call_result_312360, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1226)
        subscript_call_result_312362 = invoke(stypy.reporting.localization.Localization(__file__, 1226, 61), getitem___312361, int_312356)
        
        unicode_312363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1227, 39), 'unicode', u'0123456789')
        # Applying the binary operator 'in' (line 1226)
        result_contains_312364 = python_operator(stypy.reporting.localization.Localization(__file__, 1226, 61), 'in', subscript_call_result_312362, unicode_312363)
        
        # Applying the binary operator 'or' (line 1226)
        result_or_keyword_312365 = python_operator(stypy.reporting.localization.Localization(__file__, 1226, 39), 'or', result_contains_312355, result_contains_312364)
        
        # Applying the binary operator 'and' (line 1226)
        result_and_keyword_312366 = python_operator(stypy.reporting.localization.Localization(__file__, 1226, 24), 'and', result_lt_312347, result_or_keyword_312365)
        
        # Testing the type of an if condition (line 1226)
        if_condition_312367 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1226, 20), result_and_keyword_312366)
        # Assigning a type to the variable 'if_condition_312367' (line 1226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1226, 20), 'if_condition_312367', if_condition_312367)
        # SSA begins for if statement (line 1226)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1228)
        i_312368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 29), 'i')
        # Getting the type of 'l' (line 1228)
        l_312369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 27), 'l')
        # Obtaining the member '__getitem__' of a type (line 1228)
        getitem___312370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1228, 27), l_312369, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1228)
        subscript_call_result_312371 = invoke(stypy.reporting.localization.Localization(__file__, 1228, 27), getitem___312370, i_312368)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1228)
        tuple_312372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1228, 36), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1228)
        # Adding element type (line 1228)
        unicode_312373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1228, 36), 'unicode', u'+')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1228, 36), tuple_312372, unicode_312373)
        # Adding element type (line 1228)
        unicode_312374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1228, 41), 'unicode', u'-')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1228, 36), tuple_312372, unicode_312374)
        
        # Applying the binary operator 'in' (line 1228)
        result_contains_312375 = python_operator(stypy.reporting.localization.Localization(__file__, 1228, 27), 'in', subscript_call_result_312371, tuple_312372)
        
        # Testing the type of an if condition (line 1228)
        if_condition_312376 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1228, 24), result_contains_312375)
        # Assigning a type to the variable 'if_condition_312376' (line 1228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1228, 24), 'if_condition_312376', if_condition_312376)
        # SSA begins for if statement (line 1228)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1231):
        
        # Assigning a Subscript to a Name (line 1231):
        
        # Obtaining the type of the subscript
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1231)
        i_312377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 47), 'i')
        # Getting the type of 'l' (line 1231)
        l_312378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 45), 'l')
        # Obtaining the member '__getitem__' of a type (line 1231)
        getitem___312379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1231, 45), l_312378, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1231)
        subscript_call_result_312380 = invoke(stypy.reporting.localization.Localization(__file__, 1231, 45), getitem___312379, i_312377)
        
        unicode_312381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1231, 53), 'unicode', u'+')
        # Applying the binary operator '==' (line 1231)
        result_eq_312382 = python_operator(stypy.reporting.localization.Localization(__file__, 1231, 45), '==', subscript_call_result_312380, unicode_312381)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1231)
        tuple_312383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1231, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1231)
        # Adding element type (line 1231)
        int_312384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1231, 38), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1231, 38), tuple_312383, int_312384)
        # Adding element type (line 1231)
        int_312385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1231, 41), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1231, 38), tuple_312383, int_312385)
        
        # Obtaining the member '__getitem__' of a type (line 1231)
        getitem___312386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1231, 38), tuple_312383, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1231)
        subscript_call_result_312387 = invoke(stypy.reporting.localization.Localization(__file__, 1231, 38), getitem___312386, result_eq_312382)
        
        # Assigning a type to the variable 'signal' (line 1231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1231, 28), 'signal', subscript_call_result_312387)
        
        # Getting the type of 'i' (line 1232)
        i_312388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 28), 'i')
        int_312389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1232, 33), 'int')
        # Applying the binary operator '+=' (line 1232)
        result_iadd_312390 = python_operator(stypy.reporting.localization.Localization(__file__, 1232, 28), '+=', i_312388, int_312389)
        # Assigning a type to the variable 'i' (line 1232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1232, 28), 'i', result_iadd_312390)
        
        # SSA branch for the else part of an if statement (line 1228)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Name (line 1234):
        
        # Assigning a Num to a Name (line 1234):
        int_312391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1234, 37), 'int')
        # Assigning a type to the variable 'signal' (line 1234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1234, 28), 'signal', int_312391)
        # SSA join for if statement (line 1228)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1235):
        
        # Assigning a Call to a Name (line 1235):
        
        # Call to len(...): (line 1235)
        # Processing the call arguments (line 1235)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1235)
        i_312393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 39), 'i', False)
        # Getting the type of 'l' (line 1235)
        l_312394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 37), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1235)
        getitem___312395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1235, 37), l_312394, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1235)
        subscript_call_result_312396 = invoke(stypy.reporting.localization.Localization(__file__, 1235, 37), getitem___312395, i_312393)
        
        # Processing the call keyword arguments (line 1235)
        kwargs_312397 = {}
        # Getting the type of 'len' (line 1235)
        len_312392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 33), 'len', False)
        # Calling len(args, kwargs) (line 1235)
        len_call_result_312398 = invoke(stypy.reporting.localization.Localization(__file__, 1235, 33), len_312392, *[subscript_call_result_312396], **kwargs_312397)
        
        # Assigning a type to the variable 'len_li' (line 1235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1235, 24), 'len_li', len_call_result_312398)
        
        
        # Getting the type of 'len_li' (line 1236)
        len_li_312399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 27), 'len_li')
        int_312400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1236, 37), 'int')
        # Applying the binary operator '==' (line 1236)
        result_eq_312401 = python_operator(stypy.reporting.localization.Localization(__file__, 1236, 27), '==', len_li_312399, int_312400)
        
        # Testing the type of an if condition (line 1236)
        if_condition_312402 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1236, 24), result_eq_312401)
        # Assigning a type to the variable 'if_condition_312402' (line 1236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1236, 24), 'if_condition_312402', if_condition_312402)
        # SSA begins for if statement (line 1236)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to setattr(...): (line 1238)
        # Processing the call arguments (line 1238)
        # Getting the type of 'res' (line 1238)
        res_312404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 36), 'res', False)
        # Getting the type of 'offattr' (line 1238)
        offattr_312405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 41), 'offattr', False)
        
        # Call to int(...): (line 1238)
        # Processing the call arguments (line 1238)
        
        # Obtaining the type of the subscript
        int_312407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, 61), 'int')
        slice_312408 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1238, 55), None, int_312407, None)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1238)
        i_312409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 57), 'i', False)
        # Getting the type of 'l' (line 1238)
        l_312410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 55), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1238)
        getitem___312411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 55), l_312410, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1238)
        subscript_call_result_312412 = invoke(stypy.reporting.localization.Localization(__file__, 1238, 55), getitem___312411, i_312409)
        
        # Obtaining the member '__getitem__' of a type (line 1238)
        getitem___312413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 55), subscript_call_result_312412, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1238)
        subscript_call_result_312414 = invoke(stypy.reporting.localization.Localization(__file__, 1238, 55), getitem___312413, slice_312408)
        
        # Processing the call keyword arguments (line 1238)
        kwargs_312415 = {}
        # Getting the type of 'int' (line 1238)
        int_312406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 51), 'int', False)
        # Calling int(args, kwargs) (line 1238)
        int_call_result_312416 = invoke(stypy.reporting.localization.Localization(__file__, 1238, 51), int_312406, *[subscript_call_result_312414], **kwargs_312415)
        
        int_312417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, 65), 'int')
        # Applying the binary operator '*' (line 1238)
        result_mul_312418 = python_operator(stypy.reporting.localization.Localization(__file__, 1238, 51), '*', int_call_result_312416, int_312417)
        
        
        # Call to int(...): (line 1239)
        # Processing the call arguments (line 1239)
        
        # Obtaining the type of the subscript
        int_312420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1239, 60), 'int')
        slice_312421 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1239, 55), int_312420, None, None)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1239)
        i_312422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 57), 'i', False)
        # Getting the type of 'l' (line 1239)
        l_312423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 55), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1239)
        getitem___312424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1239, 55), l_312423, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1239)
        subscript_call_result_312425 = invoke(stypy.reporting.localization.Localization(__file__, 1239, 55), getitem___312424, i_312422)
        
        # Obtaining the member '__getitem__' of a type (line 1239)
        getitem___312426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1239, 55), subscript_call_result_312425, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1239)
        subscript_call_result_312427 = invoke(stypy.reporting.localization.Localization(__file__, 1239, 55), getitem___312426, slice_312421)
        
        # Processing the call keyword arguments (line 1239)
        kwargs_312428 = {}
        # Getting the type of 'int' (line 1239)
        int_312419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 51), 'int', False)
        # Calling int(args, kwargs) (line 1239)
        int_call_result_312429 = invoke(stypy.reporting.localization.Localization(__file__, 1239, 51), int_312419, *[subscript_call_result_312427], **kwargs_312428)
        
        int_312430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1239, 65), 'int')
        # Applying the binary operator '*' (line 1239)
        result_mul_312431 = python_operator(stypy.reporting.localization.Localization(__file__, 1239, 51), '*', int_call_result_312429, int_312430)
        
        # Applying the binary operator '+' (line 1238)
        result_add_312432 = python_operator(stypy.reporting.localization.Localization(__file__, 1238, 51), '+', result_mul_312418, result_mul_312431)
        
        # Getting the type of 'signal' (line 1239)
        signal_312433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 69), 'signal', False)
        # Applying the binary operator '*' (line 1238)
        result_mul_312434 = python_operator(stypy.reporting.localization.Localization(__file__, 1238, 50), '*', result_add_312432, signal_312433)
        
        # Processing the call keyword arguments (line 1238)
        kwargs_312435 = {}
        # Getting the type of 'setattr' (line 1238)
        setattr_312403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 28), 'setattr', False)
        # Calling setattr(args, kwargs) (line 1238)
        setattr_call_result_312436 = invoke(stypy.reporting.localization.Localization(__file__, 1238, 28), setattr_312403, *[res_312404, offattr_312405, result_mul_312434], **kwargs_312435)
        
        # SSA branch for the else part of an if statement (line 1236)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'i' (line 1240)
        i_312437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 29), 'i')
        int_312438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1240, 31), 'int')
        # Applying the binary operator '+' (line 1240)
        result_add_312439 = python_operator(stypy.reporting.localization.Localization(__file__, 1240, 29), '+', i_312437, int_312438)
        
        # Getting the type of 'len_l' (line 1240)
        len_l_312440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 35), 'len_l')
        # Applying the binary operator '<' (line 1240)
        result_lt_312441 = python_operator(stypy.reporting.localization.Localization(__file__, 1240, 29), '<', result_add_312439, len_l_312440)
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1240)
        i_312442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 47), 'i')
        int_312443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1240, 49), 'int')
        # Applying the binary operator '+' (line 1240)
        result_add_312444 = python_operator(stypy.reporting.localization.Localization(__file__, 1240, 47), '+', i_312442, int_312443)
        
        # Getting the type of 'l' (line 1240)
        l_312445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 45), 'l')
        # Obtaining the member '__getitem__' of a type (line 1240)
        getitem___312446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1240, 45), l_312445, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1240)
        subscript_call_result_312447 = invoke(stypy.reporting.localization.Localization(__file__, 1240, 45), getitem___312446, result_add_312444)
        
        unicode_312448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1240, 55), 'unicode', u':')
        # Applying the binary operator '==' (line 1240)
        result_eq_312449 = python_operator(stypy.reporting.localization.Localization(__file__, 1240, 45), '==', subscript_call_result_312447, unicode_312448)
        
        # Applying the binary operator 'and' (line 1240)
        result_and_keyword_312450 = python_operator(stypy.reporting.localization.Localization(__file__, 1240, 29), 'and', result_lt_312441, result_eq_312449)
        
        # Testing the type of an if condition (line 1240)
        if_condition_312451 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1240, 29), result_and_keyword_312450)
        # Assigning a type to the variable 'if_condition_312451' (line 1240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1240, 29), 'if_condition_312451', if_condition_312451)
        # SSA begins for if statement (line 1240)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to setattr(...): (line 1242)
        # Processing the call arguments (line 1242)
        # Getting the type of 'res' (line 1242)
        res_312453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 36), 'res', False)
        # Getting the type of 'offattr' (line 1242)
        offattr_312454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 41), 'offattr', False)
        
        # Call to int(...): (line 1243)
        # Processing the call arguments (line 1243)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1243)
        i_312456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 43), 'i', False)
        # Getting the type of 'l' (line 1243)
        l_312457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 41), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1243)
        getitem___312458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1243, 41), l_312457, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1243)
        subscript_call_result_312459 = invoke(stypy.reporting.localization.Localization(__file__, 1243, 41), getitem___312458, i_312456)
        
        # Processing the call keyword arguments (line 1243)
        kwargs_312460 = {}
        # Getting the type of 'int' (line 1243)
        int_312455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 37), 'int', False)
        # Calling int(args, kwargs) (line 1243)
        int_call_result_312461 = invoke(stypy.reporting.localization.Localization(__file__, 1243, 37), int_312455, *[subscript_call_result_312459], **kwargs_312460)
        
        int_312462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1243, 47), 'int')
        # Applying the binary operator '*' (line 1243)
        result_mul_312463 = python_operator(stypy.reporting.localization.Localization(__file__, 1243, 37), '*', int_call_result_312461, int_312462)
        
        
        # Call to int(...): (line 1243)
        # Processing the call arguments (line 1243)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1243)
        i_312465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 58), 'i', False)
        int_312466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1243, 60), 'int')
        # Applying the binary operator '+' (line 1243)
        result_add_312467 = python_operator(stypy.reporting.localization.Localization(__file__, 1243, 58), '+', i_312465, int_312466)
        
        # Getting the type of 'l' (line 1243)
        l_312468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 56), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1243)
        getitem___312469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1243, 56), l_312468, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1243)
        subscript_call_result_312470 = invoke(stypy.reporting.localization.Localization(__file__, 1243, 56), getitem___312469, result_add_312467)
        
        # Processing the call keyword arguments (line 1243)
        kwargs_312471 = {}
        # Getting the type of 'int' (line 1243)
        int_312464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 52), 'int', False)
        # Calling int(args, kwargs) (line 1243)
        int_call_result_312472 = invoke(stypy.reporting.localization.Localization(__file__, 1243, 52), int_312464, *[subscript_call_result_312470], **kwargs_312471)
        
        int_312473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1243, 64), 'int')
        # Applying the binary operator '*' (line 1243)
        result_mul_312474 = python_operator(stypy.reporting.localization.Localization(__file__, 1243, 52), '*', int_call_result_312472, int_312473)
        
        # Applying the binary operator '+' (line 1243)
        result_add_312475 = python_operator(stypy.reporting.localization.Localization(__file__, 1243, 37), '+', result_mul_312463, result_mul_312474)
        
        # Getting the type of 'signal' (line 1243)
        signal_312476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 68), 'signal', False)
        # Applying the binary operator '*' (line 1243)
        result_mul_312477 = python_operator(stypy.reporting.localization.Localization(__file__, 1243, 36), '*', result_add_312475, signal_312476)
        
        # Processing the call keyword arguments (line 1242)
        kwargs_312478 = {}
        # Getting the type of 'setattr' (line 1242)
        setattr_312452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 28), 'setattr', False)
        # Calling setattr(args, kwargs) (line 1242)
        setattr_call_result_312479 = invoke(stypy.reporting.localization.Localization(__file__, 1242, 28), setattr_312452, *[res_312453, offattr_312454, result_mul_312477], **kwargs_312478)
        
        
        # Getting the type of 'i' (line 1244)
        i_312480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 28), 'i')
        int_312481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1244, 33), 'int')
        # Applying the binary operator '+=' (line 1244)
        result_iadd_312482 = python_operator(stypy.reporting.localization.Localization(__file__, 1244, 28), '+=', i_312480, int_312481)
        # Assigning a type to the variable 'i' (line 1244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1244, 28), 'i', result_iadd_312482)
        
        # SSA branch for the else part of an if statement (line 1240)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'len_li' (line 1245)
        len_li_312483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 29), 'len_li')
        int_312484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1245, 39), 'int')
        # Applying the binary operator '<=' (line 1245)
        result_le_312485 = python_operator(stypy.reporting.localization.Localization(__file__, 1245, 29), '<=', len_li_312483, int_312484)
        
        # Testing the type of an if condition (line 1245)
        if_condition_312486 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1245, 29), result_le_312485)
        # Assigning a type to the variable 'if_condition_312486' (line 1245)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1245, 29), 'if_condition_312486', if_condition_312486)
        # SSA begins for if statement (line 1245)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to setattr(...): (line 1247)
        # Processing the call arguments (line 1247)
        # Getting the type of 'res' (line 1247)
        res_312488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 36), 'res', False)
        # Getting the type of 'offattr' (line 1247)
        offattr_312489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 41), 'offattr', False)
        
        # Call to int(...): (line 1248)
        # Processing the call arguments (line 1248)
        
        # Obtaining the type of the subscript
        int_312491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1248, 46), 'int')
        slice_312492 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1248, 40), None, int_312491, None)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1248)
        i_312493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 42), 'i', False)
        # Getting the type of 'l' (line 1248)
        l_312494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 40), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1248)
        getitem___312495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1248, 40), l_312494, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1248)
        subscript_call_result_312496 = invoke(stypy.reporting.localization.Localization(__file__, 1248, 40), getitem___312495, i_312493)
        
        # Obtaining the member '__getitem__' of a type (line 1248)
        getitem___312497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1248, 40), subscript_call_result_312496, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1248)
        subscript_call_result_312498 = invoke(stypy.reporting.localization.Localization(__file__, 1248, 40), getitem___312497, slice_312492)
        
        # Processing the call keyword arguments (line 1248)
        kwargs_312499 = {}
        # Getting the type of 'int' (line 1248)
        int_312490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 36), 'int', False)
        # Calling int(args, kwargs) (line 1248)
        int_call_result_312500 = invoke(stypy.reporting.localization.Localization(__file__, 1248, 36), int_312490, *[subscript_call_result_312498], **kwargs_312499)
        
        int_312501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1248, 50), 'int')
        # Applying the binary operator '*' (line 1248)
        result_mul_312502 = python_operator(stypy.reporting.localization.Localization(__file__, 1248, 36), '*', int_call_result_312500, int_312501)
        
        # Getting the type of 'signal' (line 1248)
        signal_312503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 55), 'signal', False)
        # Applying the binary operator '*' (line 1248)
        result_mul_312504 = python_operator(stypy.reporting.localization.Localization(__file__, 1248, 54), '*', result_mul_312502, signal_312503)
        
        # Processing the call keyword arguments (line 1247)
        kwargs_312505 = {}
        # Getting the type of 'setattr' (line 1247)
        setattr_312487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 28), 'setattr', False)
        # Calling setattr(args, kwargs) (line 1247)
        setattr_call_result_312506 = invoke(stypy.reporting.localization.Localization(__file__, 1247, 28), setattr_312487, *[res_312488, offattr_312489, result_mul_312504], **kwargs_312505)
        
        # SSA branch for the else part of an if statement (line 1245)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'None' (line 1250)
        None_312507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 35), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 1250)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1250, 28), 'stypy_return_type', None_312507)
        # SSA join for if statement (line 1245)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1240)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1236)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'i' (line 1251)
        i_312508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 24), 'i')
        int_312509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1251, 29), 'int')
        # Applying the binary operator '+=' (line 1251)
        result_iadd_312510 = python_operator(stypy.reporting.localization.Localization(__file__, 1251, 24), '+=', i_312508, int_312509)
        # Assigning a type to the variable 'i' (line 1251)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1251, 24), 'i', result_iadd_312510)
        
        # SSA join for if statement (line 1226)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'res' (line 1252)
        res_312511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 23), 'res')
        # Obtaining the member 'dstabbr' of a type (line 1252)
        dstabbr_312512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1252, 23), res_312511, 'dstabbr')
        # Testing the type of an if condition (line 1252)
        if_condition_312513 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1252, 20), dstabbr_312512)
        # Assigning a type to the variable 'if_condition_312513' (line 1252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1252, 20), 'if_condition_312513', if_condition_312513)
        # SSA begins for if statement (line 1252)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 1252)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1218)
        module_type_store.open_ssa_branch('else')
        # SSA join for if statement (line 1218)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for while statement (line 1212)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'i' (line 1257)
        i_312514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 15), 'i')
        # Getting the type of 'len_l' (line 1257)
        len_l_312515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 19), 'len_l')
        # Applying the binary operator '<' (line 1257)
        result_lt_312516 = python_operator(stypy.reporting.localization.Localization(__file__, 1257, 15), '<', i_312514, len_l_312515)
        
        # Testing the type of an if condition (line 1257)
        if_condition_312517 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1257, 12), result_lt_312516)
        # Assigning a type to the variable 'if_condition_312517' (line 1257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1257, 12), 'if_condition_312517', if_condition_312517)
        # SSA begins for if statement (line 1257)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to range(...): (line 1258)
        # Processing the call arguments (line 1258)
        # Getting the type of 'i' (line 1258)
        i_312519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 31), 'i', False)
        # Getting the type of 'len_l' (line 1258)
        len_l_312520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 34), 'len_l', False)
        # Processing the call keyword arguments (line 1258)
        kwargs_312521 = {}
        # Getting the type of 'range' (line 1258)
        range_312518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 25), 'range', False)
        # Calling range(args, kwargs) (line 1258)
        range_call_result_312522 = invoke(stypy.reporting.localization.Localization(__file__, 1258, 25), range_312518, *[i_312519, len_l_312520], **kwargs_312521)
        
        # Testing the type of a for loop iterable (line 1258)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1258, 16), range_call_result_312522)
        # Getting the type of the for loop variable (line 1258)
        for_loop_var_312523 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1258, 16), range_call_result_312522)
        # Assigning a type to the variable 'j' (line 1258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1258, 16), 'j', for_loop_var_312523)
        # SSA begins for a for statement (line 1258)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'j' (line 1259)
        j_312524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 25), 'j')
        # Getting the type of 'l' (line 1259)
        l_312525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 23), 'l')
        # Obtaining the member '__getitem__' of a type (line 1259)
        getitem___312526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1259, 23), l_312525, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1259)
        subscript_call_result_312527 = invoke(stypy.reporting.localization.Localization(__file__, 1259, 23), getitem___312526, j_312524)
        
        unicode_312528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1259, 31), 'unicode', u';')
        # Applying the binary operator '==' (line 1259)
        result_eq_312529 = python_operator(stypy.reporting.localization.Localization(__file__, 1259, 23), '==', subscript_call_result_312527, unicode_312528)
        
        # Testing the type of an if condition (line 1259)
        if_condition_312530 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1259, 20), result_eq_312529)
        # Assigning a type to the variable 'if_condition_312530' (line 1259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1259, 20), 'if_condition_312530', if_condition_312530)
        # SSA begins for if statement (line 1259)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Subscript (line 1260):
        
        # Assigning a Str to a Subscript (line 1260):
        unicode_312531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1260, 31), 'unicode', u',')
        # Getting the type of 'l' (line 1260)
        l_312532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 24), 'l')
        # Getting the type of 'j' (line 1260)
        j_312533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 26), 'j')
        # Storing an element on a container (line 1260)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1260, 24), l_312532, (j_312533, unicode_312531))
        # SSA join for if statement (line 1259)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Evaluating assert statement condition
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1262)
        i_312534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 25), 'i')
        # Getting the type of 'l' (line 1262)
        l_312535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 23), 'l')
        # Obtaining the member '__getitem__' of a type (line 1262)
        getitem___312536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1262, 23), l_312535, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1262)
        subscript_call_result_312537 = invoke(stypy.reporting.localization.Localization(__file__, 1262, 23), getitem___312536, i_312534)
        
        unicode_312538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1262, 31), 'unicode', u',')
        # Applying the binary operator '==' (line 1262)
        result_eq_312539 = python_operator(stypy.reporting.localization.Localization(__file__, 1262, 23), '==', subscript_call_result_312537, unicode_312538)
        
        
        # Getting the type of 'i' (line 1264)
        i_312540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 16), 'i')
        int_312541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1264, 21), 'int')
        # Applying the binary operator '+=' (line 1264)
        result_iadd_312542 = python_operator(stypy.reporting.localization.Localization(__file__, 1264, 16), '+=', i_312540, int_312541)
        # Assigning a type to the variable 'i' (line 1264)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1264, 16), 'i', result_iadd_312542)
        
        # SSA join for if statement (line 1257)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'i' (line 1266)
        i_312543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 15), 'i')
        # Getting the type of 'len_l' (line 1266)
        len_l_312544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 20), 'len_l')
        # Applying the binary operator '>=' (line 1266)
        result_ge_312545 = python_operator(stypy.reporting.localization.Localization(__file__, 1266, 15), '>=', i_312543, len_l_312544)
        
        # Testing the type of an if condition (line 1266)
        if_condition_312546 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1266, 12), result_ge_312545)
        # Assigning a type to the variable 'if_condition_312546' (line 1266)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1266, 12), 'if_condition_312546', if_condition_312546)
        # SSA begins for if statement (line 1266)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        pass
        # SSA branch for the else part of an if statement (line 1266)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        int_312547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1268, 18), 'int')
        
        # Call to count(...): (line 1268)
        # Processing the call arguments (line 1268)
        unicode_312550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1268, 31), 'unicode', u',')
        # Processing the call keyword arguments (line 1268)
        kwargs_312551 = {}
        # Getting the type of 'l' (line 1268)
        l_312548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 23), 'l', False)
        # Obtaining the member 'count' of a type (line 1268)
        count_312549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1268, 23), l_312548, 'count')
        # Calling count(args, kwargs) (line 1268)
        count_call_result_312552 = invoke(stypy.reporting.localization.Localization(__file__, 1268, 23), count_312549, *[unicode_312550], **kwargs_312551)
        
        # Applying the binary operator '<=' (line 1268)
        result_le_312553 = python_operator(stypy.reporting.localization.Localization(__file__, 1268, 18), '<=', int_312547, count_call_result_312552)
        int_312554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1268, 39), 'int')
        # Applying the binary operator '<=' (line 1268)
        result_le_312555 = python_operator(stypy.reporting.localization.Localization(__file__, 1268, 18), '<=', count_call_result_312552, int_312554)
        # Applying the binary operator '&' (line 1268)
        result_and__312556 = python_operator(stypy.reporting.localization.Localization(__file__, 1268, 18), '&', result_le_312553, result_le_312555)
        
        
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1269)
        i_312561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 36), 'i')
        slice_312562 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1269, 34), i_312561, None, None)
        # Getting the type of 'l' (line 1269)
        l_312563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 34), 'l')
        # Obtaining the member '__getitem__' of a type (line 1269)
        getitem___312564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1269, 34), l_312563, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1269)
        subscript_call_result_312565 = invoke(stypy.reporting.localization.Localization(__file__, 1269, 34), getitem___312564, slice_312562)
        
        comprehension_312566 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1269, 23), subscript_call_result_312565)
        # Assigning a type to the variable 'x' (line 1269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 23), 'x', comprehension_312566)
        
        # Getting the type of 'x' (line 1269)
        x_312558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 43), 'x')
        unicode_312559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1269, 48), 'unicode', u',')
        # Applying the binary operator '!=' (line 1269)
        result_ne_312560 = python_operator(stypy.reporting.localization.Localization(__file__, 1269, 43), '!=', x_312558, unicode_312559)
        
        # Calculating comprehension expression
        # Getting the type of 'x' (line 1270)
        x_312570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 32), 'x')
        comprehension_312571 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1269, 23), x_312570)
        # Assigning a type to the variable 'y' (line 1269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 23), 'y', comprehension_312571)
        
        # Getting the type of 'y' (line 1270)
        y_312567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 37), 'y')
        unicode_312568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1270, 46), 'unicode', u'0123456789')
        # Applying the binary operator 'notin' (line 1270)
        result_contains_312569 = python_operator(stypy.reporting.localization.Localization(__file__, 1270, 37), 'notin', y_312567, unicode_312568)
        
        # Getting the type of 'y' (line 1269)
        y_312557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 23), 'y')
        list_312572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1269, 23), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1269, 23), list_312572, y_312557)
        # Applying the 'not' unary operator (line 1269)
        result_not__312573 = python_operator(stypy.reporting.localization.Localization(__file__, 1269, 18), 'not', list_312572)
        
        # Applying the binary operator 'and' (line 1268)
        result_and_keyword_312574 = python_operator(stypy.reporting.localization.Localization(__file__, 1268, 18), 'and', result_and__312556, result_not__312573)
        
        # Testing the type of an if condition (line 1268)
        if_condition_312575 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1268, 17), result_and_keyword_312574)
        # Assigning a type to the variable 'if_condition_312575' (line 1268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1268, 17), 'if_condition_312575', if_condition_312575)
        # SSA begins for if statement (line 1268)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1272)
        tuple_312576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1272, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1272)
        # Adding element type (line 1272)
        # Getting the type of 'res' (line 1272)
        res_312577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 26), 'res')
        # Obtaining the member 'start' of a type (line 1272)
        start_312578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1272, 26), res_312577, 'start')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1272, 26), tuple_312576, start_312578)
        # Adding element type (line 1272)
        # Getting the type of 'res' (line 1272)
        res_312579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 37), 'res')
        # Obtaining the member 'end' of a type (line 1272)
        end_312580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1272, 37), res_312579, 'end')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1272, 26), tuple_312576, end_312580)
        
        # Testing the type of a for loop iterable (line 1272)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1272, 16), tuple_312576)
        # Getting the type of the for loop variable (line 1272)
        for_loop_var_312581 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1272, 16), tuple_312576)
        # Assigning a type to the variable 'x' (line 1272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1272, 16), 'x', for_loop_var_312581)
        # SSA begins for a for statement (line 1272)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Attribute (line 1273):
        
        # Assigning a Call to a Attribute (line 1273):
        
        # Call to int(...): (line 1273)
        # Processing the call arguments (line 1273)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1273)
        i_312583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 36), 'i', False)
        # Getting the type of 'l' (line 1273)
        l_312584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 34), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1273)
        getitem___312585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1273, 34), l_312584, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1273)
        subscript_call_result_312586 = invoke(stypy.reporting.localization.Localization(__file__, 1273, 34), getitem___312585, i_312583)
        
        # Processing the call keyword arguments (line 1273)
        kwargs_312587 = {}
        # Getting the type of 'int' (line 1273)
        int_312582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 30), 'int', False)
        # Calling int(args, kwargs) (line 1273)
        int_call_result_312588 = invoke(stypy.reporting.localization.Localization(__file__, 1273, 30), int_312582, *[subscript_call_result_312586], **kwargs_312587)
        
        # Getting the type of 'x' (line 1273)
        x_312589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 20), 'x')
        # Setting the type of the member 'month' of a type (line 1273)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1273, 20), x_312589, 'month', int_call_result_312588)
        
        # Getting the type of 'i' (line 1274)
        i_312590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1274, 20), 'i')
        int_312591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1274, 25), 'int')
        # Applying the binary operator '+=' (line 1274)
        result_iadd_312592 = python_operator(stypy.reporting.localization.Localization(__file__, 1274, 20), '+=', i_312590, int_312591)
        # Assigning a type to the variable 'i' (line 1274)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1274, 20), 'i', result_iadd_312592)
        
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1275)
        i_312593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 25), 'i')
        # Getting the type of 'l' (line 1275)
        l_312594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 23), 'l')
        # Obtaining the member '__getitem__' of a type (line 1275)
        getitem___312595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1275, 23), l_312594, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1275)
        subscript_call_result_312596 = invoke(stypy.reporting.localization.Localization(__file__, 1275, 23), getitem___312595, i_312593)
        
        unicode_312597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1275, 31), 'unicode', u'-')
        # Applying the binary operator '==' (line 1275)
        result_eq_312598 = python_operator(stypy.reporting.localization.Localization(__file__, 1275, 23), '==', subscript_call_result_312596, unicode_312597)
        
        # Testing the type of an if condition (line 1275)
        if_condition_312599 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1275, 20), result_eq_312598)
        # Assigning a type to the variable 'if_condition_312599' (line 1275)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1275, 20), 'if_condition_312599', if_condition_312599)
        # SSA begins for if statement (line 1275)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1276):
        
        # Assigning a BinOp to a Name (line 1276):
        
        # Call to int(...): (line 1276)
        # Processing the call arguments (line 1276)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1276)
        i_312601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 38), 'i', False)
        int_312602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1276, 40), 'int')
        # Applying the binary operator '+' (line 1276)
        result_add_312603 = python_operator(stypy.reporting.localization.Localization(__file__, 1276, 38), '+', i_312601, int_312602)
        
        # Getting the type of 'l' (line 1276)
        l_312604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 36), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1276)
        getitem___312605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1276, 36), l_312604, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1276)
        subscript_call_result_312606 = invoke(stypy.reporting.localization.Localization(__file__, 1276, 36), getitem___312605, result_add_312603)
        
        # Processing the call keyword arguments (line 1276)
        kwargs_312607 = {}
        # Getting the type of 'int' (line 1276)
        int_312600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 32), 'int', False)
        # Calling int(args, kwargs) (line 1276)
        int_call_result_312608 = invoke(stypy.reporting.localization.Localization(__file__, 1276, 32), int_312600, *[subscript_call_result_312606], **kwargs_312607)
        
        int_312609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1276, 44), 'int')
        # Applying the binary operator '*' (line 1276)
        result_mul_312610 = python_operator(stypy.reporting.localization.Localization(__file__, 1276, 32), '*', int_call_result_312608, int_312609)
        
        # Assigning a type to the variable 'value' (line 1276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1276, 24), 'value', result_mul_312610)
        
        # Getting the type of 'i' (line 1277)
        i_312611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 24), 'i')
        int_312612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1277, 29), 'int')
        # Applying the binary operator '+=' (line 1277)
        result_iadd_312613 = python_operator(stypy.reporting.localization.Localization(__file__, 1277, 24), '+=', i_312611, int_312612)
        # Assigning a type to the variable 'i' (line 1277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1277, 24), 'i', result_iadd_312613)
        
        # SSA branch for the else part of an if statement (line 1275)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1279):
        
        # Assigning a Call to a Name (line 1279):
        
        # Call to int(...): (line 1279)
        # Processing the call arguments (line 1279)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1279)
        i_312615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 38), 'i', False)
        # Getting the type of 'l' (line 1279)
        l_312616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 36), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1279)
        getitem___312617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1279, 36), l_312616, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1279)
        subscript_call_result_312618 = invoke(stypy.reporting.localization.Localization(__file__, 1279, 36), getitem___312617, i_312615)
        
        # Processing the call keyword arguments (line 1279)
        kwargs_312619 = {}
        # Getting the type of 'int' (line 1279)
        int_312614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 32), 'int', False)
        # Calling int(args, kwargs) (line 1279)
        int_call_result_312620 = invoke(stypy.reporting.localization.Localization(__file__, 1279, 32), int_312614, *[subscript_call_result_312618], **kwargs_312619)
        
        # Assigning a type to the variable 'value' (line 1279)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1279, 24), 'value', int_call_result_312620)
        # SSA join for if statement (line 1275)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'i' (line 1280)
        i_312621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 20), 'i')
        int_312622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1280, 25), 'int')
        # Applying the binary operator '+=' (line 1280)
        result_iadd_312623 = python_operator(stypy.reporting.localization.Localization(__file__, 1280, 20), '+=', i_312621, int_312622)
        # Assigning a type to the variable 'i' (line 1280)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1280, 20), 'i', result_iadd_312623)
        
        
        # Getting the type of 'value' (line 1281)
        value_312624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 23), 'value')
        # Testing the type of an if condition (line 1281)
        if_condition_312625 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1281, 20), value_312624)
        # Assigning a type to the variable 'if_condition_312625' (line 1281)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1281, 20), 'if_condition_312625', if_condition_312625)
        # SSA begins for if statement (line 1281)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1282):
        
        # Assigning a Name to a Attribute (line 1282):
        # Getting the type of 'value' (line 1282)
        value_312626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 33), 'value')
        # Getting the type of 'x' (line 1282)
        x_312627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 24), 'x')
        # Setting the type of the member 'week' of a type (line 1282)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1282, 24), x_312627, 'week', value_312626)
        
        # Assigning a BinOp to a Attribute (line 1283):
        
        # Assigning a BinOp to a Attribute (line 1283):
        
        # Call to int(...): (line 1283)
        # Processing the call arguments (line 1283)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1283)
        i_312629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 43), 'i', False)
        # Getting the type of 'l' (line 1283)
        l_312630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 41), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1283)
        getitem___312631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1283, 41), l_312630, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1283)
        subscript_call_result_312632 = invoke(stypy.reporting.localization.Localization(__file__, 1283, 41), getitem___312631, i_312629)
        
        # Processing the call keyword arguments (line 1283)
        kwargs_312633 = {}
        # Getting the type of 'int' (line 1283)
        int_312628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 37), 'int', False)
        # Calling int(args, kwargs) (line 1283)
        int_call_result_312634 = invoke(stypy.reporting.localization.Localization(__file__, 1283, 37), int_312628, *[subscript_call_result_312632], **kwargs_312633)
        
        int_312635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1283, 47), 'int')
        # Applying the binary operator '-' (line 1283)
        result_sub_312636 = python_operator(stypy.reporting.localization.Localization(__file__, 1283, 37), '-', int_call_result_312634, int_312635)
        
        int_312637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1283, 52), 'int')
        # Applying the binary operator '%' (line 1283)
        result_mod_312638 = python_operator(stypy.reporting.localization.Localization(__file__, 1283, 36), '%', result_sub_312636, int_312637)
        
        # Getting the type of 'x' (line 1283)
        x_312639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 24), 'x')
        # Setting the type of the member 'weekday' of a type (line 1283)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1283, 24), x_312639, 'weekday', result_mod_312638)
        # SSA branch for the else part of an if statement (line 1281)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Attribute (line 1285):
        
        # Assigning a Call to a Attribute (line 1285):
        
        # Call to int(...): (line 1285)
        # Processing the call arguments (line 1285)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1285)
        i_312641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 38), 'i', False)
        # Getting the type of 'l' (line 1285)
        l_312642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 36), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1285)
        getitem___312643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1285, 36), l_312642, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1285)
        subscript_call_result_312644 = invoke(stypy.reporting.localization.Localization(__file__, 1285, 36), getitem___312643, i_312641)
        
        # Processing the call keyword arguments (line 1285)
        kwargs_312645 = {}
        # Getting the type of 'int' (line 1285)
        int_312640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 32), 'int', False)
        # Calling int(args, kwargs) (line 1285)
        int_call_result_312646 = invoke(stypy.reporting.localization.Localization(__file__, 1285, 32), int_312640, *[subscript_call_result_312644], **kwargs_312645)
        
        # Getting the type of 'x' (line 1285)
        x_312647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 24), 'x')
        # Setting the type of the member 'day' of a type (line 1285)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1285, 24), x_312647, 'day', int_call_result_312646)
        # SSA join for if statement (line 1281)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'i' (line 1286)
        i_312648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 20), 'i')
        int_312649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1286, 25), 'int')
        # Applying the binary operator '+=' (line 1286)
        result_iadd_312650 = python_operator(stypy.reporting.localization.Localization(__file__, 1286, 20), '+=', i_312648, int_312649)
        # Assigning a type to the variable 'i' (line 1286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1286, 20), 'i', result_iadd_312650)
        
        
        # Assigning a Call to a Attribute (line 1287):
        
        # Assigning a Call to a Attribute (line 1287):
        
        # Call to int(...): (line 1287)
        # Processing the call arguments (line 1287)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1287)
        i_312652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 35), 'i', False)
        # Getting the type of 'l' (line 1287)
        l_312653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 33), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1287)
        getitem___312654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1287, 33), l_312653, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1287)
        subscript_call_result_312655 = invoke(stypy.reporting.localization.Localization(__file__, 1287, 33), getitem___312654, i_312652)
        
        # Processing the call keyword arguments (line 1287)
        kwargs_312656 = {}
        # Getting the type of 'int' (line 1287)
        int_312651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 29), 'int', False)
        # Calling int(args, kwargs) (line 1287)
        int_call_result_312657 = invoke(stypy.reporting.localization.Localization(__file__, 1287, 29), int_312651, *[subscript_call_result_312655], **kwargs_312656)
        
        # Getting the type of 'x' (line 1287)
        x_312658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 20), 'x')
        # Setting the type of the member 'time' of a type (line 1287)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1287, 20), x_312658, 'time', int_call_result_312657)
        
        # Getting the type of 'i' (line 1288)
        i_312659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 20), 'i')
        int_312660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1288, 25), 'int')
        # Applying the binary operator '+=' (line 1288)
        result_iadd_312661 = python_operator(stypy.reporting.localization.Localization(__file__, 1288, 20), '+=', i_312659, int_312660)
        # Assigning a type to the variable 'i' (line 1288)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1288, 20), 'i', result_iadd_312661)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'i' (line 1289)
        i_312662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 19), 'i')
        # Getting the type of 'len_l' (line 1289)
        len_l_312663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 23), 'len_l')
        # Applying the binary operator '<' (line 1289)
        result_lt_312664 = python_operator(stypy.reporting.localization.Localization(__file__, 1289, 19), '<', i_312662, len_l_312663)
        
        # Testing the type of an if condition (line 1289)
        if_condition_312665 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1289, 16), result_lt_312664)
        # Assigning a type to the variable 'if_condition_312665' (line 1289)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1289, 16), 'if_condition_312665', if_condition_312665)
        # SSA begins for if statement (line 1289)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1290)
        i_312666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 25), 'i')
        # Getting the type of 'l' (line 1290)
        l_312667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 23), 'l')
        # Obtaining the member '__getitem__' of a type (line 1290)
        getitem___312668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1290, 23), l_312667, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1290)
        subscript_call_result_312669 = invoke(stypy.reporting.localization.Localization(__file__, 1290, 23), getitem___312668, i_312666)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1290)
        tuple_312670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1290, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1290)
        # Adding element type (line 1290)
        unicode_312671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1290, 32), 'unicode', u'-')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1290, 32), tuple_312670, unicode_312671)
        # Adding element type (line 1290)
        unicode_312672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1290, 37), 'unicode', u'+')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1290, 32), tuple_312670, unicode_312672)
        
        # Applying the binary operator 'in' (line 1290)
        result_contains_312673 = python_operator(stypy.reporting.localization.Localization(__file__, 1290, 23), 'in', subscript_call_result_312669, tuple_312670)
        
        # Testing the type of an if condition (line 1290)
        if_condition_312674 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1290, 20), result_contains_312673)
        # Assigning a type to the variable 'if_condition_312674' (line 1290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1290, 20), 'if_condition_312674', if_condition_312674)
        # SSA begins for if statement (line 1290)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1291):
        
        # Assigning a Subscript to a Name (line 1291):
        
        # Obtaining the type of the subscript
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1291)
        i_312675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 43), 'i')
        # Getting the type of 'l' (line 1291)
        l_312676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 41), 'l')
        # Obtaining the member '__getitem__' of a type (line 1291)
        getitem___312677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 41), l_312676, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1291)
        subscript_call_result_312678 = invoke(stypy.reporting.localization.Localization(__file__, 1291, 41), getitem___312677, i_312675)
        
        unicode_312679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1291, 49), 'unicode', u'+')
        # Applying the binary operator '==' (line 1291)
        result_eq_312680 = python_operator(stypy.reporting.localization.Localization(__file__, 1291, 41), '==', subscript_call_result_312678, unicode_312679)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1291)
        tuple_312681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1291, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1291)
        # Adding element type (line 1291)
        int_312682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1291, 34), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1291, 34), tuple_312681, int_312682)
        # Adding element type (line 1291)
        int_312683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1291, 38), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1291, 34), tuple_312681, int_312683)
        
        # Obtaining the member '__getitem__' of a type (line 1291)
        getitem___312684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 34), tuple_312681, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1291)
        subscript_call_result_312685 = invoke(stypy.reporting.localization.Localization(__file__, 1291, 34), getitem___312684, result_eq_312680)
        
        # Assigning a type to the variable 'signal' (line 1291)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1291, 24), 'signal', subscript_call_result_312685)
        
        # Getting the type of 'i' (line 1292)
        i_312686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 24), 'i')
        int_312687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1292, 29), 'int')
        # Applying the binary operator '+=' (line 1292)
        result_iadd_312688 = python_operator(stypy.reporting.localization.Localization(__file__, 1292, 24), '+=', i_312686, int_312687)
        # Assigning a type to the variable 'i' (line 1292)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1292, 24), 'i', result_iadd_312688)
        
        # SSA branch for the else part of an if statement (line 1290)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Name (line 1294):
        
        # Assigning a Num to a Name (line 1294):
        int_312689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1294, 33), 'int')
        # Assigning a type to the variable 'signal' (line 1294)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1294, 24), 'signal', int_312689)
        # SSA join for if statement (line 1290)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Attribute (line 1295):
        
        # Assigning a BinOp to a Attribute (line 1295):
        # Getting the type of 'res' (line 1295)
        res_312690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 37), 'res')
        # Obtaining the member 'stdoffset' of a type (line 1295)
        stdoffset_312691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 37), res_312690, 'stdoffset')
        
        # Call to int(...): (line 1295)
        # Processing the call arguments (line 1295)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1295)
        i_312693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 57), 'i', False)
        # Getting the type of 'l' (line 1295)
        l_312694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 55), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1295)
        getitem___312695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 55), l_312694, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1295)
        subscript_call_result_312696 = invoke(stypy.reporting.localization.Localization(__file__, 1295, 55), getitem___312695, i_312693)
        
        # Processing the call keyword arguments (line 1295)
        kwargs_312697 = {}
        # Getting the type of 'int' (line 1295)
        int_312692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 51), 'int', False)
        # Calling int(args, kwargs) (line 1295)
        int_call_result_312698 = invoke(stypy.reporting.localization.Localization(__file__, 1295, 51), int_312692, *[subscript_call_result_312696], **kwargs_312697)
        
        # Applying the binary operator '+' (line 1295)
        result_add_312699 = python_operator(stypy.reporting.localization.Localization(__file__, 1295, 37), '+', stdoffset_312691, int_call_result_312698)
        
        # Getting the type of 'signal' (line 1295)
        signal_312700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 62), 'signal')
        # Applying the binary operator '*' (line 1295)
        result_mul_312701 = python_operator(stypy.reporting.localization.Localization(__file__, 1295, 36), '*', result_add_312699, signal_312700)
        
        # Getting the type of 'res' (line 1295)
        res_312702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 20), 'res')
        # Setting the type of the member 'dstoffset' of a type (line 1295)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 20), res_312702, 'dstoffset', result_mul_312701)
        # SSA join for if statement (line 1289)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1268)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        
        # Call to count(...): (line 1296)
        # Processing the call arguments (line 1296)
        unicode_312705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1296, 26), 'unicode', u',')
        # Processing the call keyword arguments (line 1296)
        kwargs_312706 = {}
        # Getting the type of 'l' (line 1296)
        l_312703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 18), 'l', False)
        # Obtaining the member 'count' of a type (line 1296)
        count_312704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1296, 18), l_312703, 'count')
        # Calling count(args, kwargs) (line 1296)
        count_call_result_312707 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 18), count_312704, *[unicode_312705], **kwargs_312706)
        
        int_312708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1296, 34), 'int')
        # Applying the binary operator '==' (line 1296)
        result_eq_312709 = python_operator(stypy.reporting.localization.Localization(__file__, 1296, 18), '==', count_call_result_312707, int_312708)
        
        
        
        # Call to count(...): (line 1296)
        # Processing the call arguments (line 1296)
        unicode_312716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1296, 52), 'unicode', u'/')
        # Processing the call keyword arguments (line 1296)
        kwargs_312717 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1296)
        i_312710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 42), 'i', False)
        slice_312711 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1296, 40), i_312710, None, None)
        # Getting the type of 'l' (line 1296)
        l_312712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 40), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1296)
        getitem___312713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1296, 40), l_312712, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1296)
        subscript_call_result_312714 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 40), getitem___312713, slice_312711)
        
        # Obtaining the member 'count' of a type (line 1296)
        count_312715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1296, 40), subscript_call_result_312714, 'count')
        # Calling count(args, kwargs) (line 1296)
        count_call_result_312718 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 40), count_312715, *[unicode_312716], **kwargs_312717)
        
        int_312719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1296, 60), 'int')
        # Applying the binary operator '<=' (line 1296)
        result_le_312720 = python_operator(stypy.reporting.localization.Localization(__file__, 1296, 40), '<=', count_call_result_312718, int_312719)
        
        # Applying the binary operator 'and' (line 1296)
        result_and_keyword_312721 = python_operator(stypy.reporting.localization.Localization(__file__, 1296, 18), 'and', result_eq_312709, result_le_312720)
        
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1297)
        i_312733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 36), 'i')
        slice_312734 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1297, 34), i_312733, None, None)
        # Getting the type of 'l' (line 1297)
        l_312735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 34), 'l')
        # Obtaining the member '__getitem__' of a type (line 1297)
        getitem___312736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1297, 34), l_312735, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1297)
        subscript_call_result_312737 = invoke(stypy.reporting.localization.Localization(__file__, 1297, 34), getitem___312736, slice_312734)
        
        comprehension_312738 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1297, 23), subscript_call_result_312737)
        # Assigning a type to the variable 'x' (line 1297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 23), 'x', comprehension_312738)
        
        # Getting the type of 'x' (line 1297)
        x_312723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 43), 'x')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1297)
        tuple_312724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 53), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1297)
        # Adding element type (line 1297)
        unicode_312725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 53), 'unicode', u',')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1297, 53), tuple_312724, unicode_312725)
        # Adding element type (line 1297)
        unicode_312726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 58), 'unicode', u'/')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1297, 53), tuple_312724, unicode_312726)
        # Adding element type (line 1297)
        unicode_312727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 63), 'unicode', u'J')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1297, 53), tuple_312724, unicode_312727)
        # Adding element type (line 1297)
        unicode_312728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 68), 'unicode', u'M')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1297, 53), tuple_312724, unicode_312728)
        # Adding element type (line 1297)
        unicode_312729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1298, 53), 'unicode', u'.')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1297, 53), tuple_312724, unicode_312729)
        # Adding element type (line 1297)
        unicode_312730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1298, 58), 'unicode', u'-')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1297, 53), tuple_312724, unicode_312730)
        # Adding element type (line 1297)
        unicode_312731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1298, 63), 'unicode', u':')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1297, 53), tuple_312724, unicode_312731)
        
        # Applying the binary operator 'notin' (line 1297)
        result_contains_312732 = python_operator(stypy.reporting.localization.Localization(__file__, 1297, 43), 'notin', x_312723, tuple_312724)
        
        # Calculating comprehension expression
        # Getting the type of 'x' (line 1299)
        x_312742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 32), 'x')
        comprehension_312743 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1297, 23), x_312742)
        # Assigning a type to the variable 'y' (line 1297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 23), 'y', comprehension_312743)
        
        # Getting the type of 'y' (line 1299)
        y_312739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 37), 'y')
        unicode_312740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1299, 46), 'unicode', u'0123456789')
        # Applying the binary operator 'notin' (line 1299)
        result_contains_312741 = python_operator(stypy.reporting.localization.Localization(__file__, 1299, 37), 'notin', y_312739, unicode_312740)
        
        # Getting the type of 'y' (line 1297)
        y_312722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 23), 'y')
        list_312744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 23), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1297, 23), list_312744, y_312722)
        # Applying the 'not' unary operator (line 1297)
        result_not__312745 = python_operator(stypy.reporting.localization.Localization(__file__, 1297, 18), 'not', list_312744)
        
        # Applying the binary operator 'and' (line 1296)
        result_and_keyword_312746 = python_operator(stypy.reporting.localization.Localization(__file__, 1296, 18), 'and', result_and_keyword_312721, result_not__312745)
        
        # Testing the type of an if condition (line 1296)
        if_condition_312747 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1296, 17), result_and_keyword_312746)
        # Assigning a type to the variable 'if_condition_312747' (line 1296)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1296, 17), 'if_condition_312747', if_condition_312747)
        # SSA begins for if statement (line 1296)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1300)
        tuple_312748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1300, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1300)
        # Adding element type (line 1300)
        # Getting the type of 'res' (line 1300)
        res_312749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 26), 'res')
        # Obtaining the member 'start' of a type (line 1300)
        start_312750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1300, 26), res_312749, 'start')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1300, 26), tuple_312748, start_312750)
        # Adding element type (line 1300)
        # Getting the type of 'res' (line 1300)
        res_312751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 37), 'res')
        # Obtaining the member 'end' of a type (line 1300)
        end_312752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1300, 37), res_312751, 'end')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1300, 26), tuple_312748, end_312752)
        
        # Testing the type of a for loop iterable (line 1300)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1300, 16), tuple_312748)
        # Getting the type of the for loop variable (line 1300)
        for_loop_var_312753 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1300, 16), tuple_312748)
        # Assigning a type to the variable 'x' (line 1300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1300, 16), 'x', for_loop_var_312753)
        # SSA begins for a for statement (line 1300)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1301)
        i_312754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 25), 'i')
        # Getting the type of 'l' (line 1301)
        l_312755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 23), 'l')
        # Obtaining the member '__getitem__' of a type (line 1301)
        getitem___312756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1301, 23), l_312755, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1301)
        subscript_call_result_312757 = invoke(stypy.reporting.localization.Localization(__file__, 1301, 23), getitem___312756, i_312754)
        
        unicode_312758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1301, 31), 'unicode', u'J')
        # Applying the binary operator '==' (line 1301)
        result_eq_312759 = python_operator(stypy.reporting.localization.Localization(__file__, 1301, 23), '==', subscript_call_result_312757, unicode_312758)
        
        # Testing the type of an if condition (line 1301)
        if_condition_312760 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1301, 20), result_eq_312759)
        # Assigning a type to the variable 'if_condition_312760' (line 1301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1301, 20), 'if_condition_312760', if_condition_312760)
        # SSA begins for if statement (line 1301)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'i' (line 1303)
        i_312761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 24), 'i')
        int_312762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1303, 29), 'int')
        # Applying the binary operator '+=' (line 1303)
        result_iadd_312763 = python_operator(stypy.reporting.localization.Localization(__file__, 1303, 24), '+=', i_312761, int_312762)
        # Assigning a type to the variable 'i' (line 1303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1303, 24), 'i', result_iadd_312763)
        
        
        # Assigning a Call to a Attribute (line 1304):
        
        # Assigning a Call to a Attribute (line 1304):
        
        # Call to int(...): (line 1304)
        # Processing the call arguments (line 1304)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1304)
        i_312765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 40), 'i', False)
        # Getting the type of 'l' (line 1304)
        l_312766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 38), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1304)
        getitem___312767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1304, 38), l_312766, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1304)
        subscript_call_result_312768 = invoke(stypy.reporting.localization.Localization(__file__, 1304, 38), getitem___312767, i_312765)
        
        # Processing the call keyword arguments (line 1304)
        kwargs_312769 = {}
        # Getting the type of 'int' (line 1304)
        int_312764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 34), 'int', False)
        # Calling int(args, kwargs) (line 1304)
        int_call_result_312770 = invoke(stypy.reporting.localization.Localization(__file__, 1304, 34), int_312764, *[subscript_call_result_312768], **kwargs_312769)
        
        # Getting the type of 'x' (line 1304)
        x_312771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 24), 'x')
        # Setting the type of the member 'jyday' of a type (line 1304)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1304, 24), x_312771, 'jyday', int_call_result_312770)
        # SSA branch for the else part of an if statement (line 1301)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1305)
        i_312772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 27), 'i')
        # Getting the type of 'l' (line 1305)
        l_312773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 25), 'l')
        # Obtaining the member '__getitem__' of a type (line 1305)
        getitem___312774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 25), l_312773, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1305)
        subscript_call_result_312775 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 25), getitem___312774, i_312772)
        
        unicode_312776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1305, 33), 'unicode', u'M')
        # Applying the binary operator '==' (line 1305)
        result_eq_312777 = python_operator(stypy.reporting.localization.Localization(__file__, 1305, 25), '==', subscript_call_result_312775, unicode_312776)
        
        # Testing the type of an if condition (line 1305)
        if_condition_312778 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1305, 25), result_eq_312777)
        # Assigning a type to the variable 'if_condition_312778' (line 1305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1305, 25), 'if_condition_312778', if_condition_312778)
        # SSA begins for if statement (line 1305)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'i' (line 1307)
        i_312779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 24), 'i')
        int_312780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1307, 29), 'int')
        # Applying the binary operator '+=' (line 1307)
        result_iadd_312781 = python_operator(stypy.reporting.localization.Localization(__file__, 1307, 24), '+=', i_312779, int_312780)
        # Assigning a type to the variable 'i' (line 1307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 24), 'i', result_iadd_312781)
        
        
        # Assigning a Call to a Attribute (line 1308):
        
        # Assigning a Call to a Attribute (line 1308):
        
        # Call to int(...): (line 1308)
        # Processing the call arguments (line 1308)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1308)
        i_312783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 40), 'i', False)
        # Getting the type of 'l' (line 1308)
        l_312784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 38), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1308)
        getitem___312785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 38), l_312784, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1308)
        subscript_call_result_312786 = invoke(stypy.reporting.localization.Localization(__file__, 1308, 38), getitem___312785, i_312783)
        
        # Processing the call keyword arguments (line 1308)
        kwargs_312787 = {}
        # Getting the type of 'int' (line 1308)
        int_312782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 34), 'int', False)
        # Calling int(args, kwargs) (line 1308)
        int_call_result_312788 = invoke(stypy.reporting.localization.Localization(__file__, 1308, 34), int_312782, *[subscript_call_result_312786], **kwargs_312787)
        
        # Getting the type of 'x' (line 1308)
        x_312789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 24), 'x')
        # Setting the type of the member 'month' of a type (line 1308)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 24), x_312789, 'month', int_call_result_312788)
        
        # Getting the type of 'i' (line 1309)
        i_312790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 24), 'i')
        int_312791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 29), 'int')
        # Applying the binary operator '+=' (line 1309)
        result_iadd_312792 = python_operator(stypy.reporting.localization.Localization(__file__, 1309, 24), '+=', i_312790, int_312791)
        # Assigning a type to the variable 'i' (line 1309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1309, 24), 'i', result_iadd_312792)
        
        # Evaluating assert statement condition
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1310)
        i_312793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 33), 'i')
        # Getting the type of 'l' (line 1310)
        l_312794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 31), 'l')
        # Obtaining the member '__getitem__' of a type (line 1310)
        getitem___312795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1310, 31), l_312794, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1310)
        subscript_call_result_312796 = invoke(stypy.reporting.localization.Localization(__file__, 1310, 31), getitem___312795, i_312793)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1310)
        tuple_312797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1310, 40), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1310)
        # Adding element type (line 1310)
        unicode_312798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1310, 40), 'unicode', u'-')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1310, 40), tuple_312797, unicode_312798)
        # Adding element type (line 1310)
        unicode_312799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1310, 45), 'unicode', u'.')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1310, 40), tuple_312797, unicode_312799)
        
        # Applying the binary operator 'in' (line 1310)
        result_contains_312800 = python_operator(stypy.reporting.localization.Localization(__file__, 1310, 31), 'in', subscript_call_result_312796, tuple_312797)
        
        
        # Getting the type of 'i' (line 1311)
        i_312801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 24), 'i')
        int_312802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1311, 29), 'int')
        # Applying the binary operator '+=' (line 1311)
        result_iadd_312803 = python_operator(stypy.reporting.localization.Localization(__file__, 1311, 24), '+=', i_312801, int_312802)
        # Assigning a type to the variable 'i' (line 1311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1311, 24), 'i', result_iadd_312803)
        
        
        # Assigning a Call to a Attribute (line 1312):
        
        # Assigning a Call to a Attribute (line 1312):
        
        # Call to int(...): (line 1312)
        # Processing the call arguments (line 1312)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1312)
        i_312805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 39), 'i', False)
        # Getting the type of 'l' (line 1312)
        l_312806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 37), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1312)
        getitem___312807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1312, 37), l_312806, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1312)
        subscript_call_result_312808 = invoke(stypy.reporting.localization.Localization(__file__, 1312, 37), getitem___312807, i_312805)
        
        # Processing the call keyword arguments (line 1312)
        kwargs_312809 = {}
        # Getting the type of 'int' (line 1312)
        int_312804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 33), 'int', False)
        # Calling int(args, kwargs) (line 1312)
        int_call_result_312810 = invoke(stypy.reporting.localization.Localization(__file__, 1312, 33), int_312804, *[subscript_call_result_312808], **kwargs_312809)
        
        # Getting the type of 'x' (line 1312)
        x_312811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 24), 'x')
        # Setting the type of the member 'week' of a type (line 1312)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1312, 24), x_312811, 'week', int_call_result_312810)
        
        
        # Getting the type of 'x' (line 1313)
        x_312812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 27), 'x')
        # Obtaining the member 'week' of a type (line 1313)
        week_312813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1313, 27), x_312812, 'week')
        int_312814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1313, 37), 'int')
        # Applying the binary operator '==' (line 1313)
        result_eq_312815 = python_operator(stypy.reporting.localization.Localization(__file__, 1313, 27), '==', week_312813, int_312814)
        
        # Testing the type of an if condition (line 1313)
        if_condition_312816 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1313, 24), result_eq_312815)
        # Assigning a type to the variable 'if_condition_312816' (line 1313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1313, 24), 'if_condition_312816', if_condition_312816)
        # SSA begins for if statement (line 1313)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Attribute (line 1314):
        
        # Assigning a Num to a Attribute (line 1314):
        int_312817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1314, 37), 'int')
        # Getting the type of 'x' (line 1314)
        x_312818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 28), 'x')
        # Setting the type of the member 'week' of a type (line 1314)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1314, 28), x_312818, 'week', int_312817)
        # SSA join for if statement (line 1313)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'i' (line 1315)
        i_312819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 24), 'i')
        int_312820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1315, 29), 'int')
        # Applying the binary operator '+=' (line 1315)
        result_iadd_312821 = python_operator(stypy.reporting.localization.Localization(__file__, 1315, 24), '+=', i_312819, int_312820)
        # Assigning a type to the variable 'i' (line 1315)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1315, 24), 'i', result_iadd_312821)
        
        # Evaluating assert statement condition
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1316)
        i_312822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 33), 'i')
        # Getting the type of 'l' (line 1316)
        l_312823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 31), 'l')
        # Obtaining the member '__getitem__' of a type (line 1316)
        getitem___312824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1316, 31), l_312823, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1316)
        subscript_call_result_312825 = invoke(stypy.reporting.localization.Localization(__file__, 1316, 31), getitem___312824, i_312822)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1316)
        tuple_312826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1316, 40), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1316)
        # Adding element type (line 1316)
        unicode_312827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1316, 40), 'unicode', u'-')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1316, 40), tuple_312826, unicode_312827)
        # Adding element type (line 1316)
        unicode_312828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1316, 45), 'unicode', u'.')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1316, 40), tuple_312826, unicode_312828)
        
        # Applying the binary operator 'in' (line 1316)
        result_contains_312829 = python_operator(stypy.reporting.localization.Localization(__file__, 1316, 31), 'in', subscript_call_result_312825, tuple_312826)
        
        
        # Getting the type of 'i' (line 1317)
        i_312830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 24), 'i')
        int_312831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1317, 29), 'int')
        # Applying the binary operator '+=' (line 1317)
        result_iadd_312832 = python_operator(stypy.reporting.localization.Localization(__file__, 1317, 24), '+=', i_312830, int_312831)
        # Assigning a type to the variable 'i' (line 1317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1317, 24), 'i', result_iadd_312832)
        
        
        # Assigning a BinOp to a Attribute (line 1318):
        
        # Assigning a BinOp to a Attribute (line 1318):
        
        # Call to int(...): (line 1318)
        # Processing the call arguments (line 1318)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1318)
        i_312834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 43), 'i', False)
        # Getting the type of 'l' (line 1318)
        l_312835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 41), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1318)
        getitem___312836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 41), l_312835, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1318)
        subscript_call_result_312837 = invoke(stypy.reporting.localization.Localization(__file__, 1318, 41), getitem___312836, i_312834)
        
        # Processing the call keyword arguments (line 1318)
        kwargs_312838 = {}
        # Getting the type of 'int' (line 1318)
        int_312833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 37), 'int', False)
        # Calling int(args, kwargs) (line 1318)
        int_call_result_312839 = invoke(stypy.reporting.localization.Localization(__file__, 1318, 37), int_312833, *[subscript_call_result_312837], **kwargs_312838)
        
        int_312840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 47), 'int')
        # Applying the binary operator '-' (line 1318)
        result_sub_312841 = python_operator(stypy.reporting.localization.Localization(__file__, 1318, 37), '-', int_call_result_312839, int_312840)
        
        int_312842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 52), 'int')
        # Applying the binary operator '%' (line 1318)
        result_mod_312843 = python_operator(stypy.reporting.localization.Localization(__file__, 1318, 36), '%', result_sub_312841, int_312842)
        
        # Getting the type of 'x' (line 1318)
        x_312844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 24), 'x')
        # Setting the type of the member 'weekday' of a type (line 1318)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 24), x_312844, 'weekday', result_mod_312843)
        # SSA branch for the else part of an if statement (line 1305)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Attribute (line 1321):
        
        # Assigning a BinOp to a Attribute (line 1321):
        
        # Call to int(...): (line 1321)
        # Processing the call arguments (line 1321)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1321)
        i_312846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 39), 'i', False)
        # Getting the type of 'l' (line 1321)
        l_312847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 37), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1321)
        getitem___312848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1321, 37), l_312847, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1321)
        subscript_call_result_312849 = invoke(stypy.reporting.localization.Localization(__file__, 1321, 37), getitem___312848, i_312846)
        
        # Processing the call keyword arguments (line 1321)
        kwargs_312850 = {}
        # Getting the type of 'int' (line 1321)
        int_312845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 33), 'int', False)
        # Calling int(args, kwargs) (line 1321)
        int_call_result_312851 = invoke(stypy.reporting.localization.Localization(__file__, 1321, 33), int_312845, *[subscript_call_result_312849], **kwargs_312850)
        
        int_312852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1321, 43), 'int')
        # Applying the binary operator '+' (line 1321)
        result_add_312853 = python_operator(stypy.reporting.localization.Localization(__file__, 1321, 33), '+', int_call_result_312851, int_312852)
        
        # Getting the type of 'x' (line 1321)
        x_312854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 24), 'x')
        # Setting the type of the member 'yday' of a type (line 1321)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1321, 24), x_312854, 'yday', result_add_312853)
        # SSA join for if statement (line 1305)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1301)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'i' (line 1323)
        i_312855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 20), 'i')
        int_312856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1323, 25), 'int')
        # Applying the binary operator '+=' (line 1323)
        result_iadd_312857 = python_operator(stypy.reporting.localization.Localization(__file__, 1323, 20), '+=', i_312855, int_312856)
        # Assigning a type to the variable 'i' (line 1323)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1323, 20), 'i', result_iadd_312857)
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'i' (line 1325)
        i_312858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 23), 'i')
        # Getting the type of 'len_l' (line 1325)
        len_l_312859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 27), 'len_l')
        # Applying the binary operator '<' (line 1325)
        result_lt_312860 = python_operator(stypy.reporting.localization.Localization(__file__, 1325, 23), '<', i_312858, len_l_312859)
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1325)
        i_312861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 39), 'i')
        # Getting the type of 'l' (line 1325)
        l_312862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 37), 'l')
        # Obtaining the member '__getitem__' of a type (line 1325)
        getitem___312863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1325, 37), l_312862, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1325)
        subscript_call_result_312864 = invoke(stypy.reporting.localization.Localization(__file__, 1325, 37), getitem___312863, i_312861)
        
        unicode_312865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1325, 45), 'unicode', u'/')
        # Applying the binary operator '==' (line 1325)
        result_eq_312866 = python_operator(stypy.reporting.localization.Localization(__file__, 1325, 37), '==', subscript_call_result_312864, unicode_312865)
        
        # Applying the binary operator 'and' (line 1325)
        result_and_keyword_312867 = python_operator(stypy.reporting.localization.Localization(__file__, 1325, 23), 'and', result_lt_312860, result_eq_312866)
        
        # Testing the type of an if condition (line 1325)
        if_condition_312868 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1325, 20), result_and_keyword_312867)
        # Assigning a type to the variable 'if_condition_312868' (line 1325)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1325, 20), 'if_condition_312868', if_condition_312868)
        # SSA begins for if statement (line 1325)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'i' (line 1326)
        i_312869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1326, 24), 'i')
        int_312870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1326, 29), 'int')
        # Applying the binary operator '+=' (line 1326)
        result_iadd_312871 = python_operator(stypy.reporting.localization.Localization(__file__, 1326, 24), '+=', i_312869, int_312870)
        # Assigning a type to the variable 'i' (line 1326)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1326, 24), 'i', result_iadd_312871)
        
        
        # Assigning a Call to a Name (line 1328):
        
        # Assigning a Call to a Name (line 1328):
        
        # Call to len(...): (line 1328)
        # Processing the call arguments (line 1328)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1328)
        i_312873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 39), 'i', False)
        # Getting the type of 'l' (line 1328)
        l_312874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 37), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1328)
        getitem___312875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1328, 37), l_312874, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1328)
        subscript_call_result_312876 = invoke(stypy.reporting.localization.Localization(__file__, 1328, 37), getitem___312875, i_312873)
        
        # Processing the call keyword arguments (line 1328)
        kwargs_312877 = {}
        # Getting the type of 'len' (line 1328)
        len_312872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 33), 'len', False)
        # Calling len(args, kwargs) (line 1328)
        len_call_result_312878 = invoke(stypy.reporting.localization.Localization(__file__, 1328, 33), len_312872, *[subscript_call_result_312876], **kwargs_312877)
        
        # Assigning a type to the variable 'len_li' (line 1328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1328, 24), 'len_li', len_call_result_312878)
        
        
        # Getting the type of 'len_li' (line 1329)
        len_li_312879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 27), 'len_li')
        int_312880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1329, 37), 'int')
        # Applying the binary operator '==' (line 1329)
        result_eq_312881 = python_operator(stypy.reporting.localization.Localization(__file__, 1329, 27), '==', len_li_312879, int_312880)
        
        # Testing the type of an if condition (line 1329)
        if_condition_312882 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1329, 24), result_eq_312881)
        # Assigning a type to the variable 'if_condition_312882' (line 1329)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1329, 24), 'if_condition_312882', if_condition_312882)
        # SSA begins for if statement (line 1329)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Attribute (line 1331):
        
        # Assigning a BinOp to a Attribute (line 1331):
        
        # Call to int(...): (line 1331)
        # Processing the call arguments (line 1331)
        
        # Obtaining the type of the subscript
        int_312884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1331, 48), 'int')
        slice_312885 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1331, 42), None, int_312884, None)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1331)
        i_312886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 44), 'i', False)
        # Getting the type of 'l' (line 1331)
        l_312887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 42), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1331)
        getitem___312888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1331, 42), l_312887, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1331)
        subscript_call_result_312889 = invoke(stypy.reporting.localization.Localization(__file__, 1331, 42), getitem___312888, i_312886)
        
        # Obtaining the member '__getitem__' of a type (line 1331)
        getitem___312890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1331, 42), subscript_call_result_312889, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1331)
        subscript_call_result_312891 = invoke(stypy.reporting.localization.Localization(__file__, 1331, 42), getitem___312890, slice_312885)
        
        # Processing the call keyword arguments (line 1331)
        kwargs_312892 = {}
        # Getting the type of 'int' (line 1331)
        int_312883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 38), 'int', False)
        # Calling int(args, kwargs) (line 1331)
        int_call_result_312893 = invoke(stypy.reporting.localization.Localization(__file__, 1331, 38), int_312883, *[subscript_call_result_312891], **kwargs_312892)
        
        int_312894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1331, 52), 'int')
        # Applying the binary operator '*' (line 1331)
        result_mul_312895 = python_operator(stypy.reporting.localization.Localization(__file__, 1331, 38), '*', int_call_result_312893, int_312894)
        
        
        # Call to int(...): (line 1331)
        # Processing the call arguments (line 1331)
        
        # Obtaining the type of the subscript
        int_312897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1331, 66), 'int')
        slice_312898 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1331, 61), int_312897, None, None)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1331)
        i_312899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 63), 'i', False)
        # Getting the type of 'l' (line 1331)
        l_312900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 61), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1331)
        getitem___312901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1331, 61), l_312900, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1331)
        subscript_call_result_312902 = invoke(stypy.reporting.localization.Localization(__file__, 1331, 61), getitem___312901, i_312899)
        
        # Obtaining the member '__getitem__' of a type (line 1331)
        getitem___312903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1331, 61), subscript_call_result_312902, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1331)
        subscript_call_result_312904 = invoke(stypy.reporting.localization.Localization(__file__, 1331, 61), getitem___312903, slice_312898)
        
        # Processing the call keyword arguments (line 1331)
        kwargs_312905 = {}
        # Getting the type of 'int' (line 1331)
        int_312896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 57), 'int', False)
        # Calling int(args, kwargs) (line 1331)
        int_call_result_312906 = invoke(stypy.reporting.localization.Localization(__file__, 1331, 57), int_312896, *[subscript_call_result_312904], **kwargs_312905)
        
        int_312907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1331, 71), 'int')
        # Applying the binary operator '*' (line 1331)
        result_mul_312908 = python_operator(stypy.reporting.localization.Localization(__file__, 1331, 57), '*', int_call_result_312906, int_312907)
        
        # Applying the binary operator '+' (line 1331)
        result_add_312909 = python_operator(stypy.reporting.localization.Localization(__file__, 1331, 38), '+', result_mul_312895, result_mul_312908)
        
        # Getting the type of 'x' (line 1331)
        x_312910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 28), 'x')
        # Setting the type of the member 'time' of a type (line 1331)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1331, 28), x_312910, 'time', result_add_312909)
        # SSA branch for the else part of an if statement (line 1329)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'i' (line 1332)
        i_312911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 29), 'i')
        int_312912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1332, 31), 'int')
        # Applying the binary operator '+' (line 1332)
        result_add_312913 = python_operator(stypy.reporting.localization.Localization(__file__, 1332, 29), '+', i_312911, int_312912)
        
        # Getting the type of 'len_l' (line 1332)
        len_l_312914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 35), 'len_l')
        # Applying the binary operator '<' (line 1332)
        result_lt_312915 = python_operator(stypy.reporting.localization.Localization(__file__, 1332, 29), '<', result_add_312913, len_l_312914)
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1332)
        i_312916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 47), 'i')
        int_312917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1332, 49), 'int')
        # Applying the binary operator '+' (line 1332)
        result_add_312918 = python_operator(stypy.reporting.localization.Localization(__file__, 1332, 47), '+', i_312916, int_312917)
        
        # Getting the type of 'l' (line 1332)
        l_312919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 45), 'l')
        # Obtaining the member '__getitem__' of a type (line 1332)
        getitem___312920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1332, 45), l_312919, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1332)
        subscript_call_result_312921 = invoke(stypy.reporting.localization.Localization(__file__, 1332, 45), getitem___312920, result_add_312918)
        
        unicode_312922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1332, 55), 'unicode', u':')
        # Applying the binary operator '==' (line 1332)
        result_eq_312923 = python_operator(stypy.reporting.localization.Localization(__file__, 1332, 45), '==', subscript_call_result_312921, unicode_312922)
        
        # Applying the binary operator 'and' (line 1332)
        result_and_keyword_312924 = python_operator(stypy.reporting.localization.Localization(__file__, 1332, 29), 'and', result_lt_312915, result_eq_312923)
        
        # Testing the type of an if condition (line 1332)
        if_condition_312925 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1332, 29), result_and_keyword_312924)
        # Assigning a type to the variable 'if_condition_312925' (line 1332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1332, 29), 'if_condition_312925', if_condition_312925)
        # SSA begins for if statement (line 1332)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Attribute (line 1334):
        
        # Assigning a BinOp to a Attribute (line 1334):
        
        # Call to int(...): (line 1334)
        # Processing the call arguments (line 1334)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1334)
        i_312927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 43), 'i', False)
        # Getting the type of 'l' (line 1334)
        l_312928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 41), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1334)
        getitem___312929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1334, 41), l_312928, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1334)
        subscript_call_result_312930 = invoke(stypy.reporting.localization.Localization(__file__, 1334, 41), getitem___312929, i_312927)
        
        # Processing the call keyword arguments (line 1334)
        kwargs_312931 = {}
        # Getting the type of 'int' (line 1334)
        int_312926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 37), 'int', False)
        # Calling int(args, kwargs) (line 1334)
        int_call_result_312932 = invoke(stypy.reporting.localization.Localization(__file__, 1334, 37), int_312926, *[subscript_call_result_312930], **kwargs_312931)
        
        int_312933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1334, 47), 'int')
        # Applying the binary operator '*' (line 1334)
        result_mul_312934 = python_operator(stypy.reporting.localization.Localization(__file__, 1334, 37), '*', int_call_result_312932, int_312933)
        
        
        # Call to int(...): (line 1334)
        # Processing the call arguments (line 1334)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1334)
        i_312936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 58), 'i', False)
        int_312937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1334, 60), 'int')
        # Applying the binary operator '+' (line 1334)
        result_add_312938 = python_operator(stypy.reporting.localization.Localization(__file__, 1334, 58), '+', i_312936, int_312937)
        
        # Getting the type of 'l' (line 1334)
        l_312939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 56), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1334)
        getitem___312940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1334, 56), l_312939, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1334)
        subscript_call_result_312941 = invoke(stypy.reporting.localization.Localization(__file__, 1334, 56), getitem___312940, result_add_312938)
        
        # Processing the call keyword arguments (line 1334)
        kwargs_312942 = {}
        # Getting the type of 'int' (line 1334)
        int_312935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 52), 'int', False)
        # Calling int(args, kwargs) (line 1334)
        int_call_result_312943 = invoke(stypy.reporting.localization.Localization(__file__, 1334, 52), int_312935, *[subscript_call_result_312941], **kwargs_312942)
        
        int_312944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1334, 64), 'int')
        # Applying the binary operator '*' (line 1334)
        result_mul_312945 = python_operator(stypy.reporting.localization.Localization(__file__, 1334, 52), '*', int_call_result_312943, int_312944)
        
        # Applying the binary operator '+' (line 1334)
        result_add_312946 = python_operator(stypy.reporting.localization.Localization(__file__, 1334, 37), '+', result_mul_312934, result_mul_312945)
        
        # Getting the type of 'x' (line 1334)
        x_312947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 28), 'x')
        # Setting the type of the member 'time' of a type (line 1334)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1334, 28), x_312947, 'time', result_add_312946)
        
        # Getting the type of 'i' (line 1335)
        i_312948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 28), 'i')
        int_312949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1335, 33), 'int')
        # Applying the binary operator '+=' (line 1335)
        result_iadd_312950 = python_operator(stypy.reporting.localization.Localization(__file__, 1335, 28), '+=', i_312948, int_312949)
        # Assigning a type to the variable 'i' (line 1335)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1335, 28), 'i', result_iadd_312950)
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'i' (line 1336)
        i_312951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 31), 'i')
        int_312952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1336, 33), 'int')
        # Applying the binary operator '+' (line 1336)
        result_add_312953 = python_operator(stypy.reporting.localization.Localization(__file__, 1336, 31), '+', i_312951, int_312952)
        
        # Getting the type of 'len_l' (line 1336)
        len_l_312954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 37), 'len_l')
        # Applying the binary operator '<' (line 1336)
        result_lt_312955 = python_operator(stypy.reporting.localization.Localization(__file__, 1336, 31), '<', result_add_312953, len_l_312954)
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1336)
        i_312956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 49), 'i')
        int_312957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1336, 51), 'int')
        # Applying the binary operator '+' (line 1336)
        result_add_312958 = python_operator(stypy.reporting.localization.Localization(__file__, 1336, 49), '+', i_312956, int_312957)
        
        # Getting the type of 'l' (line 1336)
        l_312959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 47), 'l')
        # Obtaining the member '__getitem__' of a type (line 1336)
        getitem___312960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1336, 47), l_312959, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1336)
        subscript_call_result_312961 = invoke(stypy.reporting.localization.Localization(__file__, 1336, 47), getitem___312960, result_add_312958)
        
        unicode_312962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1336, 57), 'unicode', u':')
        # Applying the binary operator '==' (line 1336)
        result_eq_312963 = python_operator(stypy.reporting.localization.Localization(__file__, 1336, 47), '==', subscript_call_result_312961, unicode_312962)
        
        # Applying the binary operator 'and' (line 1336)
        result_and_keyword_312964 = python_operator(stypy.reporting.localization.Localization(__file__, 1336, 31), 'and', result_lt_312955, result_eq_312963)
        
        # Testing the type of an if condition (line 1336)
        if_condition_312965 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1336, 28), result_and_keyword_312964)
        # Assigning a type to the variable 'if_condition_312965' (line 1336)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1336, 28), 'if_condition_312965', if_condition_312965)
        # SSA begins for if statement (line 1336)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'i' (line 1337)
        i_312966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 32), 'i')
        int_312967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1337, 37), 'int')
        # Applying the binary operator '+=' (line 1337)
        result_iadd_312968 = python_operator(stypy.reporting.localization.Localization(__file__, 1337, 32), '+=', i_312966, int_312967)
        # Assigning a type to the variable 'i' (line 1337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1337, 32), 'i', result_iadd_312968)
        
        
        # Getting the type of 'x' (line 1338)
        x_312969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 32), 'x')
        # Obtaining the member 'time' of a type (line 1338)
        time_312970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1338, 32), x_312969, 'time')
        
        # Call to int(...): (line 1338)
        # Processing the call arguments (line 1338)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1338)
        i_312972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 48), 'i', False)
        # Getting the type of 'l' (line 1338)
        l_312973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 46), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1338)
        getitem___312974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1338, 46), l_312973, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1338)
        subscript_call_result_312975 = invoke(stypy.reporting.localization.Localization(__file__, 1338, 46), getitem___312974, i_312972)
        
        # Processing the call keyword arguments (line 1338)
        kwargs_312976 = {}
        # Getting the type of 'int' (line 1338)
        int_312971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 42), 'int', False)
        # Calling int(args, kwargs) (line 1338)
        int_call_result_312977 = invoke(stypy.reporting.localization.Localization(__file__, 1338, 42), int_312971, *[subscript_call_result_312975], **kwargs_312976)
        
        # Applying the binary operator '+=' (line 1338)
        result_iadd_312978 = python_operator(stypy.reporting.localization.Localization(__file__, 1338, 32), '+=', time_312970, int_call_result_312977)
        # Getting the type of 'x' (line 1338)
        x_312979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 32), 'x')
        # Setting the type of the member 'time' of a type (line 1338)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1338, 32), x_312979, 'time', result_iadd_312978)
        
        # SSA join for if statement (line 1336)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1332)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'len_li' (line 1339)
        len_li_312980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 29), 'len_li')
        int_312981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1339, 39), 'int')
        # Applying the binary operator '<=' (line 1339)
        result_le_312982 = python_operator(stypy.reporting.localization.Localization(__file__, 1339, 29), '<=', len_li_312980, int_312981)
        
        # Testing the type of an if condition (line 1339)
        if_condition_312983 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1339, 29), result_le_312982)
        # Assigning a type to the variable 'if_condition_312983' (line 1339)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1339, 29), 'if_condition_312983', if_condition_312983)
        # SSA begins for if statement (line 1339)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Attribute (line 1341):
        
        # Assigning a BinOp to a Attribute (line 1341):
        
        # Call to int(...): (line 1341)
        # Processing the call arguments (line 1341)
        
        # Obtaining the type of the subscript
        int_312985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1341, 48), 'int')
        slice_312986 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1341, 42), None, int_312985, None)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1341)
        i_312987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 44), 'i', False)
        # Getting the type of 'l' (line 1341)
        l_312988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 42), 'l', False)
        # Obtaining the member '__getitem__' of a type (line 1341)
        getitem___312989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1341, 42), l_312988, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1341)
        subscript_call_result_312990 = invoke(stypy.reporting.localization.Localization(__file__, 1341, 42), getitem___312989, i_312987)
        
        # Obtaining the member '__getitem__' of a type (line 1341)
        getitem___312991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1341, 42), subscript_call_result_312990, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1341)
        subscript_call_result_312992 = invoke(stypy.reporting.localization.Localization(__file__, 1341, 42), getitem___312991, slice_312986)
        
        # Processing the call keyword arguments (line 1341)
        kwargs_312993 = {}
        # Getting the type of 'int' (line 1341)
        int_312984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 38), 'int', False)
        # Calling int(args, kwargs) (line 1341)
        int_call_result_312994 = invoke(stypy.reporting.localization.Localization(__file__, 1341, 38), int_312984, *[subscript_call_result_312992], **kwargs_312993)
        
        int_312995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1341, 52), 'int')
        # Applying the binary operator '*' (line 1341)
        result_mul_312996 = python_operator(stypy.reporting.localization.Localization(__file__, 1341, 38), '*', int_call_result_312994, int_312995)
        
        # Getting the type of 'x' (line 1341)
        x_312997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 28), 'x')
        # Setting the type of the member 'time' of a type (line 1341)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1341, 28), x_312997, 'time', result_mul_312996)
        # SSA branch for the else part of an if statement (line 1339)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'None' (line 1343)
        None_312998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 35), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 1343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 28), 'stypy_return_type', None_312998)
        # SSA join for if statement (line 1339)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1332)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1329)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'i' (line 1344)
        i_312999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 24), 'i')
        int_313000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1344, 29), 'int')
        # Applying the binary operator '+=' (line 1344)
        result_iadd_313001 = python_operator(stypy.reporting.localization.Localization(__file__, 1344, 24), '+=', i_312999, int_313000)
        # Assigning a type to the variable 'i' (line 1344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1344, 24), 'i', result_iadd_313001)
        
        # SSA join for if statement (line 1325)
        module_type_store = module_type_store.join_ssa_context()
        
        # Evaluating assert statement condition
        
        # Evaluating a boolean operation
        
        # Getting the type of 'i' (line 1346)
        i_313002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 27), 'i')
        # Getting the type of 'len_l' (line 1346)
        len_l_313003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 32), 'len_l')
        # Applying the binary operator '==' (line 1346)
        result_eq_313004 = python_operator(stypy.reporting.localization.Localization(__file__, 1346, 27), '==', i_313002, len_l_313003)
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1346)
        i_313005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 43), 'i')
        # Getting the type of 'l' (line 1346)
        l_313006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 41), 'l')
        # Obtaining the member '__getitem__' of a type (line 1346)
        getitem___313007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1346, 41), l_313006, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1346)
        subscript_call_result_313008 = invoke(stypy.reporting.localization.Localization(__file__, 1346, 41), getitem___313007, i_313005)
        
        unicode_313009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1346, 49), 'unicode', u',')
        # Applying the binary operator '==' (line 1346)
        result_eq_313010 = python_operator(stypy.reporting.localization.Localization(__file__, 1346, 41), '==', subscript_call_result_313008, unicode_313009)
        
        # Applying the binary operator 'or' (line 1346)
        result_or_keyword_313011 = python_operator(stypy.reporting.localization.Localization(__file__, 1346, 27), 'or', result_eq_313004, result_eq_313010)
        
        
        # Getting the type of 'i' (line 1348)
        i_313012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 20), 'i')
        int_313013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1348, 25), 'int')
        # Applying the binary operator '+=' (line 1348)
        result_iadd_313014 = python_operator(stypy.reporting.localization.Localization(__file__, 1348, 20), '+=', i_313012, int_313013)
        # Assigning a type to the variable 'i' (line 1348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1348, 20), 'i', result_iadd_313014)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Evaluating assert statement condition
        
        # Getting the type of 'i' (line 1350)
        i_313015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 23), 'i')
        # Getting the type of 'len_l' (line 1350)
        len_l_313016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 28), 'len_l')
        # Applying the binary operator '>=' (line 1350)
        result_ge_313017 = python_operator(stypy.reporting.localization.Localization(__file__, 1350, 23), '>=', i_313015, len_l_313016)
        
        # SSA join for if statement (line 1296)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1268)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1266)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the except part of a try statement (line 1207)
        # SSA branch for the except 'Tuple' branch of a try statement (line 1207)
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'None' (line 1353)
        None_313018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 1353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1353, 12), 'stypy_return_type', None_313018)
        # SSA join for try-except statement (line 1207)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'res' (line 1355)
        res_313019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 15), 'res')
        # Assigning a type to the variable 'stypy_return_type' (line 1355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1355, 8), 'stypy_return_type', res_313019)
        
        # ################# End of 'parse(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'parse' in the type store
        # Getting the type of 'stypy_return_type' (line 1204)
        stypy_return_type_313020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_313020)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'parse'
        return stypy_return_type_313020


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1185, 0, False)
        # Assigning a type to the variable 'self' (line 1186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1186, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_tzparser.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable '_tzparser' (line 1185)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1185, 0), '_tzparser', _tzparser)

# Assigning a Call to a Name (line 1358):

# Assigning a Call to a Name (line 1358):

# Call to _tzparser(...): (line 1358)
# Processing the call keyword arguments (line 1358)
kwargs_313022 = {}
# Getting the type of '_tzparser' (line 1358)
_tzparser_313021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 18), '_tzparser', False)
# Calling _tzparser(args, kwargs) (line 1358)
_tzparser_call_result_313023 = invoke(stypy.reporting.localization.Localization(__file__, 1358, 18), _tzparser_313021, *[], **kwargs_313022)

# Assigning a type to the variable 'DEFAULTTZPARSER' (line 1358)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1358, 0), 'DEFAULTTZPARSER', _tzparser_call_result_313023)

@norecursion
def _parsetz(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_parsetz'
    module_type_store = module_type_store.open_function_context('_parsetz', 1361, 0, False)
    
    # Passed parameters checking function
    _parsetz.stypy_localization = localization
    _parsetz.stypy_type_of_self = None
    _parsetz.stypy_type_store = module_type_store
    _parsetz.stypy_function_name = '_parsetz'
    _parsetz.stypy_param_names_list = ['tzstr']
    _parsetz.stypy_varargs_param_name = None
    _parsetz.stypy_kwargs_param_name = None
    _parsetz.stypy_call_defaults = defaults
    _parsetz.stypy_call_varargs = varargs
    _parsetz.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_parsetz', ['tzstr'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_parsetz', localization, ['tzstr'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_parsetz(...)' code ##################

    
    # Call to parse(...): (line 1362)
    # Processing the call arguments (line 1362)
    # Getting the type of 'tzstr' (line 1362)
    tzstr_313026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 33), 'tzstr', False)
    # Processing the call keyword arguments (line 1362)
    kwargs_313027 = {}
    # Getting the type of 'DEFAULTTZPARSER' (line 1362)
    DEFAULTTZPARSER_313024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 11), 'DEFAULTTZPARSER', False)
    # Obtaining the member 'parse' of a type (line 1362)
    parse_313025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1362, 11), DEFAULTTZPARSER_313024, 'parse')
    # Calling parse(args, kwargs) (line 1362)
    parse_call_result_313028 = invoke(stypy.reporting.localization.Localization(__file__, 1362, 11), parse_313025, *[tzstr_313026], **kwargs_313027)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1362)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1362, 4), 'stypy_return_type', parse_call_result_313028)
    
    # ################# End of '_parsetz(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_parsetz' in the type store
    # Getting the type of 'stypy_return_type' (line 1361)
    stypy_return_type_313029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_313029)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_parsetz'
    return stypy_return_type_313029

# Assigning a type to the variable '_parsetz' (line 1361)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1361, 0), '_parsetz', _parsetz)

@norecursion
def _parsems(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_parsems'
    module_type_store = module_type_store.open_function_context('_parsems', 1365, 0, False)
    
    # Passed parameters checking function
    _parsems.stypy_localization = localization
    _parsems.stypy_type_of_self = None
    _parsems.stypy_type_store = module_type_store
    _parsems.stypy_function_name = '_parsems'
    _parsems.stypy_param_names_list = ['value']
    _parsems.stypy_varargs_param_name = None
    _parsems.stypy_kwargs_param_name = None
    _parsems.stypy_call_defaults = defaults
    _parsems.stypy_call_varargs = varargs
    _parsems.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_parsems', ['value'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_parsems', localization, ['value'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_parsems(...)' code ##################

    unicode_313030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1366, 4), 'unicode', u'Parse a I[.F] seconds value into (seconds, microseconds).')
    
    
    unicode_313031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1367, 7), 'unicode', u'.')
    # Getting the type of 'value' (line 1367)
    value_313032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 18), 'value')
    # Applying the binary operator 'notin' (line 1367)
    result_contains_313033 = python_operator(stypy.reporting.localization.Localization(__file__, 1367, 7), 'notin', unicode_313031, value_313032)
    
    # Testing the type of an if condition (line 1367)
    if_condition_313034 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1367, 4), result_contains_313033)
    # Assigning a type to the variable 'if_condition_313034' (line 1367)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1367, 4), 'if_condition_313034', if_condition_313034)
    # SSA begins for if statement (line 1367)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1368)
    tuple_313035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1368, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1368)
    # Adding element type (line 1368)
    
    # Call to int(...): (line 1368)
    # Processing the call arguments (line 1368)
    # Getting the type of 'value' (line 1368)
    value_313037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 19), 'value', False)
    # Processing the call keyword arguments (line 1368)
    kwargs_313038 = {}
    # Getting the type of 'int' (line 1368)
    int_313036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 15), 'int', False)
    # Calling int(args, kwargs) (line 1368)
    int_call_result_313039 = invoke(stypy.reporting.localization.Localization(__file__, 1368, 15), int_313036, *[value_313037], **kwargs_313038)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1368, 15), tuple_313035, int_call_result_313039)
    # Adding element type (line 1368)
    int_313040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1368, 27), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1368, 15), tuple_313035, int_313040)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1368)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1368, 8), 'stypy_return_type', tuple_313035)
    # SSA branch for the else part of an if statement (line 1367)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Tuple (line 1370):
    
    # Assigning a Call to a Name:
    
    # Call to split(...): (line 1370)
    # Processing the call arguments (line 1370)
    unicode_313043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1370, 27), 'unicode', u'.')
    # Processing the call keyword arguments (line 1370)
    kwargs_313044 = {}
    # Getting the type of 'value' (line 1370)
    value_313041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 15), 'value', False)
    # Obtaining the member 'split' of a type (line 1370)
    split_313042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1370, 15), value_313041, 'split')
    # Calling split(args, kwargs) (line 1370)
    split_call_result_313045 = invoke(stypy.reporting.localization.Localization(__file__, 1370, 15), split_313042, *[unicode_313043], **kwargs_313044)
    
    # Assigning a type to the variable 'call_assignment_308915' (line 1370)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1370, 8), 'call_assignment_308915', split_call_result_313045)
    
    # Assigning a Call to a Name (line 1370):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_313048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1370, 8), 'int')
    # Processing the call keyword arguments
    kwargs_313049 = {}
    # Getting the type of 'call_assignment_308915' (line 1370)
    call_assignment_308915_313046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 8), 'call_assignment_308915', False)
    # Obtaining the member '__getitem__' of a type (line 1370)
    getitem___313047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1370, 8), call_assignment_308915_313046, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_313050 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___313047, *[int_313048], **kwargs_313049)
    
    # Assigning a type to the variable 'call_assignment_308916' (line 1370)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1370, 8), 'call_assignment_308916', getitem___call_result_313050)
    
    # Assigning a Name to a Name (line 1370):
    # Getting the type of 'call_assignment_308916' (line 1370)
    call_assignment_308916_313051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 8), 'call_assignment_308916')
    # Assigning a type to the variable 'i' (line 1370)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1370, 8), 'i', call_assignment_308916_313051)
    
    # Assigning a Call to a Name (line 1370):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_313054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1370, 8), 'int')
    # Processing the call keyword arguments
    kwargs_313055 = {}
    # Getting the type of 'call_assignment_308915' (line 1370)
    call_assignment_308915_313052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 8), 'call_assignment_308915', False)
    # Obtaining the member '__getitem__' of a type (line 1370)
    getitem___313053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1370, 8), call_assignment_308915_313052, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_313056 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___313053, *[int_313054], **kwargs_313055)
    
    # Assigning a type to the variable 'call_assignment_308917' (line 1370)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1370, 8), 'call_assignment_308917', getitem___call_result_313056)
    
    # Assigning a Name to a Name (line 1370):
    # Getting the type of 'call_assignment_308917' (line 1370)
    call_assignment_308917_313057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 8), 'call_assignment_308917')
    # Assigning a type to the variable 'f' (line 1370)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1370, 11), 'f', call_assignment_308917_313057)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1371)
    tuple_313058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1371, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1371)
    # Adding element type (line 1371)
    
    # Call to int(...): (line 1371)
    # Processing the call arguments (line 1371)
    # Getting the type of 'i' (line 1371)
    i_313060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 19), 'i', False)
    # Processing the call keyword arguments (line 1371)
    kwargs_313061 = {}
    # Getting the type of 'int' (line 1371)
    int_313059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 15), 'int', False)
    # Calling int(args, kwargs) (line 1371)
    int_call_result_313062 = invoke(stypy.reporting.localization.Localization(__file__, 1371, 15), int_313059, *[i_313060], **kwargs_313061)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1371, 15), tuple_313058, int_call_result_313062)
    # Adding element type (line 1371)
    
    # Call to int(...): (line 1371)
    # Processing the call arguments (line 1371)
    
    # Obtaining the type of the subscript
    int_313064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1371, 44), 'int')
    slice_313065 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1371, 27), None, int_313064, None)
    
    # Call to ljust(...): (line 1371)
    # Processing the call arguments (line 1371)
    int_313068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1371, 35), 'int')
    unicode_313069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1371, 38), 'unicode', u'0')
    # Processing the call keyword arguments (line 1371)
    kwargs_313070 = {}
    # Getting the type of 'f' (line 1371)
    f_313066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 27), 'f', False)
    # Obtaining the member 'ljust' of a type (line 1371)
    ljust_313067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1371, 27), f_313066, 'ljust')
    # Calling ljust(args, kwargs) (line 1371)
    ljust_call_result_313071 = invoke(stypy.reporting.localization.Localization(__file__, 1371, 27), ljust_313067, *[int_313068, unicode_313069], **kwargs_313070)
    
    # Obtaining the member '__getitem__' of a type (line 1371)
    getitem___313072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1371, 27), ljust_call_result_313071, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1371)
    subscript_call_result_313073 = invoke(stypy.reporting.localization.Localization(__file__, 1371, 27), getitem___313072, slice_313065)
    
    # Processing the call keyword arguments (line 1371)
    kwargs_313074 = {}
    # Getting the type of 'int' (line 1371)
    int_313063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 23), 'int', False)
    # Calling int(args, kwargs) (line 1371)
    int_call_result_313075 = invoke(stypy.reporting.localization.Localization(__file__, 1371, 23), int_313063, *[subscript_call_result_313073], **kwargs_313074)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1371, 15), tuple_313058, int_call_result_313075)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1371, 8), 'stypy_return_type', tuple_313058)
    # SSA join for if statement (line 1367)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_parsems(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_parsems' in the type store
    # Getting the type of 'stypy_return_type' (line 1365)
    stypy_return_type_313076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_313076)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_parsems'
    return stypy_return_type_313076

# Assigning a type to the variable '_parsems' (line 1365)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1365, 0), '_parsems', _parsems)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
