
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: import os
2: 
3: '''
4: Stypy can generate various files from an existing .py programs, all with its own purpose. Each generated file name
5: is the same as the original one, but adding a prefix. These are the prefixes added for each file type
6: '''
7: type_inference_file_directory_name = ".stypy"
8: type_inference_file_postfix = "__type_inference"
9: type_modifier_file_postfix = "__type_modifiers"
10: type_data_autogenerator_file_postfix = "__type_data_autogenerator"
11: type_data_file_postfix = "__type_data"
12: type_annotation_file_postfix = "__type_annotation"
13: type_rule_file_postfix = "__type_rules"
14: 
15: '''
16: Helper functions to deal with files, folders and locations of generated programs
17: '''
18: 
19: 
20: def go_to_parent_folder(num_levels, path):
21:     '''
22:     Ascend up to num_levels folders in the specified path
23:     '''
24:     for i in range(num_levels):
25:         path = os.path.dirname(path)
26: 
27:     return path
28: 
29: 
30: def __get_derived_file_path(source_file_path, output_file_postfix):
31:     '''
32:     From a .py file, obtains the path of the corresponding files generated by stypy for various reasons
33:     '''
34:     dirname = os.path.dirname(source_file_path)
35:     filename = source_file_path.split("/")[-1].split(".")[0]
36:     path = dirname + "/" + type_inference_file_directory_name + "/" + filename + output_file_postfix + ".py"
37: 
38:     return path
39: 
40: 
41: def get_original_program_from_type_inference_file(ti_file_path):
42:     '''
43:     Obtain the original file from a type inference file path generated from it
44:     '''
45:     path = ti_file_path.replace(type_inference_file_postfix, "")
46:     path = path.replace(TYPE_INFERENCE_PATH, "")
47:     path = path.replace('\\', '/')
48: 
49:     return path
50: 
51: 
52: def get_stypy_type_inference_program_file_path(source_file_path):
53:     '''
54:     Get the location of the type inference program obtained for a .py file
55:     '''
56:     return __get_derived_file_path(source_file_path, type_inference_file_postfix)
57: 
58: 
59: def get_stypy_type_data_autogenerator_program_file_path(source_file_path):
60:     '''
61:     Get the location of the type data auto-generation program obtained for a .py file
62:     These files are only used for code generation testing, they are not really a part of stypy
63:     '''
64:     return __get_derived_file_path(source_file_path, type_data_autogenerator_file_postfix)
65: 
66: 
67: def get_stypy_type_data_file_path(source_file_path):
68:     '''
69:     Get the location of the type data file obtained for a .py file
70:     These files are only used for code generation testing, they are not really a part of stypy
71:     '''
72:     return __get_derived_file_path(source_file_path, type_data_file_postfix)
73: 
74: 
75: def get_stypy_type_annotation_file_path(source_file_path):
76:     '''
77:     Get the location of the type annotated file obtained for a .py file
78:     These files are only used for code generation testing, they are not really a part of stypy
79:     '''
80:     return __get_derived_file_path(source_file_path, type_annotation_file_postfix)
81: 
82: 
83: '''
84: Python executable to use
85: '''
86: PYTHON_EXE_PATH = "C:/Python27/"
87: PYTHON_EXE = PYTHON_EXE_PATH + "python.exe"
88: 
89: '''
90: Root folder of the project, to place the parameters file in any folder easily.
91: It is relative, so the project can be moved to a new location with ease.
92: (0 folder levels below this file. DO NOT ALTER FOLDER / FILE STRUCTURE OF THE PROJECT!)
93: '''
94: ROOT_PATH = go_to_parent_folder(1, os.path.realpath(__file__)).replace("\\", "/")
95: 
96: '''
97: Directory to place type inference files
98: '''
99: TYPE_INFERENCE_PATH = "/type_inference"
100: 
101: '''
102: Location of rule files (relative to the ROOT_PATH)
103: '''
104: RULE_FILE_PATH = "/python_lib/type_rules/modules/"
105: 
106: '''
107: Log file data
108: '''
109: LOG_PATH = ROOT_PATH + "/log/logfiles/"
110: ERROR_LOG_FILE = "error.log"
111: WARNING_LOG_FILE = "warning.log"
112: INFO_LOG_FILE = "info.log"
113: 
114: '''
115: Enable coding advices (coding style messages, not really warnings nor errors)
116: '''
117: ENABLE_CODING_ADVICES = False
118: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1, 0))

# 'import os' statement (line 1)
import os

import_module(stypy.reporting.localization.Localization(__file__, 1, 0), 'os', os, module_type_store)

str_1375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6, (-1)), 'str', '\nStypy can generate various files from an existing .py programs, all with its own purpose. Each generated file name\nis the same as the original one, but adding a prefix. These are the prefixes added for each file type\n')

# Assigning a Str to a Name (line 7):
str_1376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7, 37), 'str', '.stypy')
# Assigning a type to the variable 'type_inference_file_directory_name' (line 7)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7, 0), 'type_inference_file_directory_name', str_1376)

# Assigning a Str to a Name (line 8):
str_1377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 8, 30), 'str', '__type_inference')
# Assigning a type to the variable 'type_inference_file_postfix' (line 8)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 8, 0), 'type_inference_file_postfix', str_1377)

# Assigning a Str to a Name (line 9):
str_1378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 9, 29), 'str', '__type_modifiers')
# Assigning a type to the variable 'type_modifier_file_postfix' (line 9)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 9, 0), 'type_modifier_file_postfix', str_1378)

# Assigning a Str to a Name (line 10):
str_1379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 10, 39), 'str', '__type_data_autogenerator')
# Assigning a type to the variable 'type_data_autogenerator_file_postfix' (line 10)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 10, 0), 'type_data_autogenerator_file_postfix', str_1379)

# Assigning a Str to a Name (line 11):
str_1380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 11, 25), 'str', '__type_data')
# Assigning a type to the variable 'type_data_file_postfix' (line 11)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 11, 0), 'type_data_file_postfix', str_1380)

# Assigning a Str to a Name (line 12):
str_1381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 12, 31), 'str', '__type_annotation')
# Assigning a type to the variable 'type_annotation_file_postfix' (line 12)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 12, 0), 'type_annotation_file_postfix', str_1381)

# Assigning a Str to a Name (line 13):
str_1382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 13, 25), 'str', '__type_rules')
# Assigning a type to the variable 'type_rule_file_postfix' (line 13)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 13, 0), 'type_rule_file_postfix', str_1382)
str_1383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 17, (-1)), 'str', '\nHelper functions to deal with files, folders and locations of generated programs\n')

@norecursion
def go_to_parent_folder(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'go_to_parent_folder'
    module_type_store = module_type_store.open_function_context('go_to_parent_folder', 20, 0, False)
    
    # Passed parameters checking function
    go_to_parent_folder.stypy_localization = localization
    go_to_parent_folder.stypy_type_of_self = None
    go_to_parent_folder.stypy_type_store = module_type_store
    go_to_parent_folder.stypy_function_name = 'go_to_parent_folder'
    go_to_parent_folder.stypy_param_names_list = ['num_levels', 'path']
    go_to_parent_folder.stypy_varargs_param_name = None
    go_to_parent_folder.stypy_kwargs_param_name = None
    go_to_parent_folder.stypy_call_defaults = defaults
    go_to_parent_folder.stypy_call_varargs = varargs
    go_to_parent_folder.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'go_to_parent_folder', ['num_levels', 'path'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'go_to_parent_folder', localization, ['num_levels', 'path'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'go_to_parent_folder(...)' code ##################

    str_1384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, (-1)), 'str', '\n    Ascend up to num_levels folders in the specified path\n    ')
    
    
    # Call to range(...): (line 24)
    # Processing the call arguments (line 24)
    # Getting the type of 'num_levels' (line 24)
    num_levels_1386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 24, 19), 'num_levels', False)
    # Processing the call keyword arguments (line 24)
    kwargs_1387 = {}
    # Getting the type of 'range' (line 24)
    range_1385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 24, 13), 'range', False)
    # Calling range(args, kwargs) (line 24)
    range_call_result_1388 = invoke(stypy.reporting.localization.Localization(__file__, 24, 13), range_1385, *[num_levels_1386], **kwargs_1387)
    
    # Assigning a type to the variable 'range_call_result_1388' (line 24)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 24, 4), 'range_call_result_1388', range_call_result_1388)
    # Testing if the for loop is going to be iterated (line 24)
    # Testing the type of a for loop iterable (line 24)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 24, 4), range_call_result_1388)

    if will_iterate_loop(stypy.reporting.localization.Localization(__file__, 24, 4), range_call_result_1388):
        # Getting the type of the for loop variable (line 24)
        for_loop_var_1389 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 24, 4), range_call_result_1388)
        # Assigning a type to the variable 'i' (line 24)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 24, 4), 'i', for_loop_var_1389)
        # SSA begins for a for statement (line 24)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 25):
        
        # Call to dirname(...): (line 25)
        # Processing the call arguments (line 25)
        # Getting the type of 'path' (line 25)
        path_1393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 25, 31), 'path', False)
        # Processing the call keyword arguments (line 25)
        kwargs_1394 = {}
        # Getting the type of 'os' (line 25)
        os_1390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 25, 15), 'os', False)
        # Obtaining the member 'path' of a type (line 25)
        path_1391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 25, 15), os_1390, 'path')
        # Obtaining the member 'dirname' of a type (line 25)
        dirname_1392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 25, 15), path_1391, 'dirname')
        # Calling dirname(args, kwargs) (line 25)
        dirname_call_result_1395 = invoke(stypy.reporting.localization.Localization(__file__, 25, 15), dirname_1392, *[path_1393], **kwargs_1394)
        
        # Assigning a type to the variable 'path' (line 25)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 25, 8), 'path', dirname_call_result_1395)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()

    
    # Getting the type of 'path' (line 27)
    path_1396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 27, 11), 'path')
    # Assigning a type to the variable 'stypy_return_type' (line 27)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 4), 'stypy_return_type', path_1396)
    
    # ################# End of 'go_to_parent_folder(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'go_to_parent_folder' in the type store
    # Getting the type of 'stypy_return_type' (line 20)
    stypy_return_type_1397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 20, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_1397)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'go_to_parent_folder'
    return stypy_return_type_1397

# Assigning a type to the variable 'go_to_parent_folder' (line 20)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 20, 0), 'go_to_parent_folder', go_to_parent_folder)

@norecursion
def __get_derived_file_path(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '__get_derived_file_path'
    module_type_store = module_type_store.open_function_context('__get_derived_file_path', 30, 0, False)
    
    # Passed parameters checking function
    __get_derived_file_path.stypy_localization = localization
    __get_derived_file_path.stypy_type_of_self = None
    __get_derived_file_path.stypy_type_store = module_type_store
    __get_derived_file_path.stypy_function_name = '__get_derived_file_path'
    __get_derived_file_path.stypy_param_names_list = ['source_file_path', 'output_file_postfix']
    __get_derived_file_path.stypy_varargs_param_name = None
    __get_derived_file_path.stypy_kwargs_param_name = None
    __get_derived_file_path.stypy_call_defaults = defaults
    __get_derived_file_path.stypy_call_varargs = varargs
    __get_derived_file_path.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '__get_derived_file_path', ['source_file_path', 'output_file_postfix'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '__get_derived_file_path', localization, ['source_file_path', 'output_file_postfix'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '__get_derived_file_path(...)' code ##################

    str_1398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, (-1)), 'str', '\n    From a .py file, obtains the path of the corresponding files generated by stypy for various reasons\n    ')
    
    # Assigning a Call to a Name (line 34):
    
    # Call to dirname(...): (line 34)
    # Processing the call arguments (line 34)
    # Getting the type of 'source_file_path' (line 34)
    source_file_path_1402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 34, 30), 'source_file_path', False)
    # Processing the call keyword arguments (line 34)
    kwargs_1403 = {}
    # Getting the type of 'os' (line 34)
    os_1399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 34, 14), 'os', False)
    # Obtaining the member 'path' of a type (line 34)
    path_1400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 34, 14), os_1399, 'path')
    # Obtaining the member 'dirname' of a type (line 34)
    dirname_1401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 34, 14), path_1400, 'dirname')
    # Calling dirname(args, kwargs) (line 34)
    dirname_call_result_1404 = invoke(stypy.reporting.localization.Localization(__file__, 34, 14), dirname_1401, *[source_file_path_1402], **kwargs_1403)
    
    # Assigning a type to the variable 'dirname' (line 34)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 4), 'dirname', dirname_call_result_1404)
    
    # Assigning a Subscript to a Name (line 35):
    
    # Obtaining the type of the subscript
    int_1405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 58), 'int')
    
    # Call to split(...): (line 35)
    # Processing the call arguments (line 35)
    str_1415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 53), 'str', '.')
    # Processing the call keyword arguments (line 35)
    kwargs_1416 = {}
    
    # Obtaining the type of the subscript
    int_1406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 43), 'int')
    
    # Call to split(...): (line 35)
    # Processing the call arguments (line 35)
    str_1409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 38), 'str', '/')
    # Processing the call keyword arguments (line 35)
    kwargs_1410 = {}
    # Getting the type of 'source_file_path' (line 35)
    source_file_path_1407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 35, 15), 'source_file_path', False)
    # Obtaining the member 'split' of a type (line 35)
    split_1408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 35, 15), source_file_path_1407, 'split')
    # Calling split(args, kwargs) (line 35)
    split_call_result_1411 = invoke(stypy.reporting.localization.Localization(__file__, 35, 15), split_1408, *[str_1409], **kwargs_1410)
    
    # Obtaining the member '__getitem__' of a type (line 35)
    getitem___1412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 35, 15), split_call_result_1411, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 35)
    subscript_call_result_1413 = invoke(stypy.reporting.localization.Localization(__file__, 35, 15), getitem___1412, int_1406)
    
    # Obtaining the member 'split' of a type (line 35)
    split_1414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 35, 15), subscript_call_result_1413, 'split')
    # Calling split(args, kwargs) (line 35)
    split_call_result_1417 = invoke(stypy.reporting.localization.Localization(__file__, 35, 15), split_1414, *[str_1415], **kwargs_1416)
    
    # Obtaining the member '__getitem__' of a type (line 35)
    getitem___1418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 35, 15), split_call_result_1417, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 35)
    subscript_call_result_1419 = invoke(stypy.reporting.localization.Localization(__file__, 35, 15), getitem___1418, int_1405)
    
    # Assigning a type to the variable 'filename' (line 35)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 35, 4), 'filename', subscript_call_result_1419)
    
    # Assigning a BinOp to a Name (line 36):
    # Getting the type of 'dirname' (line 36)
    dirname_1420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 11), 'dirname')
    str_1421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 21), 'str', '/')
    # Applying the binary operator '+' (line 36)
    result_add_1422 = python_operator(stypy.reporting.localization.Localization(__file__, 36, 11), '+', dirname_1420, str_1421)
    
    # Getting the type of 'type_inference_file_directory_name' (line 36)
    type_inference_file_directory_name_1423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 27), 'type_inference_file_directory_name')
    # Applying the binary operator '+' (line 36)
    result_add_1424 = python_operator(stypy.reporting.localization.Localization(__file__, 36, 25), '+', result_add_1422, type_inference_file_directory_name_1423)
    
    str_1425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 64), 'str', '/')
    # Applying the binary operator '+' (line 36)
    result_add_1426 = python_operator(stypy.reporting.localization.Localization(__file__, 36, 62), '+', result_add_1424, str_1425)
    
    # Getting the type of 'filename' (line 36)
    filename_1427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 70), 'filename')
    # Applying the binary operator '+' (line 36)
    result_add_1428 = python_operator(stypy.reporting.localization.Localization(__file__, 36, 68), '+', result_add_1426, filename_1427)
    
    # Getting the type of 'output_file_postfix' (line 36)
    output_file_postfix_1429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 81), 'output_file_postfix')
    # Applying the binary operator '+' (line 36)
    result_add_1430 = python_operator(stypy.reporting.localization.Localization(__file__, 36, 79), '+', result_add_1428, output_file_postfix_1429)
    
    str_1431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 103), 'str', '.py')
    # Applying the binary operator '+' (line 36)
    result_add_1432 = python_operator(stypy.reporting.localization.Localization(__file__, 36, 101), '+', result_add_1430, str_1431)
    
    # Assigning a type to the variable 'path' (line 36)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 36, 4), 'path', result_add_1432)
    # Getting the type of 'path' (line 38)
    path_1433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 38, 11), 'path')
    # Assigning a type to the variable 'stypy_return_type' (line 38)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 38, 4), 'stypy_return_type', path_1433)
    
    # ################# End of '__get_derived_file_path(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '__get_derived_file_path' in the type store
    # Getting the type of 'stypy_return_type' (line 30)
    stypy_return_type_1434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 30, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_1434)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '__get_derived_file_path'
    return stypy_return_type_1434

# Assigning a type to the variable '__get_derived_file_path' (line 30)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 30, 0), '__get_derived_file_path', __get_derived_file_path)

@norecursion
def get_original_program_from_type_inference_file(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_original_program_from_type_inference_file'
    module_type_store = module_type_store.open_function_context('get_original_program_from_type_inference_file', 41, 0, False)
    
    # Passed parameters checking function
    get_original_program_from_type_inference_file.stypy_localization = localization
    get_original_program_from_type_inference_file.stypy_type_of_self = None
    get_original_program_from_type_inference_file.stypy_type_store = module_type_store
    get_original_program_from_type_inference_file.stypy_function_name = 'get_original_program_from_type_inference_file'
    get_original_program_from_type_inference_file.stypy_param_names_list = ['ti_file_path']
    get_original_program_from_type_inference_file.stypy_varargs_param_name = None
    get_original_program_from_type_inference_file.stypy_kwargs_param_name = None
    get_original_program_from_type_inference_file.stypy_call_defaults = defaults
    get_original_program_from_type_inference_file.stypy_call_varargs = varargs
    get_original_program_from_type_inference_file.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_original_program_from_type_inference_file', ['ti_file_path'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_original_program_from_type_inference_file', localization, ['ti_file_path'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_original_program_from_type_inference_file(...)' code ##################

    str_1435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, (-1)), 'str', '\n    Obtain the original file from a type inference file path generated from it\n    ')
    
    # Assigning a Call to a Name (line 45):
    
    # Call to replace(...): (line 45)
    # Processing the call arguments (line 45)
    # Getting the type of 'type_inference_file_postfix' (line 45)
    type_inference_file_postfix_1438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 45, 32), 'type_inference_file_postfix', False)
    str_1439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 61), 'str', '')
    # Processing the call keyword arguments (line 45)
    kwargs_1440 = {}
    # Getting the type of 'ti_file_path' (line 45)
    ti_file_path_1436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 45, 11), 'ti_file_path', False)
    # Obtaining the member 'replace' of a type (line 45)
    replace_1437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 45, 11), ti_file_path_1436, 'replace')
    # Calling replace(args, kwargs) (line 45)
    replace_call_result_1441 = invoke(stypy.reporting.localization.Localization(__file__, 45, 11), replace_1437, *[type_inference_file_postfix_1438, str_1439], **kwargs_1440)
    
    # Assigning a type to the variable 'path' (line 45)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 45, 4), 'path', replace_call_result_1441)
    
    # Assigning a Call to a Name (line 46):
    
    # Call to replace(...): (line 46)
    # Processing the call arguments (line 46)
    # Getting the type of 'TYPE_INFERENCE_PATH' (line 46)
    TYPE_INFERENCE_PATH_1444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 24), 'TYPE_INFERENCE_PATH', False)
    str_1445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 45), 'str', '')
    # Processing the call keyword arguments (line 46)
    kwargs_1446 = {}
    # Getting the type of 'path' (line 46)
    path_1442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 11), 'path', False)
    # Obtaining the member 'replace' of a type (line 46)
    replace_1443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 46, 11), path_1442, 'replace')
    # Calling replace(args, kwargs) (line 46)
    replace_call_result_1447 = invoke(stypy.reporting.localization.Localization(__file__, 46, 11), replace_1443, *[TYPE_INFERENCE_PATH_1444, str_1445], **kwargs_1446)
    
    # Assigning a type to the variable 'path' (line 46)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 46, 4), 'path', replace_call_result_1447)
    
    # Assigning a Call to a Name (line 47):
    
    # Call to replace(...): (line 47)
    # Processing the call arguments (line 47)
    str_1450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 24), 'str', '\\')
    str_1451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 30), 'str', '/')
    # Processing the call keyword arguments (line 47)
    kwargs_1452 = {}
    # Getting the type of 'path' (line 47)
    path_1448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 11), 'path', False)
    # Obtaining the member 'replace' of a type (line 47)
    replace_1449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 47, 11), path_1448, 'replace')
    # Calling replace(args, kwargs) (line 47)
    replace_call_result_1453 = invoke(stypy.reporting.localization.Localization(__file__, 47, 11), replace_1449, *[str_1450, str_1451], **kwargs_1452)
    
    # Assigning a type to the variable 'path' (line 47)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 47, 4), 'path', replace_call_result_1453)
    # Getting the type of 'path' (line 49)
    path_1454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 49, 11), 'path')
    # Assigning a type to the variable 'stypy_return_type' (line 49)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 49, 4), 'stypy_return_type', path_1454)
    
    # ################# End of 'get_original_program_from_type_inference_file(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_original_program_from_type_inference_file' in the type store
    # Getting the type of 'stypy_return_type' (line 41)
    stypy_return_type_1455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 41, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_1455)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_original_program_from_type_inference_file'
    return stypy_return_type_1455

# Assigning a type to the variable 'get_original_program_from_type_inference_file' (line 41)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 41, 0), 'get_original_program_from_type_inference_file', get_original_program_from_type_inference_file)

@norecursion
def get_stypy_type_inference_program_file_path(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_stypy_type_inference_program_file_path'
    module_type_store = module_type_store.open_function_context('get_stypy_type_inference_program_file_path', 52, 0, False)
    
    # Passed parameters checking function
    get_stypy_type_inference_program_file_path.stypy_localization = localization
    get_stypy_type_inference_program_file_path.stypy_type_of_self = None
    get_stypy_type_inference_program_file_path.stypy_type_store = module_type_store
    get_stypy_type_inference_program_file_path.stypy_function_name = 'get_stypy_type_inference_program_file_path'
    get_stypy_type_inference_program_file_path.stypy_param_names_list = ['source_file_path']
    get_stypy_type_inference_program_file_path.stypy_varargs_param_name = None
    get_stypy_type_inference_program_file_path.stypy_kwargs_param_name = None
    get_stypy_type_inference_program_file_path.stypy_call_defaults = defaults
    get_stypy_type_inference_program_file_path.stypy_call_varargs = varargs
    get_stypy_type_inference_program_file_path.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_stypy_type_inference_program_file_path', ['source_file_path'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_stypy_type_inference_program_file_path', localization, ['source_file_path'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_stypy_type_inference_program_file_path(...)' code ##################

    str_1456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 55, (-1)), 'str', '\n    Get the location of the type inference program obtained for a .py file\n    ')
    
    # Call to __get_derived_file_path(...): (line 56)
    # Processing the call arguments (line 56)
    # Getting the type of 'source_file_path' (line 56)
    source_file_path_1458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 56, 35), 'source_file_path', False)
    # Getting the type of 'type_inference_file_postfix' (line 56)
    type_inference_file_postfix_1459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 56, 53), 'type_inference_file_postfix', False)
    # Processing the call keyword arguments (line 56)
    kwargs_1460 = {}
    # Getting the type of '__get_derived_file_path' (line 56)
    get_derived_file_path_1457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 56, 11), '__get_derived_file_path', False)
    # Calling __get_derived_file_path(args, kwargs) (line 56)
    get_derived_file_path_call_result_1461 = invoke(stypy.reporting.localization.Localization(__file__, 56, 11), get_derived_file_path_1457, *[source_file_path_1458, type_inference_file_postfix_1459], **kwargs_1460)
    
    # Assigning a type to the variable 'stypy_return_type' (line 56)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 56, 4), 'stypy_return_type', get_derived_file_path_call_result_1461)
    
    # ################# End of 'get_stypy_type_inference_program_file_path(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_stypy_type_inference_program_file_path' in the type store
    # Getting the type of 'stypy_return_type' (line 52)
    stypy_return_type_1462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_1462)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_stypy_type_inference_program_file_path'
    return stypy_return_type_1462

# Assigning a type to the variable 'get_stypy_type_inference_program_file_path' (line 52)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 52, 0), 'get_stypy_type_inference_program_file_path', get_stypy_type_inference_program_file_path)

@norecursion
def get_stypy_type_data_autogenerator_program_file_path(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_stypy_type_data_autogenerator_program_file_path'
    module_type_store = module_type_store.open_function_context('get_stypy_type_data_autogenerator_program_file_path', 59, 0, False)
    
    # Passed parameters checking function
    get_stypy_type_data_autogenerator_program_file_path.stypy_localization = localization
    get_stypy_type_data_autogenerator_program_file_path.stypy_type_of_self = None
    get_stypy_type_data_autogenerator_program_file_path.stypy_type_store = module_type_store
    get_stypy_type_data_autogenerator_program_file_path.stypy_function_name = 'get_stypy_type_data_autogenerator_program_file_path'
    get_stypy_type_data_autogenerator_program_file_path.stypy_param_names_list = ['source_file_path']
    get_stypy_type_data_autogenerator_program_file_path.stypy_varargs_param_name = None
    get_stypy_type_data_autogenerator_program_file_path.stypy_kwargs_param_name = None
    get_stypy_type_data_autogenerator_program_file_path.stypy_call_defaults = defaults
    get_stypy_type_data_autogenerator_program_file_path.stypy_call_varargs = varargs
    get_stypy_type_data_autogenerator_program_file_path.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_stypy_type_data_autogenerator_program_file_path', ['source_file_path'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_stypy_type_data_autogenerator_program_file_path', localization, ['source_file_path'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_stypy_type_data_autogenerator_program_file_path(...)' code ##################

    str_1463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 63, (-1)), 'str', '\n    Get the location of the type data auto-generation program obtained for a .py file\n    These files are only used for code generation testing, they are not really a part of stypy\n    ')
    
    # Call to __get_derived_file_path(...): (line 64)
    # Processing the call arguments (line 64)
    # Getting the type of 'source_file_path' (line 64)
    source_file_path_1465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 64, 35), 'source_file_path', False)
    # Getting the type of 'type_data_autogenerator_file_postfix' (line 64)
    type_data_autogenerator_file_postfix_1466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 64, 53), 'type_data_autogenerator_file_postfix', False)
    # Processing the call keyword arguments (line 64)
    kwargs_1467 = {}
    # Getting the type of '__get_derived_file_path' (line 64)
    get_derived_file_path_1464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 64, 11), '__get_derived_file_path', False)
    # Calling __get_derived_file_path(args, kwargs) (line 64)
    get_derived_file_path_call_result_1468 = invoke(stypy.reporting.localization.Localization(__file__, 64, 11), get_derived_file_path_1464, *[source_file_path_1465, type_data_autogenerator_file_postfix_1466], **kwargs_1467)
    
    # Assigning a type to the variable 'stypy_return_type' (line 64)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 64, 4), 'stypy_return_type', get_derived_file_path_call_result_1468)
    
    # ################# End of 'get_stypy_type_data_autogenerator_program_file_path(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_stypy_type_data_autogenerator_program_file_path' in the type store
    # Getting the type of 'stypy_return_type' (line 59)
    stypy_return_type_1469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_1469)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_stypy_type_data_autogenerator_program_file_path'
    return stypy_return_type_1469

# Assigning a type to the variable 'get_stypy_type_data_autogenerator_program_file_path' (line 59)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 59, 0), 'get_stypy_type_data_autogenerator_program_file_path', get_stypy_type_data_autogenerator_program_file_path)

@norecursion
def get_stypy_type_data_file_path(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_stypy_type_data_file_path'
    module_type_store = module_type_store.open_function_context('get_stypy_type_data_file_path', 67, 0, False)
    
    # Passed parameters checking function
    get_stypy_type_data_file_path.stypy_localization = localization
    get_stypy_type_data_file_path.stypy_type_of_self = None
    get_stypy_type_data_file_path.stypy_type_store = module_type_store
    get_stypy_type_data_file_path.stypy_function_name = 'get_stypy_type_data_file_path'
    get_stypy_type_data_file_path.stypy_param_names_list = ['source_file_path']
    get_stypy_type_data_file_path.stypy_varargs_param_name = None
    get_stypy_type_data_file_path.stypy_kwargs_param_name = None
    get_stypy_type_data_file_path.stypy_call_defaults = defaults
    get_stypy_type_data_file_path.stypy_call_varargs = varargs
    get_stypy_type_data_file_path.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_stypy_type_data_file_path', ['source_file_path'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_stypy_type_data_file_path', localization, ['source_file_path'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_stypy_type_data_file_path(...)' code ##################

    str_1470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 71, (-1)), 'str', '\n    Get the location of the type data file obtained for a .py file\n    These files are only used for code generation testing, they are not really a part of stypy\n    ')
    
    # Call to __get_derived_file_path(...): (line 72)
    # Processing the call arguments (line 72)
    # Getting the type of 'source_file_path' (line 72)
    source_file_path_1472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 35), 'source_file_path', False)
    # Getting the type of 'type_data_file_postfix' (line 72)
    type_data_file_postfix_1473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 53), 'type_data_file_postfix', False)
    # Processing the call keyword arguments (line 72)
    kwargs_1474 = {}
    # Getting the type of '__get_derived_file_path' (line 72)
    get_derived_file_path_1471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 11), '__get_derived_file_path', False)
    # Calling __get_derived_file_path(args, kwargs) (line 72)
    get_derived_file_path_call_result_1475 = invoke(stypy.reporting.localization.Localization(__file__, 72, 11), get_derived_file_path_1471, *[source_file_path_1472, type_data_file_postfix_1473], **kwargs_1474)
    
    # Assigning a type to the variable 'stypy_return_type' (line 72)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 72, 4), 'stypy_return_type', get_derived_file_path_call_result_1475)
    
    # ################# End of 'get_stypy_type_data_file_path(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_stypy_type_data_file_path' in the type store
    # Getting the type of 'stypy_return_type' (line 67)
    stypy_return_type_1476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 67, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_1476)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_stypy_type_data_file_path'
    return stypy_return_type_1476

# Assigning a type to the variable 'get_stypy_type_data_file_path' (line 67)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 67, 0), 'get_stypy_type_data_file_path', get_stypy_type_data_file_path)

@norecursion
def get_stypy_type_annotation_file_path(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_stypy_type_annotation_file_path'
    module_type_store = module_type_store.open_function_context('get_stypy_type_annotation_file_path', 75, 0, False)
    
    # Passed parameters checking function
    get_stypy_type_annotation_file_path.stypy_localization = localization
    get_stypy_type_annotation_file_path.stypy_type_of_self = None
    get_stypy_type_annotation_file_path.stypy_type_store = module_type_store
    get_stypy_type_annotation_file_path.stypy_function_name = 'get_stypy_type_annotation_file_path'
    get_stypy_type_annotation_file_path.stypy_param_names_list = ['source_file_path']
    get_stypy_type_annotation_file_path.stypy_varargs_param_name = None
    get_stypy_type_annotation_file_path.stypy_kwargs_param_name = None
    get_stypy_type_annotation_file_path.stypy_call_defaults = defaults
    get_stypy_type_annotation_file_path.stypy_call_varargs = varargs
    get_stypy_type_annotation_file_path.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_stypy_type_annotation_file_path', ['source_file_path'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_stypy_type_annotation_file_path', localization, ['source_file_path'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_stypy_type_annotation_file_path(...)' code ##################

    str_1477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 79, (-1)), 'str', '\n    Get the location of the type annotated file obtained for a .py file\n    These files are only used for code generation testing, they are not really a part of stypy\n    ')
    
    # Call to __get_derived_file_path(...): (line 80)
    # Processing the call arguments (line 80)
    # Getting the type of 'source_file_path' (line 80)
    source_file_path_1479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 35), 'source_file_path', False)
    # Getting the type of 'type_annotation_file_postfix' (line 80)
    type_annotation_file_postfix_1480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 53), 'type_annotation_file_postfix', False)
    # Processing the call keyword arguments (line 80)
    kwargs_1481 = {}
    # Getting the type of '__get_derived_file_path' (line 80)
    get_derived_file_path_1478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 11), '__get_derived_file_path', False)
    # Calling __get_derived_file_path(args, kwargs) (line 80)
    get_derived_file_path_call_result_1482 = invoke(stypy.reporting.localization.Localization(__file__, 80, 11), get_derived_file_path_1478, *[source_file_path_1479, type_annotation_file_postfix_1480], **kwargs_1481)
    
    # Assigning a type to the variable 'stypy_return_type' (line 80)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 80, 4), 'stypy_return_type', get_derived_file_path_call_result_1482)
    
    # ################# End of 'get_stypy_type_annotation_file_path(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_stypy_type_annotation_file_path' in the type store
    # Getting the type of 'stypy_return_type' (line 75)
    stypy_return_type_1483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_1483)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_stypy_type_annotation_file_path'
    return stypy_return_type_1483

# Assigning a type to the variable 'get_stypy_type_annotation_file_path' (line 75)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 0), 'get_stypy_type_annotation_file_path', get_stypy_type_annotation_file_path)
str_1484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, (-1)), 'str', '\nPython executable to use\n')

# Assigning a Str to a Name (line 86):
str_1485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 86, 18), 'str', 'C:/Python27/')
# Assigning a type to the variable 'PYTHON_EXE_PATH' (line 86)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 86, 0), 'PYTHON_EXE_PATH', str_1485)

# Assigning a BinOp to a Name (line 87):
# Getting the type of 'PYTHON_EXE_PATH' (line 87)
PYTHON_EXE_PATH_1486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 87, 13), 'PYTHON_EXE_PATH')
str_1487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 87, 31), 'str', 'python.exe')
# Applying the binary operator '+' (line 87)
result_add_1488 = python_operator(stypy.reporting.localization.Localization(__file__, 87, 13), '+', PYTHON_EXE_PATH_1486, str_1487)

# Assigning a type to the variable 'PYTHON_EXE' (line 87)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 87, 0), 'PYTHON_EXE', result_add_1488)
str_1489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 93, (-1)), 'str', '\nRoot folder of the project, to place the parameters file in any folder easily.\nIt is relative, so the project can be moved to a new location with ease.\n(0 folder levels below this file. DO NOT ALTER FOLDER / FILE STRUCTURE OF THE PROJECT!)\n')

# Assigning a Call to a Name (line 94):

# Call to replace(...): (line 94)
# Processing the call arguments (line 94)
str_1501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 71), 'str', '\\')
str_1502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 77), 'str', '/')
# Processing the call keyword arguments (line 94)
kwargs_1503 = {}

# Call to go_to_parent_folder(...): (line 94)
# Processing the call arguments (line 94)
int_1491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 32), 'int')

# Call to realpath(...): (line 94)
# Processing the call arguments (line 94)
# Getting the type of '__file__' (line 94)
file___1495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 52), '__file__', False)
# Processing the call keyword arguments (line 94)
kwargs_1496 = {}
# Getting the type of 'os' (line 94)
os_1492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 35), 'os', False)
# Obtaining the member 'path' of a type (line 94)
path_1493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 94, 35), os_1492, 'path')
# Obtaining the member 'realpath' of a type (line 94)
realpath_1494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 94, 35), path_1493, 'realpath')
# Calling realpath(args, kwargs) (line 94)
realpath_call_result_1497 = invoke(stypy.reporting.localization.Localization(__file__, 94, 35), realpath_1494, *[file___1495], **kwargs_1496)

# Processing the call keyword arguments (line 94)
kwargs_1498 = {}
# Getting the type of 'go_to_parent_folder' (line 94)
go_to_parent_folder_1490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 12), 'go_to_parent_folder', False)
# Calling go_to_parent_folder(args, kwargs) (line 94)
go_to_parent_folder_call_result_1499 = invoke(stypy.reporting.localization.Localization(__file__, 94, 12), go_to_parent_folder_1490, *[int_1491, realpath_call_result_1497], **kwargs_1498)

# Obtaining the member 'replace' of a type (line 94)
replace_1500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 94, 12), go_to_parent_folder_call_result_1499, 'replace')
# Calling replace(args, kwargs) (line 94)
replace_call_result_1504 = invoke(stypy.reporting.localization.Localization(__file__, 94, 12), replace_1500, *[str_1501, str_1502], **kwargs_1503)

# Assigning a type to the variable 'ROOT_PATH' (line 94)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 94, 0), 'ROOT_PATH', replace_call_result_1504)
str_1505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, (-1)), 'str', '\nDirectory to place type inference files\n')

# Assigning a Str to a Name (line 99):
str_1506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 99, 22), 'str', '/type_inference')
# Assigning a type to the variable 'TYPE_INFERENCE_PATH' (line 99)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 99, 0), 'TYPE_INFERENCE_PATH', str_1506)
str_1507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, (-1)), 'str', '\nLocation of rule files (relative to the ROOT_PATH)\n')

# Assigning a Str to a Name (line 104):
str_1508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 17), 'str', '/python_lib/type_rules/modules/')
# Assigning a type to the variable 'RULE_FILE_PATH' (line 104)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 0), 'RULE_FILE_PATH', str_1508)
str_1509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 108, (-1)), 'str', '\nLog file data\n')

# Assigning a BinOp to a Name (line 109):
# Getting the type of 'ROOT_PATH' (line 109)
ROOT_PATH_1510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 11), 'ROOT_PATH')
str_1511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 109, 23), 'str', '/log/logfiles/')
# Applying the binary operator '+' (line 109)
result_add_1512 = python_operator(stypy.reporting.localization.Localization(__file__, 109, 11), '+', ROOT_PATH_1510, str_1511)

# Assigning a type to the variable 'LOG_PATH' (line 109)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 109, 0), 'LOG_PATH', result_add_1512)

# Assigning a Str to a Name (line 110):
str_1513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 110, 17), 'str', 'error.log')
# Assigning a type to the variable 'ERROR_LOG_FILE' (line 110)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 110, 0), 'ERROR_LOG_FILE', str_1513)

# Assigning a Str to a Name (line 111):
str_1514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 111, 19), 'str', 'warning.log')
# Assigning a type to the variable 'WARNING_LOG_FILE' (line 111)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 111, 0), 'WARNING_LOG_FILE', str_1514)

# Assigning a Str to a Name (line 112):
str_1515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 112, 16), 'str', 'info.log')
# Assigning a type to the variable 'INFO_LOG_FILE' (line 112)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 112, 0), 'INFO_LOG_FILE', str_1515)
str_1516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 116, (-1)), 'str', '\nEnable coding advices (coding style messages, not really warnings nor errors)\n')

# Assigning a Name to a Name (line 117):
# Getting the type of 'False' (line 117)
False_1517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 24), 'False')
# Assigning a type to the variable 'ENABLE_CODING_ADVICES' (line 117)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 117, 0), 'ENABLE_CODING_ADVICES', False_1517)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
