
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: import sys
2: import time
3: import imp
4: import ast
5: 
6: from visitor_copy.type_inference_copy import type_inference_visitor_copy
7: from visitor_copy.python_src_generation_copy.python_src_generator_visitor_copy import PythonSrcGeneratorVisitor
8: from visitor_copy.python_type_data_autogeneration_copy.python_type_data_autogeneration_visitor_copy import *
9: from visitor_copy.type_inference_copy.visitor_utils_copy.stypy_functions_copy import default_module_type_store_var_name, \
10:       default_type_error_var_name, default_type_warning_var_name
11: from visitor_copy.python_src_print_copy.python_src_print_visitor_copy import dump_ast
12: from stypy_parameters_copy import *
13: from visitor_copy.type_inference_copy.desugaring_copy import multiple_assignments_visitor_copy
14: from visitor_copy.type_inference_copy.desugaring_copy import class_attributes_visitor_copy
15: from visitor_copy.type_inference_copy.desugaring_copy import class__init__visitor_copy
16: from visitor_copy.type_annotation_copy.type_annotation_visitor_copy import TypeAnnotationVisitor
17: import type_store_copy
18: from python_lib_copy.python_types_copy import type_inference_copy
19: from log_copy import logging_console_copy
20: from code_generation_copy.source_code_writer_copy import write_python_source_code
21: 
22: 
23: '''
24: Assigning log functions
25: '''
26: info = logging_console_copy.info
27: ok = logging_console_copy.ok
28: error = logging_console_copy.error
29: warning = logging_console_copy.warning
30: 
31: "Null log functions when log is disabled"
32: 
33: 
34: def f():
35:     pass
36: 
37: 
38: reset_logs = f
39: 
40: 
41: def void_print_func(*args):
42:     pass
43: 
44: 
45: class Stypy:
46:     '''
47:     Main class for the stypy type-inference Python system. It controls all the interaction with Python source code files
48:     and stypy runtime. From a Python source file it:
49:     - Parses the file and generates an equivalent type-inference program. This program can be executed to tell the
50:     original program type errors
51:     - Optionally generates a type annotated Python source file identical to the original one but with types assigned
52:     to all its variables. It is the same functionality that stypy provides, but written into suitable places of a copy
53:     of the original file instead of reporting types and type errors via console. It is helpful for debuggin purposes
54:     and in the future it can be adapted to follow PEP 0484 (Type hints) https://www.python.org/dev/peps/pep-0484/
55:     - Optionally generates a version of the original program that calculates a table of variables and its runtime types.
56:     It does not work on 100% of the cases, its implementation is rather basic and may fail with some program constructs,
57:     but it help to generate tables of types that later on can be used to unit test generated type inference programs.
58:     '''
59: 
60:     # ##################################### PRIVATE METHODS ######################################
61: 
62:     def __read_new_ast_from_file(self):
63:         '''
64:         Reads the AST of the source Python file
65:         :return:
66:         '''
67:         return ast.parse(self.original_program_src)
68: 
69:     def __get_original_source_file_ast(self):
70:         '''
71:         Returns the AST of the source Python file
72:         :return:
73:         '''
74:         return self.original_ast_tree
75: 
76:     @staticmethod
77:     def __run_program(file_path):
78:         '''
79:         Runs a Python program importing its source code and providing fresh locals() and globals() environments. It is
80:         used to execute the various Python programs that stypy generates if needed.
81:         :param file_path:
82:         :return:
83:         '''
84:         my_globals = globals()
85:         my_globals["__file__"] = file_path
86: 
87:         my_locals = dict()
88: 
89:         dirname = os.path.dirname(file_path)
90:         source_file = file_path.split('/')[-1][0:-3]
91: 
92:         sys.path.append(dirname)
93:         __import__(source_file, my_globals, my_locals)
94: 
95:     def __run_type_inference_program(self, file_path):
96:         '''
97:         Runs a type inference program generated by stypy by importing it. It provides a fresh globals environment
98:         with initialized __file__ and __name__ environment variables, an empty locals() environment and time-measuring
99:         instrumentation. At the end of the execution, it extracts the generated type store, the type errors and the
100:         type warnings that have been detected.
101:         :param file_path: Program to run
102:         :return:
103:         '''
104:         my_globals = globals()
105:         my_globals["__file__"] = file_path
106:         my_globals['__name__'] = '__main__'
107: 
108:         my_locals = dict()
109: 
110:         #dirname = os.path.dirname(file_path)
111:         source_file = file_path.split('/')[-1][0:-3]
112:         #
113:         # #sys.path.append(dirname)
114:         # sys.path = [dirname] + sys.path
115:         # self.tinit = time.time()
116:         # module = __import__(source_file, my_globals, my_locals)
117:         # self.tend = time.time()
118:         # sys.path.remove(dirname)
119:         module = imp.load_source(source_file, file_path)
120:         try:
121:             # After running the program, extract type inference data
122:             self.analyzed_program_type_store = getattr(module, default_module_type_store_var_name)
123:             self.analyzed_program_errors = getattr(module, default_type_error_var_name)
124:             self.analyzed_program_warnings = getattr(module, default_type_warning_var_name)
125:         except:
126:             self.analyzed_program_type_store = None
127:             self.analyzed_program_errors = []
128:             self.analyzed_program_warnings = []
129: 
130:     @staticmethod
131:     def __is_file_suitable_for_autocalculate_types(file_path):
132:         '''
133:         Determines if a source file is suitable to generate a derived runtime type calculation program. Negative
134:         tests (those that fail at runtime) are not suitable for it because they cannot be fully executed to calculate
135:         the runtime type of its variables. Negative test program name begins with "error_" by convention.
136:         :param file_path: File to test
137:         :return:
138:         '''
139:         return "error_" not in file_path
140: 
141:     @staticmethod
142:     def __configure_stypy_output(verbose):
143:         '''
144:         Configures whether output are displayed on console or are not displayed
145:         :param verbose:
146:         :return:
147:         '''
148:         global info
149:         global ok
150:         global error
151: 
152:         if verbose:
153:             info = sys.stdout.write
154:             ok = sys.stdout.write
155:             error = sys.stderr.write
156:         else:
157:             info = void_print_func
158:             ok = void_print_func
159:             error = void_print_func
160: 
161:     ###################################### PUBLIC METHODS ######################################
162: 
163:     def create_instance(self, source_file_path):
164:         '''
165:         Creates a new instance of the Stypy class using the values of the current stypy instance regarding Python
166:         interpreter, output verbosity and optional file generation. Its purpose is to "spawn" a new Stypy object
167:         for a different source file with the same configuration quickly, in order to parse Python source modules
168:         that are loaded by the main parsed program
169:         :param source_file_path:
170:         :return:
171:         '''
172:         return Stypy(source_file_path, self.python_exe, self.verbose, self.generate_type_data_file)
173: 
174:     def __init__(self, source_file_path, python_exe=PYTHON_EXE, verbose=False,
175:                  generate_type_data_file=False, generate_type_annotated_program=False, show_ast=False,
176:                  regenerate_type_inference_programs=False):
177:         '''
178:         Buils a new Stypy type inference object instance for a certain source program. Creating an equivalent type
179:         inference program.
180:         :param source_file_path: Source program to process and calculate its type inference program
181:         :param python_exe: Python implementation to use (optional, initialized by default to the PYTHON_EXE stypy
182:         parameter)
183:         :param verbose: Output verbosity (True/False)
184:         :param generate_type_data_file: Optionally generate a type data file to perform unit testing over the
185:         generated type inference program. Defaults to False
186:         :param generate_type_annotated_program: Optionally generate a type annotated source file from the original one.
187:         Defaults to False
188:         :param show_ast: Display the AST of the processed source file. Defaults to False
189:         :return:
190:         '''
191:         self.python_exe = python_exe
192:         self.validation_error = ""
193:         self.source_file_path = source_file_path
194:         self.file_ = open(self.source_file_path, 'r')
195:         self.original_program_src = self.file_.read()
196:         self.regenerate_type_inference_programs = regenerate_type_inference_programs
197: 
198:         # Configure all FunctionContext and TypeInferenceProxy objects to use type annotation, that will be later used
199:         # to create type annotated source files
200:         type_store_copy.function_context.FunctionContext.annotate_types = generate_type_annotated_program
201:         type_inference_copy.type_inference_proxy.TypeInferenceProxy.annotate_types = generate_type_annotated_program
202: 
203:         # Output configuration
204:         self.verbose = verbose
205:         Stypy.__configure_stypy_output(verbose)
206: 
207:         try:
208:             # Read the program AST
209:             self.original_ast_tree = self.__read_new_ast_from_file()
210:         except Exception as exc:
211:             error("Python is unable to compile the input file '{0}':\n".format(self.source_file_path) + str(exc))
212:             exit(-1)
213: 
214:         # Sequence of source visitors that will be applied over the original program AST. Those visitor transform the
215:         # program code in various ways, aiming to facilitate the type inference program generation when dealing with
216:         # some Python constructs. Visitors are processed in declaration order. The last one should be the
217:         # TypeInferenceGeneratorVisitor, that is in charge of generating the type inference program.
218:         self.visitors = [
219:             multiple_assignments_visitor_copy.MultipleAssignmentsDesugaringVisitor(),
220:             class_attributes_visitor_copy.ClassAttributesVisitor(),
221:             class__init__visitor_copy.ClassInitVisitor(),
222:             type_inference_visitor_copy.TypeInferenceGeneratorVisitor(self.source_file_path.split('\\')[-1],
223:                                                                  self.original_program_src),
224:         ]
225: 
226:         # Have I got to generate a type data file? If yes, use the visitor that transform the original program into
227:         # a derived one that captures runtime variable values during execution
228:         if generate_type_data_file:
229:             self.type_data_autogeneration_ast_tree = TypeDataAutoGeneratorVisitor().visit(
230:                 self.__read_new_ast_from_file())
231:             ast.fix_missing_locations(self.type_data_autogeneration_ast_tree)
232:             self.type_generation_source_code = None
233: 
234:         # Member initialization
235:         self.type_inference_ast_tree = None
236:         self.type_inference_source_code = None
237:         self.generate_type_data_file = generate_type_data_file
238:         self.show_ast = show_ast
239:         self.generate_type_annotated_program = generate_type_annotated_program
240:         self.tinit = 0
241:         self.tend = 0
242: 
243:         # Program analysis output results
244:         self.analyzed_program_type_store = None
245:         self.analyzed_program_errors = None
246:         self.analyzed_program_warnings = None
247: 
248:     def set_source_file_path(self, source_file_path):
249:         '''
250:         Changes the source file of the program to be processed
251:         :param source_file_path: File path
252:         :return:
253:         '''
254:         self.source_file_path = source_file_path
255:         self.file_ = open(self.source_file_path, 'r')
256:         self.original_program_src = self.file_.read()
257: 
258:     ###################################### ORIGINAL SOURCE FILE ######################################
259: 
260:     def get_original_source_file_ast(self):
261:         '''
262:         Get the original source file AST tree optionally showing it
263:         :return:
264:         '''
265:         if self.verbose:
266:             info("\nSTyPy: Calculating program AST...\n")
267:         original_ast = self.__get_original_source_file_ast()
268:         if self.show_ast:
269:             info(dump_ast(original_ast))
270: 
271:         return original_ast
272: 
273:     ###################################### TYPE DATA FILE AUTOGENERATION ######################################
274: 
275:     def get_type_data_autogeneration_ast(self):
276:         '''
277:         Get the AST of the optionally generated runtime type data calculation program
278:         :return:
279:         '''
280:         if not hasattr(self, "type_data_autogeneration_ast_tree"):
281:             return None
282:         return self.type_data_autogeneration_ast_tree
283: 
284:     def get_type_data_autogeneration_program_source_code(self):
285:         '''
286:         Get the source code of the optionally generated runtime type data calculation program
287:         :return:
288:         '''
289:         if not hasattr(self, "type_generation_source_code"):
290:             return None
291: 
292:         if self.type_generation_source_code is None:
293:             self.type_generation_source_code = PythonSrcGeneratorVisitor(
294:                 self.get_type_data_autogeneration_ast()).generate_code()
295: 
296:         return self.type_generation_source_code
297: 
298:     def create_automatic_type_data_autogenerator_program(self):
299:         '''
300:         Creates a runtime type data calculation program derived from the original one, used for unit testing
301:         :return:
302:         '''
303:         if os.path.exists(get_stypy_type_data_file_path(self.source_file_path)):
304:             return
305: 
306:         info("\nSTyPy: Calculating automatic type information helper program AST...\n")
307:         tt_ast = self.get_type_data_autogeneration_ast()
308:         if tt_ast is None:
309:             return
310:         if self.show_ast:
311:             info(dump_ast(tt_ast))
312: 
313:         info("\n\n")
314: 
315:         info("\nSTyPy: Automatic type information helper program code:\n")
316:         tgen_source = self.get_type_data_autogeneration_program_source_code()
317:         info(tgen_source)
318:         write_python_source_code(get_stypy_type_data_autogenerator_program_file_path(self.source_file_path),
319:                                  tgen_source)
320: 
321:         if not os.path.exists(get_stypy_type_data_file_path(self.source_file_path)):
322:             self.__run_program(get_stypy_type_data_autogenerator_program_file_path(self.source_file_path))
323: 
324:     ###################################### TYPE INFERENCE PROGRAM ######################################
325: 
326:     def get_type_inference_program_ast(self):
327:         '''
328:         Get the generated type inference program AST
329:         :return:
330:         '''
331:         if self.type_inference_ast_tree is None:
332:             self.type_inference_ast_tree = self.original_ast_tree
333: 
334:             # Apply each visitor in declaration order
335:             for visitor in self.visitors:
336:                 if self.verbose:
337:                     info("USING '{0}' VISITOR\n".format(type(visitor).__name__))
338: 
339:                 # Visitor is a NodeVisitor that generate a new tree from the original one without changing it.
340:                 # Replace the current one for the next iteration once finished
341:                 if isinstance(visitor, ast.NodeVisitor):
342:                     temp_tree = visitor.visit(self.type_inference_ast_tree)
343:                     self.type_inference_ast_tree = temp_tree
344:                 else:
345:                     # Modify nodes of the existing tree (visitor is a NodeTransformer)
346:                     visitor.visit(self.type_inference_ast_tree)
347: 
348:                 if self.show_ast:
349:                     info(dump_ast(self.type_inference_ast_tree))
350:             try:
351:                 # This is needed for proper source code generation from the generated AST tree
352:                 ast.fix_missing_locations(self.type_inference_ast_tree)
353:             except:
354:                 pass
355: 
356:         return self.type_inference_ast_tree
357: 
358:     def get_type_inference_program_source_code(self):
359:         '''
360:         Generates the source code for the type inference program, once its AST has been calculated
361:         :return:
362:         '''
363:         if self.type_inference_source_code is None:
364:             self.type_inference_source_code = PythonSrcGeneratorVisitor(
365:                 self.get_type_inference_program_ast()).generate_code()
366: 
367:             for visitor in self.visitors:
368:                 if isinstance(visitor, type_inference_visitor_copy.TypeInferenceGeneratorVisitor):
369:                     self.type_inference_source_code += type_inference_visitor_copy.TypeInferenceGeneratorVisitor.get_postfix_src_code()
370:                     break
371: 
372:         return self.type_inference_source_code
373: 
374:     def create_type_inference_program(self):
375:         '''
376:         Perform the full cycle of generating the type inference program AST (get_type_inference_program_ast) -
377:         generate the source code from this AST (get_type_inference_program_source_code) - write this source code to a
378:         file (write_python_source_code). This method should be called when generating the type inference program from
379:         a Python source file, instead of the individual ones, provided in a public fashion just for logging purposes.
380:         :return:
381:         '''
382:         # if not self.regenerate_type_inference_programs:
383:         #     if os.path.isfile(get_stypy_type_inference_program_file_path(self.source_file_path)):
384:         #         return
385: 
386:         if self.verbose:
387:             info("\nSTyPy: Calculating type inference program AST...\n")
388:         ti_ast = self.get_type_inference_program_ast()
389: 
390:         if self.show_ast:
391:             info(dump_ast(ti_ast))
392: 
393:         if self.verbose:
394:             info("\n\n")
395:             info("\nSTyPy: Type inference program source code:\n")
396: 
397:         tinf_source = self.get_type_inference_program_source_code()
398:         info(tinf_source)
399: 
400:         write_python_source_code(get_stypy_type_inference_program_file_path(self.source_file_path), tinf_source)
401: 
402:     ###################################### RUN TYPE INFERENCE ######################################
403: 
404:     def __run_type_inference(self):
405:         '''
406:         Runs the type inference program of the source represented by this Stypy object, generating a type data file
407:         (if it does not exist) in order to test the type inference results against these data, provided this option
408:         is enabled. Finally, it generates the equivalent type annotated program, if this option is enabled.
409:         :return:
410:         '''
411:         if self.verbose:
412:             info("\nSTyPy: Running type inference program...\n")
413: 
414:         # TODO: Remove
415:         # if self.generate_type_data_file:
416:         #     # Do we already have a type data file?
417:         #     if not os.path.exists(get_stypy_type_data_file_path(self.source_file_path)):
418:         #         try:
419:         #             # If not, create a runtime type data calculation program and run it
420:         #             self.__run_type_inference_program(
421:         #                 get_stypy_type_data_autogenerator_program_file_path(self.source_file_path))
422:         #         except:
423:         #             pass
424: 
425:         # result = compile(self.type_inference_ast_tree, '<string>', 'exec') # compile the module AST
426:         # Run the generated type inference program to look for errors
427:         self.__run_type_inference_program(get_stypy_type_inference_program_file_path(self.source_file_path))
428: 
429:         # Create a type annotated program from the original source file
430:         if self.generate_type_annotated_program:
431:             self.create_type_annotated_program()
432: 
433:     def create_type_annotated_program(self):
434:         '''
435:         Creates a type-annotated version of the analyzed Python program.
436:         :return:
437:         '''
438:         my_type_store = self.get_analyzed_program_type_store()
439:         # Visit the source code with the analyzed program type store with the inferred types, so we can place type
440:         # annotations in the correct source lines
441:         annotator_visitor = TypeAnnotationVisitor(self.source_file_path, my_type_store)
442: 
443:         annotated_tree = annotator_visitor.visit(self.__read_new_ast_from_file())
444:         if self.show_ast:
445:             info("Type annotated program AST: ")
446:             info(dump_ast(annotated_tree))
447: 
448:         try:
449:             ast.fix_missing_locations(annotated_tree)
450:         except:
451:             pass
452: 
453:         annotated_type_source_code = PythonSrcGeneratorVisitor(annotated_tree).generate_code()
454:         write_python_source_code(get_stypy_type_annotation_file_path(self.source_file_path),
455:                                  annotated_type_source_code)
456: 
457:         # Annotate the types of modules that the program uses
458:         for stypy_object in my_type_store.external_modules:
459:             stypy_object.create_type_annotated_program()
460: 
461:     def analyze(self):
462:         '''
463:         Main stypy function. Performs all the step to analyze the source file types in order
464:         '''
465:         if self.verbose:
466:             info("Parsing file '" + self.source_file_path + "'\n")
467: 
468:         existing_ts = type_store_copy.typestore.TypeStore.get_type_store_of_module(self.source_file_path)
469:         if existing_ts is not None:
470:             self.analyzed_program_type_store = existing_ts
471:             return existing_ts
472: 
473:         # Obtain the AST of the source file
474:         self.get_original_source_file_ast()
475: 
476:         # If a type data file have to be generated and the source file is suitable to do so, do it
477:         if self.generate_type_data_file:
478:             if Stypy.__is_file_suitable_for_autocalculate_types(self.source_file_path):
479:                 self.create_automatic_type_data_autogenerator_program()
480: 
481:         # Create the type inference program
482:         self.create_type_inference_program()
483: 
484:         return self.__run_type_inference()
485: 
486:     ###################################### POST ANALYSIS DATA ######################################
487: 
488:     def get_analyzed_program_type_store(self):
489:         '''
490:         Get the type store of the analyzed Python source file
491:         :return:
492:         '''
493:         if self.analyzed_program_type_store is None:
494:             self.analyze()
495: 
496:         return self.analyzed_program_type_store
497: 
498:     def get_analyzed_program_errors(self):
499:         '''
500:         Get the type errors of the analyzed Python source file
501:         :return:
502:         '''
503:         if self.analyzed_program_errors is None:
504:             self.analyze()
505: 
506:         return self.analyzed_program_errors
507: 
508:     def get_analyzed_program_warnings(self):
509:         '''
510:         Get the type warnings of the analyzed Python source file
511:         :return:
512:         '''
513:         if self.analyzed_program_warnings is None:
514:             self.analyze()
515: 
516:         return self.analyzed_program_warnings
517: 
518:     def get_last_type_checking_running_time(self):
519:         '''
520:         Get the time spent on the last Python source file analysis
521:         :return:
522:         '''
523:         return self.tend - self.tinit
524: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1, 0))

# 'import sys' statement (line 1)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 1, 0), 'sys', sys, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2, 0))

# 'import time' statement (line 2)
import time

import_module(stypy.reporting.localization.Localization(__file__, 2, 0), 'time', time, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3, 0))

# 'import imp' statement (line 3)
import imp

import_module(stypy.reporting.localization.Localization(__file__, 3, 0), 'imp', imp, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 4, 0))

# 'import ast' statement (line 4)
import ast

import_module(stypy.reporting.localization.Localization(__file__, 4, 0), 'ast', ast, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 6, 0))

# 'from visitor_copy.type_inference_copy import type_inference_visitor_copy' statement (line 6)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_835 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'visitor_copy.type_inference_copy')

if (type(import_835) is not StypyTypeError):

    if (import_835 != 'pyd_module'):
        __import__(import_835)
        sys_modules_836 = sys.modules[import_835]
        import_from_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'visitor_copy.type_inference_copy', sys_modules_836.module_type_store, module_type_store, ['type_inference_visitor_copy'])
        nest_module(stypy.reporting.localization.Localization(__file__, 6, 0), __file__, sys_modules_836, sys_modules_836.module_type_store, module_type_store)
    else:
        from visitor_copy.type_inference_copy import type_inference_visitor_copy

        import_from_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'visitor_copy.type_inference_copy', None, module_type_store, ['type_inference_visitor_copy'], [type_inference_visitor_copy])

else:
    # Assigning a type to the variable 'visitor_copy.type_inference_copy' (line 6)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6, 0), 'visitor_copy.type_inference_copy', import_835)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 7, 0))

# 'from visitor_copy.python_src_generation_copy.python_src_generator_visitor_copy import PythonSrcGeneratorVisitor' statement (line 7)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_837 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'visitor_copy.python_src_generation_copy.python_src_generator_visitor_copy')

if (type(import_837) is not StypyTypeError):

    if (import_837 != 'pyd_module'):
        __import__(import_837)
        sys_modules_838 = sys.modules[import_837]
        import_from_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'visitor_copy.python_src_generation_copy.python_src_generator_visitor_copy', sys_modules_838.module_type_store, module_type_store, ['PythonSrcGeneratorVisitor'])
        nest_module(stypy.reporting.localization.Localization(__file__, 7, 0), __file__, sys_modules_838, sys_modules_838.module_type_store, module_type_store)
    else:
        from visitor_copy.python_src_generation_copy.python_src_generator_visitor_copy import PythonSrcGeneratorVisitor

        import_from_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'visitor_copy.python_src_generation_copy.python_src_generator_visitor_copy', None, module_type_store, ['PythonSrcGeneratorVisitor'], [PythonSrcGeneratorVisitor])

else:
    # Assigning a type to the variable 'visitor_copy.python_src_generation_copy.python_src_generator_visitor_copy' (line 7)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7, 0), 'visitor_copy.python_src_generation_copy.python_src_generator_visitor_copy', import_837)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 8, 0))

# 'from visitor_copy.python_type_data_autogeneration_copy.python_type_data_autogeneration_visitor_copy import ' statement (line 8)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_839 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'visitor_copy.python_type_data_autogeneration_copy.python_type_data_autogeneration_visitor_copy')

if (type(import_839) is not StypyTypeError):

    if (import_839 != 'pyd_module'):
        __import__(import_839)
        sys_modules_840 = sys.modules[import_839]
        import_from_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'visitor_copy.python_type_data_autogeneration_copy.python_type_data_autogeneration_visitor_copy', sys_modules_840.module_type_store, module_type_store, ['*'])
        nest_module(stypy.reporting.localization.Localization(__file__, 8, 0), __file__, sys_modules_840, sys_modules_840.module_type_store, module_type_store)
    else:
        from visitor_copy.python_type_data_autogeneration_copy.python_type_data_autogeneration_visitor_copy import *

        import_from_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'visitor_copy.python_type_data_autogeneration_copy.python_type_data_autogeneration_visitor_copy', None, module_type_store, ['*'], None)

else:
    # Assigning a type to the variable 'visitor_copy.python_type_data_autogeneration_copy.python_type_data_autogeneration_visitor_copy' (line 8)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 8, 0), 'visitor_copy.python_type_data_autogeneration_copy.python_type_data_autogeneration_visitor_copy', import_839)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 9, 0))

# 'from visitor_copy.type_inference_copy.visitor_utils_copy.stypy_functions_copy import default_module_type_store_var_name, default_type_error_var_name, default_type_warning_var_name' statement (line 9)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_841 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'visitor_copy.type_inference_copy.visitor_utils_copy.stypy_functions_copy')

if (type(import_841) is not StypyTypeError):

    if (import_841 != 'pyd_module'):
        __import__(import_841)
        sys_modules_842 = sys.modules[import_841]
        import_from_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'visitor_copy.type_inference_copy.visitor_utils_copy.stypy_functions_copy', sys_modules_842.module_type_store, module_type_store, ['default_module_type_store_var_name', 'default_type_error_var_name', 'default_type_warning_var_name'])
        nest_module(stypy.reporting.localization.Localization(__file__, 9, 0), __file__, sys_modules_842, sys_modules_842.module_type_store, module_type_store)
    else:
        from visitor_copy.type_inference_copy.visitor_utils_copy.stypy_functions_copy import default_module_type_store_var_name, default_type_error_var_name, default_type_warning_var_name

        import_from_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'visitor_copy.type_inference_copy.visitor_utils_copy.stypy_functions_copy', None, module_type_store, ['default_module_type_store_var_name', 'default_type_error_var_name', 'default_type_warning_var_name'], [default_module_type_store_var_name, default_type_error_var_name, default_type_warning_var_name])

else:
    # Assigning a type to the variable 'visitor_copy.type_inference_copy.visitor_utils_copy.stypy_functions_copy' (line 9)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 9, 0), 'visitor_copy.type_inference_copy.visitor_utils_copy.stypy_functions_copy', import_841)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 11, 0))

# 'from visitor_copy.python_src_print_copy.python_src_print_visitor_copy import dump_ast' statement (line 11)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_843 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'visitor_copy.python_src_print_copy.python_src_print_visitor_copy')

if (type(import_843) is not StypyTypeError):

    if (import_843 != 'pyd_module'):
        __import__(import_843)
        sys_modules_844 = sys.modules[import_843]
        import_from_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'visitor_copy.python_src_print_copy.python_src_print_visitor_copy', sys_modules_844.module_type_store, module_type_store, ['dump_ast'])
        nest_module(stypy.reporting.localization.Localization(__file__, 11, 0), __file__, sys_modules_844, sys_modules_844.module_type_store, module_type_store)
    else:
        from visitor_copy.python_src_print_copy.python_src_print_visitor_copy import dump_ast

        import_from_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'visitor_copy.python_src_print_copy.python_src_print_visitor_copy', None, module_type_store, ['dump_ast'], [dump_ast])

else:
    # Assigning a type to the variable 'visitor_copy.python_src_print_copy.python_src_print_visitor_copy' (line 11)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 11, 0), 'visitor_copy.python_src_print_copy.python_src_print_visitor_copy', import_843)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'from stypy_parameters_copy import ' statement (line 12)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_845 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'stypy_parameters_copy')

if (type(import_845) is not StypyTypeError):

    if (import_845 != 'pyd_module'):
        __import__(import_845)
        sys_modules_846 = sys.modules[import_845]
        import_from_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'stypy_parameters_copy', sys_modules_846.module_type_store, module_type_store, ['*'])
        nest_module(stypy.reporting.localization.Localization(__file__, 12, 0), __file__, sys_modules_846, sys_modules_846.module_type_store, module_type_store)
    else:
        from stypy_parameters_copy import *

        import_from_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'stypy_parameters_copy', None, module_type_store, ['*'], None)

else:
    # Assigning a type to the variable 'stypy_parameters_copy' (line 12)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 12, 0), 'stypy_parameters_copy', import_845)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 13, 0))

# 'from visitor_copy.type_inference_copy.desugaring_copy import multiple_assignments_visitor_copy' statement (line 13)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_847 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'visitor_copy.type_inference_copy.desugaring_copy')

if (type(import_847) is not StypyTypeError):

    if (import_847 != 'pyd_module'):
        __import__(import_847)
        sys_modules_848 = sys.modules[import_847]
        import_from_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'visitor_copy.type_inference_copy.desugaring_copy', sys_modules_848.module_type_store, module_type_store, ['multiple_assignments_visitor_copy'])
        nest_module(stypy.reporting.localization.Localization(__file__, 13, 0), __file__, sys_modules_848, sys_modules_848.module_type_store, module_type_store)
    else:
        from visitor_copy.type_inference_copy.desugaring_copy import multiple_assignments_visitor_copy

        import_from_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'visitor_copy.type_inference_copy.desugaring_copy', None, module_type_store, ['multiple_assignments_visitor_copy'], [multiple_assignments_visitor_copy])

else:
    # Assigning a type to the variable 'visitor_copy.type_inference_copy.desugaring_copy' (line 13)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 13, 0), 'visitor_copy.type_inference_copy.desugaring_copy', import_847)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'from visitor_copy.type_inference_copy.desugaring_copy import class_attributes_visitor_copy' statement (line 14)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_849 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'visitor_copy.type_inference_copy.desugaring_copy')

if (type(import_849) is not StypyTypeError):

    if (import_849 != 'pyd_module'):
        __import__(import_849)
        sys_modules_850 = sys.modules[import_849]
        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'visitor_copy.type_inference_copy.desugaring_copy', sys_modules_850.module_type_store, module_type_store, ['class_attributes_visitor_copy'])
        nest_module(stypy.reporting.localization.Localization(__file__, 14, 0), __file__, sys_modules_850, sys_modules_850.module_type_store, module_type_store)
    else:
        from visitor_copy.type_inference_copy.desugaring_copy import class_attributes_visitor_copy

        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'visitor_copy.type_inference_copy.desugaring_copy', None, module_type_store, ['class_attributes_visitor_copy'], [class_attributes_visitor_copy])

else:
    # Assigning a type to the variable 'visitor_copy.type_inference_copy.desugaring_copy' (line 14)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 14, 0), 'visitor_copy.type_inference_copy.desugaring_copy', import_849)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 15, 0))

# 'from visitor_copy.type_inference_copy.desugaring_copy import class__init__visitor_copy' statement (line 15)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_851 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'visitor_copy.type_inference_copy.desugaring_copy')

if (type(import_851) is not StypyTypeError):

    if (import_851 != 'pyd_module'):
        __import__(import_851)
        sys_modules_852 = sys.modules[import_851]
        import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'visitor_copy.type_inference_copy.desugaring_copy', sys_modules_852.module_type_store, module_type_store, ['class__init__visitor_copy'])
        nest_module(stypy.reporting.localization.Localization(__file__, 15, 0), __file__, sys_modules_852, sys_modules_852.module_type_store, module_type_store)
    else:
        from visitor_copy.type_inference_copy.desugaring_copy import class__init__visitor_copy

        import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'visitor_copy.type_inference_copy.desugaring_copy', None, module_type_store, ['class__init__visitor_copy'], [class__init__visitor_copy])

else:
    # Assigning a type to the variable 'visitor_copy.type_inference_copy.desugaring_copy' (line 15)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 15, 0), 'visitor_copy.type_inference_copy.desugaring_copy', import_851)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 16, 0))

# 'from visitor_copy.type_annotation_copy.type_annotation_visitor_copy import TypeAnnotationVisitor' statement (line 16)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_853 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'visitor_copy.type_annotation_copy.type_annotation_visitor_copy')

if (type(import_853) is not StypyTypeError):

    if (import_853 != 'pyd_module'):
        __import__(import_853)
        sys_modules_854 = sys.modules[import_853]
        import_from_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'visitor_copy.type_annotation_copy.type_annotation_visitor_copy', sys_modules_854.module_type_store, module_type_store, ['TypeAnnotationVisitor'])
        nest_module(stypy.reporting.localization.Localization(__file__, 16, 0), __file__, sys_modules_854, sys_modules_854.module_type_store, module_type_store)
    else:
        from visitor_copy.type_annotation_copy.type_annotation_visitor_copy import TypeAnnotationVisitor

        import_from_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'visitor_copy.type_annotation_copy.type_annotation_visitor_copy', None, module_type_store, ['TypeAnnotationVisitor'], [TypeAnnotationVisitor])

else:
    # Assigning a type to the variable 'visitor_copy.type_annotation_copy.type_annotation_visitor_copy' (line 16)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 16, 0), 'visitor_copy.type_annotation_copy.type_annotation_visitor_copy', import_853)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 17, 0))

# 'import type_store_copy' statement (line 17)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_855 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'type_store_copy')

if (type(import_855) is not StypyTypeError):

    if (import_855 != 'pyd_module'):
        __import__(import_855)
        sys_modules_856 = sys.modules[import_855]
        import_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'type_store_copy', sys_modules_856.module_type_store, module_type_store)
    else:
        import type_store_copy

        import_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'type_store_copy', type_store_copy, module_type_store)

else:
    # Assigning a type to the variable 'type_store_copy' (line 17)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 17, 0), 'type_store_copy', import_855)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 18, 0))

# 'from python_lib_copy.python_types_copy import type_inference_copy' statement (line 18)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_857 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'python_lib_copy.python_types_copy')

if (type(import_857) is not StypyTypeError):

    if (import_857 != 'pyd_module'):
        __import__(import_857)
        sys_modules_858 = sys.modules[import_857]
        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'python_lib_copy.python_types_copy', sys_modules_858.module_type_store, module_type_store, ['type_inference_copy'])
        nest_module(stypy.reporting.localization.Localization(__file__, 18, 0), __file__, sys_modules_858, sys_modules_858.module_type_store, module_type_store)
    else:
        from python_lib_copy.python_types_copy import type_inference_copy

        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'python_lib_copy.python_types_copy', None, module_type_store, ['type_inference_copy'], [type_inference_copy])

else:
    # Assigning a type to the variable 'python_lib_copy.python_types_copy' (line 18)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 18, 0), 'python_lib_copy.python_types_copy', import_857)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 0))

# 'from log_copy import logging_console_copy' statement (line 19)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_859 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'log_copy')

if (type(import_859) is not StypyTypeError):

    if (import_859 != 'pyd_module'):
        __import__(import_859)
        sys_modules_860 = sys.modules[import_859]
        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'log_copy', sys_modules_860.module_type_store, module_type_store, ['logging_console_copy'])
        nest_module(stypy.reporting.localization.Localization(__file__, 19, 0), __file__, sys_modules_860, sys_modules_860.module_type_store, module_type_store)
    else:
        from log_copy import logging_console_copy

        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'log_copy', None, module_type_store, ['logging_console_copy'], [logging_console_copy])

else:
    # Assigning a type to the variable 'log_copy' (line 19)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 19, 0), 'log_copy', import_859)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 20, 0))

# 'from code_generation_copy.source_code_writer_copy import write_python_source_code' statement (line 20)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_861 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'code_generation_copy.source_code_writer_copy')

if (type(import_861) is not StypyTypeError):

    if (import_861 != 'pyd_module'):
        __import__(import_861)
        sys_modules_862 = sys.modules[import_861]
        import_from_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'code_generation_copy.source_code_writer_copy', sys_modules_862.module_type_store, module_type_store, ['write_python_source_code'])
        nest_module(stypy.reporting.localization.Localization(__file__, 20, 0), __file__, sys_modules_862, sys_modules_862.module_type_store, module_type_store)
    else:
        from code_generation_copy.source_code_writer_copy import write_python_source_code

        import_from_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'code_generation_copy.source_code_writer_copy', None, module_type_store, ['write_python_source_code'], [write_python_source_code])

else:
    # Assigning a type to the variable 'code_generation_copy.source_code_writer_copy' (line 20)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 20, 0), 'code_generation_copy.source_code_writer_copy', import_861)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

str_863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, (-1)), 'str', '\nAssigning log functions\n')

# Assigning a Attribute to a Name (line 26):
# Getting the type of 'logging_console_copy' (line 26)
logging_console_copy_864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 26, 7), 'logging_console_copy')
# Obtaining the member 'info' of a type (line 26)
info_865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 26, 7), logging_console_copy_864, 'info')
# Assigning a type to the variable 'info' (line 26)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 26, 0), 'info', info_865)

# Assigning a Attribute to a Name (line 27):
# Getting the type of 'logging_console_copy' (line 27)
logging_console_copy_866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 27, 5), 'logging_console_copy')
# Obtaining the member 'ok' of a type (line 27)
ok_867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 27, 5), logging_console_copy_866, 'ok')
# Assigning a type to the variable 'ok' (line 27)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 0), 'ok', ok_867)

# Assigning a Attribute to a Name (line 28):
# Getting the type of 'logging_console_copy' (line 28)
logging_console_copy_868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 28, 8), 'logging_console_copy')
# Obtaining the member 'error' of a type (line 28)
error_869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 28, 8), logging_console_copy_868, 'error')
# Assigning a type to the variable 'error' (line 28)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), 'error', error_869)

# Assigning a Attribute to a Name (line 29):
# Getting the type of 'logging_console_copy' (line 29)
logging_console_copy_870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 29, 10), 'logging_console_copy')
# Obtaining the member 'warning' of a type (line 29)
warning_871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 29, 10), logging_console_copy_870, 'warning')
# Assigning a type to the variable 'warning' (line 29)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 0), 'warning', warning_871)
str_872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 31, 0), 'str', 'Null log functions when log is disabled')

@norecursion
def f(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'f'
    module_type_store = module_type_store.open_function_context('f', 34, 0, False)
    
    # Passed parameters checking function
    f.stypy_localization = localization
    f.stypy_type_of_self = None
    f.stypy_type_store = module_type_store
    f.stypy_function_name = 'f'
    f.stypy_param_names_list = []
    f.stypy_varargs_param_name = None
    f.stypy_kwargs_param_name = None
    f.stypy_call_defaults = defaults
    f.stypy_call_varargs = varargs
    f.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'f', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'f', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'f(...)' code ##################

    pass
    
    # ################# End of 'f(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'f' in the type store
    # Getting the type of 'stypy_return_type' (line 34)
    stypy_return_type_873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 34, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_873)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'f'
    return stypy_return_type_873

# Assigning a type to the variable 'f' (line 34)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 0), 'f', f)

# Assigning a Name to a Name (line 38):
# Getting the type of 'f' (line 38)
f_874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 38, 13), 'f')
# Assigning a type to the variable 'reset_logs' (line 38)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 38, 0), 'reset_logs', f_874)

@norecursion
def void_print_func(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'void_print_func'
    module_type_store = module_type_store.open_function_context('void_print_func', 41, 0, False)
    
    # Passed parameters checking function
    void_print_func.stypy_localization = localization
    void_print_func.stypy_type_of_self = None
    void_print_func.stypy_type_store = module_type_store
    void_print_func.stypy_function_name = 'void_print_func'
    void_print_func.stypy_param_names_list = []
    void_print_func.stypy_varargs_param_name = 'args'
    void_print_func.stypy_kwargs_param_name = None
    void_print_func.stypy_call_defaults = defaults
    void_print_func.stypy_call_varargs = varargs
    void_print_func.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'void_print_func', [], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'void_print_func', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'void_print_func(...)' code ##################

    pass
    
    # ################# End of 'void_print_func(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'void_print_func' in the type store
    # Getting the type of 'stypy_return_type' (line 41)
    stypy_return_type_875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 41, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_875)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'void_print_func'
    return stypy_return_type_875

# Assigning a type to the variable 'void_print_func' (line 41)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 41, 0), 'void_print_func', void_print_func)
# Declaration of the 'Stypy' class

class Stypy:
    str_876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, (-1)), 'str', '\n    Main class for the stypy type-inference Python system. It controls all the interaction with Python source code files\n    and stypy runtime. From a Python source file it:\n    - Parses the file and generates an equivalent type-inference program. This program can be executed to tell the\n    original program type errors\n    - Optionally generates a type annotated Python source file identical to the original one but with types assigned\n    to all its variables. It is the same functionality that stypy provides, but written into suitable places of a copy\n    of the original file instead of reporting types and type errors via console. It is helpful for debuggin purposes\n    and in the future it can be adapted to follow PEP 0484 (Type hints) https://www.python.org/dev/peps/pep-0484/\n    - Optionally generates a version of the original program that calculates a table of variables and its runtime types.\n    It does not work on 100% of the cases, its implementation is rather basic and may fail with some program constructs,\n    but it help to generate tables of types that later on can be used to unit test generated type inference programs.\n    ')

    @norecursion
    def __read_new_ast_from_file(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__read_new_ast_from_file'
        module_type_store = module_type_store.open_function_context('__read_new_ast_from_file', 62, 4, False)
        # Assigning a type to the variable 'self' (line 63)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 63, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.__read_new_ast_from_file.__dict__.__setitem__('stypy_localization', localization)
        Stypy.__read_new_ast_from_file.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.__read_new_ast_from_file.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.__read_new_ast_from_file.__dict__.__setitem__('stypy_function_name', 'Stypy.__read_new_ast_from_file')
        Stypy.__read_new_ast_from_file.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.__read_new_ast_from_file.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.__read_new_ast_from_file.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.__read_new_ast_from_file.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.__read_new_ast_from_file.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.__read_new_ast_from_file.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.__read_new_ast_from_file.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.__read_new_ast_from_file', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__read_new_ast_from_file', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__read_new_ast_from_file(...)' code ##################

        str_877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 66, (-1)), 'str', '\n        Reads the AST of the source Python file\n        :return:\n        ')
        
        # Call to parse(...): (line 67)
        # Processing the call arguments (line 67)
        # Getting the type of 'self' (line 67)
        self_880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 67, 25), 'self', False)
        # Obtaining the member 'original_program_src' of a type (line 67)
        original_program_src_881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 67, 25), self_880, 'original_program_src')
        # Processing the call keyword arguments (line 67)
        kwargs_882 = {}
        # Getting the type of 'ast' (line 67)
        ast_878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 67, 15), 'ast', False)
        # Obtaining the member 'parse' of a type (line 67)
        parse_879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 67, 15), ast_878, 'parse')
        # Calling parse(args, kwargs) (line 67)
        parse_call_result_883 = invoke(stypy.reporting.localization.Localization(__file__, 67, 15), parse_879, *[original_program_src_881], **kwargs_882)
        
        # Assigning a type to the variable 'stypy_return_type' (line 67)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 67, 8), 'stypy_return_type', parse_call_result_883)
        
        # ################# End of '__read_new_ast_from_file(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__read_new_ast_from_file' in the type store
        # Getting the type of 'stypy_return_type' (line 62)
        stypy_return_type_884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 62, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_884)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__read_new_ast_from_file'
        return stypy_return_type_884


    @norecursion
    def __get_original_source_file_ast(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__get_original_source_file_ast'
        module_type_store = module_type_store.open_function_context('__get_original_source_file_ast', 69, 4, False)
        # Assigning a type to the variable 'self' (line 70)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 70, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.__get_original_source_file_ast.__dict__.__setitem__('stypy_localization', localization)
        Stypy.__get_original_source_file_ast.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.__get_original_source_file_ast.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.__get_original_source_file_ast.__dict__.__setitem__('stypy_function_name', 'Stypy.__get_original_source_file_ast')
        Stypy.__get_original_source_file_ast.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.__get_original_source_file_ast.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.__get_original_source_file_ast.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.__get_original_source_file_ast.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.__get_original_source_file_ast.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.__get_original_source_file_ast.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.__get_original_source_file_ast.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.__get_original_source_file_ast', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__get_original_source_file_ast', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__get_original_source_file_ast(...)' code ##################

        str_885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 73, (-1)), 'str', '\n        Returns the AST of the source Python file\n        :return:\n        ')
        # Getting the type of 'self' (line 74)
        self_886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 15), 'self')
        # Obtaining the member 'original_ast_tree' of a type (line 74)
        original_ast_tree_887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 74, 15), self_886, 'original_ast_tree')
        # Assigning a type to the variable 'stypy_return_type' (line 74)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 74, 8), 'stypy_return_type', original_ast_tree_887)
        
        # ################# End of '__get_original_source_file_ast(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__get_original_source_file_ast' in the type store
        # Getting the type of 'stypy_return_type' (line 69)
        stypy_return_type_888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_888)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__get_original_source_file_ast'
        return stypy_return_type_888


    @staticmethod
    @norecursion
    def __run_program(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__run_program'
        module_type_store = module_type_store.open_function_context('__run_program', 76, 4, False)
        
        # Passed parameters checking function
        Stypy.__run_program.__dict__.__setitem__('stypy_localization', localization)
        Stypy.__run_program.__dict__.__setitem__('stypy_type_of_self', None)
        Stypy.__run_program.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.__run_program.__dict__.__setitem__('stypy_function_name', '__run_program')
        Stypy.__run_program.__dict__.__setitem__('stypy_param_names_list', ['file_path'])
        Stypy.__run_program.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.__run_program.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.__run_program.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.__run_program.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.__run_program.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.__run_program.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, None, module_type_store, '__run_program', ['file_path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__run_program', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__run_program(...)' code ##################

        str_889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 83, (-1)), 'str', '\n        Runs a Python program importing its source code and providing fresh locals() and globals() environments. It is\n        used to execute the various Python programs that stypy generates if needed.\n        :param file_path:\n        :return:\n        ')
        
        # Assigning a Call to a Name (line 84):
        
        # Call to globals(...): (line 84)
        # Processing the call keyword arguments (line 84)
        kwargs_891 = {}
        # Getting the type of 'globals' (line 84)
        globals_890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 21), 'globals', False)
        # Calling globals(args, kwargs) (line 84)
        globals_call_result_892 = invoke(stypy.reporting.localization.Localization(__file__, 84, 21), globals_890, *[], **kwargs_891)
        
        # Assigning a type to the variable 'my_globals' (line 84)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 8), 'my_globals', globals_call_result_892)
        
        # Assigning a Name to a Subscript (line 85):
        # Getting the type of 'file_path' (line 85)
        file_path_893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 33), 'file_path')
        # Getting the type of 'my_globals' (line 85)
        my_globals_894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 8), 'my_globals')
        str_895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 19), 'str', '__file__')
        # Storing an element on a container (line 85)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 85, 8), my_globals_894, (str_895, file_path_893))
        
        # Assigning a Call to a Name (line 87):
        
        # Call to dict(...): (line 87)
        # Processing the call keyword arguments (line 87)
        kwargs_897 = {}
        # Getting the type of 'dict' (line 87)
        dict_896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 87, 20), 'dict', False)
        # Calling dict(args, kwargs) (line 87)
        dict_call_result_898 = invoke(stypy.reporting.localization.Localization(__file__, 87, 20), dict_896, *[], **kwargs_897)
        
        # Assigning a type to the variable 'my_locals' (line 87)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 87, 8), 'my_locals', dict_call_result_898)
        
        # Assigning a Call to a Name (line 89):
        
        # Call to dirname(...): (line 89)
        # Processing the call arguments (line 89)
        # Getting the type of 'file_path' (line 89)
        file_path_902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 34), 'file_path', False)
        # Processing the call keyword arguments (line 89)
        kwargs_903 = {}
        # Getting the type of 'os' (line 89)
        os_899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 18), 'os', False)
        # Obtaining the member 'path' of a type (line 89)
        path_900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 89, 18), os_899, 'path')
        # Obtaining the member 'dirname' of a type (line 89)
        dirname_901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 89, 18), path_900, 'dirname')
        # Calling dirname(args, kwargs) (line 89)
        dirname_call_result_904 = invoke(stypy.reporting.localization.Localization(__file__, 89, 18), dirname_901, *[file_path_902], **kwargs_903)
        
        # Assigning a type to the variable 'dirname' (line 89)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 89, 8), 'dirname', dirname_call_result_904)
        
        # Assigning a Subscript to a Name (line 90):
        
        # Obtaining the type of the subscript
        int_905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 90, 47), 'int')
        int_906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 90, 49), 'int')
        slice_907 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 90, 22), int_905, int_906, None)
        
        # Obtaining the type of the subscript
        int_908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 90, 43), 'int')
        
        # Call to split(...): (line 90)
        # Processing the call arguments (line 90)
        str_911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 90, 38), 'str', '/')
        # Processing the call keyword arguments (line 90)
        kwargs_912 = {}
        # Getting the type of 'file_path' (line 90)
        file_path_909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 90, 22), 'file_path', False)
        # Obtaining the member 'split' of a type (line 90)
        split_910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 90, 22), file_path_909, 'split')
        # Calling split(args, kwargs) (line 90)
        split_call_result_913 = invoke(stypy.reporting.localization.Localization(__file__, 90, 22), split_910, *[str_911], **kwargs_912)
        
        # Obtaining the member '__getitem__' of a type (line 90)
        getitem___914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 90, 22), split_call_result_913, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 90)
        subscript_call_result_915 = invoke(stypy.reporting.localization.Localization(__file__, 90, 22), getitem___914, int_908)
        
        # Obtaining the member '__getitem__' of a type (line 90)
        getitem___916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 90, 22), subscript_call_result_915, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 90)
        subscript_call_result_917 = invoke(stypy.reporting.localization.Localization(__file__, 90, 22), getitem___916, slice_907)
        
        # Assigning a type to the variable 'source_file' (line 90)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 90, 8), 'source_file', subscript_call_result_917)
        
        # Call to append(...): (line 92)
        # Processing the call arguments (line 92)
        # Getting the type of 'dirname' (line 92)
        dirname_921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 24), 'dirname', False)
        # Processing the call keyword arguments (line 92)
        kwargs_922 = {}
        # Getting the type of 'sys' (line 92)
        sys_918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 8), 'sys', False)
        # Obtaining the member 'path' of a type (line 92)
        path_919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 92, 8), sys_918, 'path')
        # Obtaining the member 'append' of a type (line 92)
        append_920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 92, 8), path_919, 'append')
        # Calling append(args, kwargs) (line 92)
        append_call_result_923 = invoke(stypy.reporting.localization.Localization(__file__, 92, 8), append_920, *[dirname_921], **kwargs_922)
        
        
        # Call to __import__(...): (line 93)
        # Processing the call arguments (line 93)
        # Getting the type of 'source_file' (line 93)
        source_file_925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 19), 'source_file', False)
        # Getting the type of 'my_globals' (line 93)
        my_globals_926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 32), 'my_globals', False)
        # Getting the type of 'my_locals' (line 93)
        my_locals_927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 44), 'my_locals', False)
        # Processing the call keyword arguments (line 93)
        kwargs_928 = {}
        # Getting the type of '__import__' (line 93)
        import___924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 8), '__import__', False)
        # Calling __import__(args, kwargs) (line 93)
        import___call_result_929 = invoke(stypy.reporting.localization.Localization(__file__, 93, 8), import___924, *[source_file_925, my_globals_926, my_locals_927], **kwargs_928)
        
        
        # ################# End of '__run_program(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__run_program' in the type store
        # Getting the type of 'stypy_return_type' (line 76)
        stypy_return_type_930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_930)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__run_program'
        return stypy_return_type_930


    @norecursion
    def __run_type_inference_program(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__run_type_inference_program'
        module_type_store = module_type_store.open_function_context('__run_type_inference_program', 95, 4, False)
        # Assigning a type to the variable 'self' (line 96)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.__run_type_inference_program.__dict__.__setitem__('stypy_localization', localization)
        Stypy.__run_type_inference_program.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.__run_type_inference_program.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.__run_type_inference_program.__dict__.__setitem__('stypy_function_name', 'Stypy.__run_type_inference_program')
        Stypy.__run_type_inference_program.__dict__.__setitem__('stypy_param_names_list', ['file_path'])
        Stypy.__run_type_inference_program.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.__run_type_inference_program.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.__run_type_inference_program.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.__run_type_inference_program.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.__run_type_inference_program.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.__run_type_inference_program.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.__run_type_inference_program', ['file_path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__run_type_inference_program', localization, ['file_path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__run_type_inference_program(...)' code ##################

        str_931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, (-1)), 'str', '\n        Runs a type inference program generated by stypy by importing it. It provides a fresh globals environment\n        with initialized __file__ and __name__ environment variables, an empty locals() environment and time-measuring\n        instrumentation. At the end of the execution, it extracts the generated type store, the type errors and the\n        type warnings that have been detected.\n        :param file_path: Program to run\n        :return:\n        ')
        
        # Assigning a Call to a Name (line 104):
        
        # Call to globals(...): (line 104)
        # Processing the call keyword arguments (line 104)
        kwargs_933 = {}
        # Getting the type of 'globals' (line 104)
        globals_932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 21), 'globals', False)
        # Calling globals(args, kwargs) (line 104)
        globals_call_result_934 = invoke(stypy.reporting.localization.Localization(__file__, 104, 21), globals_932, *[], **kwargs_933)
        
        # Assigning a type to the variable 'my_globals' (line 104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 8), 'my_globals', globals_call_result_934)
        
        # Assigning a Name to a Subscript (line 105):
        # Getting the type of 'file_path' (line 105)
        file_path_935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 33), 'file_path')
        # Getting the type of 'my_globals' (line 105)
        my_globals_936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 8), 'my_globals')
        str_937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 19), 'str', '__file__')
        # Storing an element on a container (line 105)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 105, 8), my_globals_936, (str_937, file_path_935))
        
        # Assigning a Str to a Subscript (line 106):
        str_938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 106, 33), 'str', '__main__')
        # Getting the type of 'my_globals' (line 106)
        my_globals_939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 8), 'my_globals')
        str_940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 106, 19), 'str', '__name__')
        # Storing an element on a container (line 106)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 106, 8), my_globals_939, (str_940, str_938))
        
        # Assigning a Call to a Name (line 108):
        
        # Call to dict(...): (line 108)
        # Processing the call keyword arguments (line 108)
        kwargs_942 = {}
        # Getting the type of 'dict' (line 108)
        dict_941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 20), 'dict', False)
        # Calling dict(args, kwargs) (line 108)
        dict_call_result_943 = invoke(stypy.reporting.localization.Localization(__file__, 108, 20), dict_941, *[], **kwargs_942)
        
        # Assigning a type to the variable 'my_locals' (line 108)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 108, 8), 'my_locals', dict_call_result_943)
        
        # Assigning a Subscript to a Name (line 111):
        
        # Obtaining the type of the subscript
        int_944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 111, 47), 'int')
        int_945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 111, 49), 'int')
        slice_946 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 111, 22), int_944, int_945, None)
        
        # Obtaining the type of the subscript
        int_947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 111, 43), 'int')
        
        # Call to split(...): (line 111)
        # Processing the call arguments (line 111)
        str_950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 111, 38), 'str', '/')
        # Processing the call keyword arguments (line 111)
        kwargs_951 = {}
        # Getting the type of 'file_path' (line 111)
        file_path_948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 111, 22), 'file_path', False)
        # Obtaining the member 'split' of a type (line 111)
        split_949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 111, 22), file_path_948, 'split')
        # Calling split(args, kwargs) (line 111)
        split_call_result_952 = invoke(stypy.reporting.localization.Localization(__file__, 111, 22), split_949, *[str_950], **kwargs_951)
        
        # Obtaining the member '__getitem__' of a type (line 111)
        getitem___953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 111, 22), split_call_result_952, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 111)
        subscript_call_result_954 = invoke(stypy.reporting.localization.Localization(__file__, 111, 22), getitem___953, int_947)
        
        # Obtaining the member '__getitem__' of a type (line 111)
        getitem___955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 111, 22), subscript_call_result_954, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 111)
        subscript_call_result_956 = invoke(stypy.reporting.localization.Localization(__file__, 111, 22), getitem___955, slice_946)
        
        # Assigning a type to the variable 'source_file' (line 111)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 111, 8), 'source_file', subscript_call_result_956)
        
        # Assigning a Call to a Name (line 119):
        
        # Call to load_source(...): (line 119)
        # Processing the call arguments (line 119)
        # Getting the type of 'source_file' (line 119)
        source_file_959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 33), 'source_file', False)
        # Getting the type of 'file_path' (line 119)
        file_path_960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 46), 'file_path', False)
        # Processing the call keyword arguments (line 119)
        kwargs_961 = {}
        # Getting the type of 'imp' (line 119)
        imp_957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 17), 'imp', False)
        # Obtaining the member 'load_source' of a type (line 119)
        load_source_958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 119, 17), imp_957, 'load_source')
        # Calling load_source(args, kwargs) (line 119)
        load_source_call_result_962 = invoke(stypy.reporting.localization.Localization(__file__, 119, 17), load_source_958, *[source_file_959, file_path_960], **kwargs_961)
        
        # Assigning a type to the variable 'module' (line 119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 119, 8), 'module', load_source_call_result_962)
        
        
        # SSA begins for try-except statement (line 120)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Attribute (line 122):
        
        # Call to getattr(...): (line 122)
        # Processing the call arguments (line 122)
        # Getting the type of 'module' (line 122)
        module_964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 55), 'module', False)
        # Getting the type of 'default_module_type_store_var_name' (line 122)
        default_module_type_store_var_name_965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 63), 'default_module_type_store_var_name', False)
        # Processing the call keyword arguments (line 122)
        kwargs_966 = {}
        # Getting the type of 'getattr' (line 122)
        getattr_963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 47), 'getattr', False)
        # Calling getattr(args, kwargs) (line 122)
        getattr_call_result_967 = invoke(stypy.reporting.localization.Localization(__file__, 122, 47), getattr_963, *[module_964, default_module_type_store_var_name_965], **kwargs_966)
        
        # Getting the type of 'self' (line 122)
        self_968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 12), 'self')
        # Setting the type of the member 'analyzed_program_type_store' of a type (line 122)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 122, 12), self_968, 'analyzed_program_type_store', getattr_call_result_967)
        
        # Assigning a Call to a Attribute (line 123):
        
        # Call to getattr(...): (line 123)
        # Processing the call arguments (line 123)
        # Getting the type of 'module' (line 123)
        module_970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 51), 'module', False)
        # Getting the type of 'default_type_error_var_name' (line 123)
        default_type_error_var_name_971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 59), 'default_type_error_var_name', False)
        # Processing the call keyword arguments (line 123)
        kwargs_972 = {}
        # Getting the type of 'getattr' (line 123)
        getattr_969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 43), 'getattr', False)
        # Calling getattr(args, kwargs) (line 123)
        getattr_call_result_973 = invoke(stypy.reporting.localization.Localization(__file__, 123, 43), getattr_969, *[module_970, default_type_error_var_name_971], **kwargs_972)
        
        # Getting the type of 'self' (line 123)
        self_974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 12), 'self')
        # Setting the type of the member 'analyzed_program_errors' of a type (line 123)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 123, 12), self_974, 'analyzed_program_errors', getattr_call_result_973)
        
        # Assigning a Call to a Attribute (line 124):
        
        # Call to getattr(...): (line 124)
        # Processing the call arguments (line 124)
        # Getting the type of 'module' (line 124)
        module_976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 53), 'module', False)
        # Getting the type of 'default_type_warning_var_name' (line 124)
        default_type_warning_var_name_977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 61), 'default_type_warning_var_name', False)
        # Processing the call keyword arguments (line 124)
        kwargs_978 = {}
        # Getting the type of 'getattr' (line 124)
        getattr_975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 45), 'getattr', False)
        # Calling getattr(args, kwargs) (line 124)
        getattr_call_result_979 = invoke(stypy.reporting.localization.Localization(__file__, 124, 45), getattr_975, *[module_976, default_type_warning_var_name_977], **kwargs_978)
        
        # Getting the type of 'self' (line 124)
        self_980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 12), 'self')
        # Setting the type of the member 'analyzed_program_warnings' of a type (line 124)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 124, 12), self_980, 'analyzed_program_warnings', getattr_call_result_979)
        # SSA branch for the except part of a try statement (line 120)
        # SSA branch for the except '<any exception>' branch of a try statement (line 120)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Name to a Attribute (line 126):
        # Getting the type of 'None' (line 126)
        None_981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 47), 'None')
        # Getting the type of 'self' (line 126)
        self_982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 12), 'self')
        # Setting the type of the member 'analyzed_program_type_store' of a type (line 126)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 126, 12), self_982, 'analyzed_program_type_store', None_981)
        
        # Assigning a List to a Attribute (line 127):
        
        # Obtaining an instance of the builtin type 'list' (line 127)
        list_983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 127, 43), 'list')
        # Adding type elements to the builtin type 'list' instance (line 127)
        
        # Getting the type of 'self' (line 127)
        self_984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 12), 'self')
        # Setting the type of the member 'analyzed_program_errors' of a type (line 127)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 127, 12), self_984, 'analyzed_program_errors', list_983)
        
        # Assigning a List to a Attribute (line 128):
        
        # Obtaining an instance of the builtin type 'list' (line 128)
        list_985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 128, 45), 'list')
        # Adding type elements to the builtin type 'list' instance (line 128)
        
        # Getting the type of 'self' (line 128)
        self_986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 12), 'self')
        # Setting the type of the member 'analyzed_program_warnings' of a type (line 128)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 128, 12), self_986, 'analyzed_program_warnings', list_985)
        # SSA join for try-except statement (line 120)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__run_type_inference_program(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__run_type_inference_program' in the type store
        # Getting the type of 'stypy_return_type' (line 95)
        stypy_return_type_987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_987)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__run_type_inference_program'
        return stypy_return_type_987


    @staticmethod
    @norecursion
    def __is_file_suitable_for_autocalculate_types(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__is_file_suitable_for_autocalculate_types'
        module_type_store = module_type_store.open_function_context('__is_file_suitable_for_autocalculate_types', 130, 4, False)
        
        # Passed parameters checking function
        Stypy.__is_file_suitable_for_autocalculate_types.__dict__.__setitem__('stypy_localization', localization)
        Stypy.__is_file_suitable_for_autocalculate_types.__dict__.__setitem__('stypy_type_of_self', None)
        Stypy.__is_file_suitable_for_autocalculate_types.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.__is_file_suitable_for_autocalculate_types.__dict__.__setitem__('stypy_function_name', '__is_file_suitable_for_autocalculate_types')
        Stypy.__is_file_suitable_for_autocalculate_types.__dict__.__setitem__('stypy_param_names_list', ['file_path'])
        Stypy.__is_file_suitable_for_autocalculate_types.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.__is_file_suitable_for_autocalculate_types.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.__is_file_suitable_for_autocalculate_types.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.__is_file_suitable_for_autocalculate_types.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.__is_file_suitable_for_autocalculate_types.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.__is_file_suitable_for_autocalculate_types.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, None, module_type_store, '__is_file_suitable_for_autocalculate_types', ['file_path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__is_file_suitable_for_autocalculate_types', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__is_file_suitable_for_autocalculate_types(...)' code ##################

        str_988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 138, (-1)), 'str', '\n        Determines if a source file is suitable to generate a derived runtime type calculation program. Negative\n        tests (those that fail at runtime) are not suitable for it because they cannot be fully executed to calculate\n        the runtime type of its variables. Negative test program name begins with "error_" by convention.\n        :param file_path: File to test\n        :return:\n        ')
        
        str_989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 139, 15), 'str', 'error_')
        # Getting the type of 'file_path' (line 139)
        file_path_990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 31), 'file_path')
        # Applying the binary operator 'notin' (line 139)
        result_contains_991 = python_operator(stypy.reporting.localization.Localization(__file__, 139, 15), 'notin', str_989, file_path_990)
        
        # Assigning a type to the variable 'stypy_return_type' (line 139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 139, 8), 'stypy_return_type', result_contains_991)
        
        # ################# End of '__is_file_suitable_for_autocalculate_types(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__is_file_suitable_for_autocalculate_types' in the type store
        # Getting the type of 'stypy_return_type' (line 130)
        stypy_return_type_992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_992)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__is_file_suitable_for_autocalculate_types'
        return stypy_return_type_992


    @staticmethod
    @norecursion
    def __configure_stypy_output(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__configure_stypy_output'
        module_type_store = module_type_store.open_function_context('__configure_stypy_output', 141, 4, False)
        
        # Passed parameters checking function
        Stypy.__configure_stypy_output.__dict__.__setitem__('stypy_localization', localization)
        Stypy.__configure_stypy_output.__dict__.__setitem__('stypy_type_of_self', None)
        Stypy.__configure_stypy_output.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.__configure_stypy_output.__dict__.__setitem__('stypy_function_name', '__configure_stypy_output')
        Stypy.__configure_stypy_output.__dict__.__setitem__('stypy_param_names_list', ['verbose'])
        Stypy.__configure_stypy_output.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.__configure_stypy_output.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.__configure_stypy_output.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.__configure_stypy_output.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.__configure_stypy_output.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.__configure_stypy_output.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, None, module_type_store, '__configure_stypy_output', ['verbose'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__configure_stypy_output', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__configure_stypy_output(...)' code ##################

        str_993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, (-1)), 'str', '\n        Configures whether output are displayed on console or are not displayed\n        :param verbose:\n        :return:\n        ')
        # Marking variables as global (line 148)
        module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 148, 8), 'info')
        # Marking variables as global (line 149)
        module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 149, 8), 'ok')
        # Marking variables as global (line 150)
        module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 150, 8), 'error')
        # Getting the type of 'verbose' (line 152)
        verbose_994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 11), 'verbose')
        # Testing if the type of an if condition is none (line 152)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 152, 8), verbose_994):
            
            # Assigning a Name to a Name (line 157):
            # Getting the type of 'void_print_func' (line 157)
            void_print_func_1005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 19), 'void_print_func')
            # Assigning a type to the variable 'info' (line 157)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 157, 12), 'info', void_print_func_1005)
            
            # Assigning a Name to a Name (line 158):
            # Getting the type of 'void_print_func' (line 158)
            void_print_func_1006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 17), 'void_print_func')
            # Assigning a type to the variable 'ok' (line 158)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 12), 'ok', void_print_func_1006)
            
            # Assigning a Name to a Name (line 159):
            # Getting the type of 'void_print_func' (line 159)
            void_print_func_1007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 20), 'void_print_func')
            # Assigning a type to the variable 'error' (line 159)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 12), 'error', void_print_func_1007)
        else:
            
            # Testing the type of an if condition (line 152)
            if_condition_995 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 152, 8), verbose_994)
            # Assigning a type to the variable 'if_condition_995' (line 152)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 152, 8), 'if_condition_995', if_condition_995)
            # SSA begins for if statement (line 152)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Attribute to a Name (line 153):
            # Getting the type of 'sys' (line 153)
            sys_996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 19), 'sys')
            # Obtaining the member 'stdout' of a type (line 153)
            stdout_997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 19), sys_996, 'stdout')
            # Obtaining the member 'write' of a type (line 153)
            write_998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 19), stdout_997, 'write')
            # Assigning a type to the variable 'info' (line 153)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 153, 12), 'info', write_998)
            
            # Assigning a Attribute to a Name (line 154):
            # Getting the type of 'sys' (line 154)
            sys_999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 17), 'sys')
            # Obtaining the member 'stdout' of a type (line 154)
            stdout_1000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 17), sys_999, 'stdout')
            # Obtaining the member 'write' of a type (line 154)
            write_1001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 17), stdout_1000, 'write')
            # Assigning a type to the variable 'ok' (line 154)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 154, 12), 'ok', write_1001)
            
            # Assigning a Attribute to a Name (line 155):
            # Getting the type of 'sys' (line 155)
            sys_1002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 20), 'sys')
            # Obtaining the member 'stderr' of a type (line 155)
            stderr_1003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 20), sys_1002, 'stderr')
            # Obtaining the member 'write' of a type (line 155)
            write_1004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 20), stderr_1003, 'write')
            # Assigning a type to the variable 'error' (line 155)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 155, 12), 'error', write_1004)
            # SSA branch for the else part of an if statement (line 152)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Name to a Name (line 157):
            # Getting the type of 'void_print_func' (line 157)
            void_print_func_1005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 19), 'void_print_func')
            # Assigning a type to the variable 'info' (line 157)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 157, 12), 'info', void_print_func_1005)
            
            # Assigning a Name to a Name (line 158):
            # Getting the type of 'void_print_func' (line 158)
            void_print_func_1006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 17), 'void_print_func')
            # Assigning a type to the variable 'ok' (line 158)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 12), 'ok', void_print_func_1006)
            
            # Assigning a Name to a Name (line 159):
            # Getting the type of 'void_print_func' (line 159)
            void_print_func_1007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 20), 'void_print_func')
            # Assigning a type to the variable 'error' (line 159)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 12), 'error', void_print_func_1007)
            # SSA join for if statement (line 152)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # ################# End of '__configure_stypy_output(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__configure_stypy_output' in the type store
        # Getting the type of 'stypy_return_type' (line 141)
        stypy_return_type_1008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 141, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1008)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__configure_stypy_output'
        return stypy_return_type_1008


    @norecursion
    def create_instance(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'create_instance'
        module_type_store = module_type_store.open_function_context('create_instance', 163, 4, False)
        # Assigning a type to the variable 'self' (line 164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 164, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.create_instance.__dict__.__setitem__('stypy_localization', localization)
        Stypy.create_instance.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.create_instance.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.create_instance.__dict__.__setitem__('stypy_function_name', 'Stypy.create_instance')
        Stypy.create_instance.__dict__.__setitem__('stypy_param_names_list', ['source_file_path'])
        Stypy.create_instance.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.create_instance.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.create_instance.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.create_instance.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.create_instance.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.create_instance.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.create_instance', ['source_file_path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'create_instance', localization, ['source_file_path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'create_instance(...)' code ##################

        str_1009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 171, (-1)), 'str', '\n        Creates a new instance of the Stypy class using the values of the current stypy instance regarding Python\n        interpreter, output verbosity and optional file generation. Its purpose is to "spawn" a new Stypy object\n        for a different source file with the same configuration quickly, in order to parse Python source modules\n        that are loaded by the main parsed program\n        :param source_file_path:\n        :return:\n        ')
        
        # Call to Stypy(...): (line 172)
        # Processing the call arguments (line 172)
        # Getting the type of 'source_file_path' (line 172)
        source_file_path_1011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 21), 'source_file_path', False)
        # Getting the type of 'self' (line 172)
        self_1012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 39), 'self', False)
        # Obtaining the member 'python_exe' of a type (line 172)
        python_exe_1013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 39), self_1012, 'python_exe')
        # Getting the type of 'self' (line 172)
        self_1014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 56), 'self', False)
        # Obtaining the member 'verbose' of a type (line 172)
        verbose_1015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 56), self_1014, 'verbose')
        # Getting the type of 'self' (line 172)
        self_1016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 70), 'self', False)
        # Obtaining the member 'generate_type_data_file' of a type (line 172)
        generate_type_data_file_1017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 70), self_1016, 'generate_type_data_file')
        # Processing the call keyword arguments (line 172)
        kwargs_1018 = {}
        # Getting the type of 'Stypy' (line 172)
        Stypy_1010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 15), 'Stypy', False)
        # Calling Stypy(args, kwargs) (line 172)
        Stypy_call_result_1019 = invoke(stypy.reporting.localization.Localization(__file__, 172, 15), Stypy_1010, *[source_file_path_1011, python_exe_1013, verbose_1015, generate_type_data_file_1017], **kwargs_1018)
        
        # Assigning a type to the variable 'stypy_return_type' (line 172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 172, 8), 'stypy_return_type', Stypy_call_result_1019)
        
        # ################# End of 'create_instance(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'create_instance' in the type store
        # Getting the type of 'stypy_return_type' (line 163)
        stypy_return_type_1020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1020)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'create_instance'
        return stypy_return_type_1020


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'PYTHON_EXE' (line 174)
        PYTHON_EXE_1021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 52), 'PYTHON_EXE')
        # Getting the type of 'False' (line 174)
        False_1022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 72), 'False')
        # Getting the type of 'False' (line 175)
        False_1023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 41), 'False')
        # Getting the type of 'False' (line 175)
        False_1024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 80), 'False')
        # Getting the type of 'False' (line 175)
        False_1025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 96), 'False')
        # Getting the type of 'False' (line 176)
        False_1026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 52), 'False')
        defaults = [PYTHON_EXE_1021, False_1022, False_1023, False_1024, False_1025, False_1026]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 174, 4, False)
        # Assigning a type to the variable 'self' (line 175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.__init__', ['source_file_path', 'python_exe', 'verbose', 'generate_type_data_file', 'generate_type_annotated_program', 'show_ast', 'regenerate_type_inference_programs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['source_file_path', 'python_exe', 'verbose', 'generate_type_data_file', 'generate_type_annotated_program', 'show_ast', 'regenerate_type_inference_programs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_1027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 190, (-1)), 'str', '\n        Buils a new Stypy type inference object instance for a certain source program. Creating an equivalent type\n        inference program.\n        :param source_file_path: Source program to process and calculate its type inference program\n        :param python_exe: Python implementation to use (optional, initialized by default to the PYTHON_EXE stypy\n        parameter)\n        :param verbose: Output verbosity (True/False)\n        :param generate_type_data_file: Optionally generate a type data file to perform unit testing over the\n        generated type inference program. Defaults to False\n        :param generate_type_annotated_program: Optionally generate a type annotated source file from the original one.\n        Defaults to False\n        :param show_ast: Display the AST of the processed source file. Defaults to False\n        :return:\n        ')
        
        # Assigning a Name to a Attribute (line 191):
        # Getting the type of 'python_exe' (line 191)
        python_exe_1028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 26), 'python_exe')
        # Getting the type of 'self' (line 191)
        self_1029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 8), 'self')
        # Setting the type of the member 'python_exe' of a type (line 191)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 191, 8), self_1029, 'python_exe', python_exe_1028)
        
        # Assigning a Str to a Attribute (line 192):
        str_1030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 32), 'str', '')
        # Getting the type of 'self' (line 192)
        self_1031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 8), 'self')
        # Setting the type of the member 'validation_error' of a type (line 192)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 8), self_1031, 'validation_error', str_1030)
        
        # Assigning a Name to a Attribute (line 193):
        # Getting the type of 'source_file_path' (line 193)
        source_file_path_1032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 32), 'source_file_path')
        # Getting the type of 'self' (line 193)
        self_1033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 8), 'self')
        # Setting the type of the member 'source_file_path' of a type (line 193)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 8), self_1033, 'source_file_path', source_file_path_1032)
        
        # Assigning a Call to a Attribute (line 194):
        
        # Call to open(...): (line 194)
        # Processing the call arguments (line 194)
        # Getting the type of 'self' (line 194)
        self_1035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 26), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 194)
        source_file_path_1036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 26), self_1035, 'source_file_path')
        str_1037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 49), 'str', 'r')
        # Processing the call keyword arguments (line 194)
        kwargs_1038 = {}
        # Getting the type of 'open' (line 194)
        open_1034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 21), 'open', False)
        # Calling open(args, kwargs) (line 194)
        open_call_result_1039 = invoke(stypy.reporting.localization.Localization(__file__, 194, 21), open_1034, *[source_file_path_1036, str_1037], **kwargs_1038)
        
        # Getting the type of 'self' (line 194)
        self_1040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 8), 'self')
        # Setting the type of the member 'file_' of a type (line 194)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 8), self_1040, 'file_', open_call_result_1039)
        
        # Assigning a Call to a Attribute (line 195):
        
        # Call to read(...): (line 195)
        # Processing the call keyword arguments (line 195)
        kwargs_1044 = {}
        # Getting the type of 'self' (line 195)
        self_1041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 36), 'self', False)
        # Obtaining the member 'file_' of a type (line 195)
        file__1042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 36), self_1041, 'file_')
        # Obtaining the member 'read' of a type (line 195)
        read_1043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 36), file__1042, 'read')
        # Calling read(args, kwargs) (line 195)
        read_call_result_1045 = invoke(stypy.reporting.localization.Localization(__file__, 195, 36), read_1043, *[], **kwargs_1044)
        
        # Getting the type of 'self' (line 195)
        self_1046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 8), 'self')
        # Setting the type of the member 'original_program_src' of a type (line 195)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 8), self_1046, 'original_program_src', read_call_result_1045)
        
        # Assigning a Name to a Attribute (line 196):
        # Getting the type of 'regenerate_type_inference_programs' (line 196)
        regenerate_type_inference_programs_1047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 50), 'regenerate_type_inference_programs')
        # Getting the type of 'self' (line 196)
        self_1048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 8), 'self')
        # Setting the type of the member 'regenerate_type_inference_programs' of a type (line 196)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 196, 8), self_1048, 'regenerate_type_inference_programs', regenerate_type_inference_programs_1047)
        
        # Assigning a Name to a Attribute (line 200):
        # Getting the type of 'generate_type_annotated_program' (line 200)
        generate_type_annotated_program_1049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 74), 'generate_type_annotated_program')
        # Getting the type of 'type_store_copy' (line 200)
        type_store_copy_1050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 8), 'type_store_copy')
        # Obtaining the member 'function_context' of a type (line 200)
        function_context_1051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 200, 8), type_store_copy_1050, 'function_context')
        # Obtaining the member 'FunctionContext' of a type (line 200)
        FunctionContext_1052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 200, 8), function_context_1051, 'FunctionContext')
        # Setting the type of the member 'annotate_types' of a type (line 200)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 200, 8), FunctionContext_1052, 'annotate_types', generate_type_annotated_program_1049)
        
        # Assigning a Name to a Attribute (line 201):
        # Getting the type of 'generate_type_annotated_program' (line 201)
        generate_type_annotated_program_1053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 85), 'generate_type_annotated_program')
        # Getting the type of 'type_inference_copy' (line 201)
        type_inference_copy_1054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 8), 'type_inference_copy')
        # Obtaining the member 'type_inference_proxy' of a type (line 201)
        type_inference_proxy_1055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 8), type_inference_copy_1054, 'type_inference_proxy')
        # Obtaining the member 'TypeInferenceProxy' of a type (line 201)
        TypeInferenceProxy_1056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 8), type_inference_proxy_1055, 'TypeInferenceProxy')
        # Setting the type of the member 'annotate_types' of a type (line 201)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 8), TypeInferenceProxy_1056, 'annotate_types', generate_type_annotated_program_1053)
        
        # Assigning a Name to a Attribute (line 204):
        # Getting the type of 'verbose' (line 204)
        verbose_1057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 23), 'verbose')
        # Getting the type of 'self' (line 204)
        self_1058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 8), 'self')
        # Setting the type of the member 'verbose' of a type (line 204)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 204, 8), self_1058, 'verbose', verbose_1057)
        
        # Call to __configure_stypy_output(...): (line 205)
        # Processing the call arguments (line 205)
        # Getting the type of 'verbose' (line 205)
        verbose_1061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 39), 'verbose', False)
        # Processing the call keyword arguments (line 205)
        kwargs_1062 = {}
        # Getting the type of 'Stypy' (line 205)
        Stypy_1059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 8), 'Stypy', False)
        # Obtaining the member '__configure_stypy_output' of a type (line 205)
        configure_stypy_output_1060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 205, 8), Stypy_1059, '__configure_stypy_output')
        # Calling __configure_stypy_output(args, kwargs) (line 205)
        configure_stypy_output_call_result_1063 = invoke(stypy.reporting.localization.Localization(__file__, 205, 8), configure_stypy_output_1060, *[verbose_1061], **kwargs_1062)
        
        
        
        # SSA begins for try-except statement (line 207)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Attribute (line 209):
        
        # Call to __read_new_ast_from_file(...): (line 209)
        # Processing the call keyword arguments (line 209)
        kwargs_1066 = {}
        # Getting the type of 'self' (line 209)
        self_1064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 37), 'self', False)
        # Obtaining the member '__read_new_ast_from_file' of a type (line 209)
        read_new_ast_from_file_1065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 209, 37), self_1064, '__read_new_ast_from_file')
        # Calling __read_new_ast_from_file(args, kwargs) (line 209)
        read_new_ast_from_file_call_result_1067 = invoke(stypy.reporting.localization.Localization(__file__, 209, 37), read_new_ast_from_file_1065, *[], **kwargs_1066)
        
        # Getting the type of 'self' (line 209)
        self_1068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 12), 'self')
        # Setting the type of the member 'original_ast_tree' of a type (line 209)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 209, 12), self_1068, 'original_ast_tree', read_new_ast_from_file_call_result_1067)
        # SSA branch for the except part of a try statement (line 207)
        # SSA branch for the except 'Exception' branch of a try statement (line 207)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'Exception' (line 210)
        Exception_1069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 15), 'Exception')
        # Assigning a type to the variable 'exc' (line 210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 8), 'exc', Exception_1069)
        
        # Call to error(...): (line 211)
        # Processing the call arguments (line 211)
        
        # Call to format(...): (line 211)
        # Processing the call arguments (line 211)
        # Getting the type of 'self' (line 211)
        self_1073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 79), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 211)
        source_file_path_1074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 79), self_1073, 'source_file_path')
        # Processing the call keyword arguments (line 211)
        kwargs_1075 = {}
        str_1071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, 18), 'str', "Python is unable to compile the input file '{0}':\n")
        # Obtaining the member 'format' of a type (line 211)
        format_1072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 18), str_1071, 'format')
        # Calling format(args, kwargs) (line 211)
        format_call_result_1076 = invoke(stypy.reporting.localization.Localization(__file__, 211, 18), format_1072, *[source_file_path_1074], **kwargs_1075)
        
        
        # Call to str(...): (line 211)
        # Processing the call arguments (line 211)
        # Getting the type of 'exc' (line 211)
        exc_1078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 108), 'exc', False)
        # Processing the call keyword arguments (line 211)
        kwargs_1079 = {}
        # Getting the type of 'str' (line 211)
        str_1077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 104), 'str', False)
        # Calling str(args, kwargs) (line 211)
        str_call_result_1080 = invoke(stypy.reporting.localization.Localization(__file__, 211, 104), str_1077, *[exc_1078], **kwargs_1079)
        
        # Applying the binary operator '+' (line 211)
        result_add_1081 = python_operator(stypy.reporting.localization.Localization(__file__, 211, 18), '+', format_call_result_1076, str_call_result_1080)
        
        # Processing the call keyword arguments (line 211)
        kwargs_1082 = {}
        # Getting the type of 'error' (line 211)
        error_1070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 12), 'error', False)
        # Calling error(args, kwargs) (line 211)
        error_call_result_1083 = invoke(stypy.reporting.localization.Localization(__file__, 211, 12), error_1070, *[result_add_1081], **kwargs_1082)
        
        
        # Call to exit(...): (line 212)
        # Processing the call arguments (line 212)
        int_1085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 212, 17), 'int')
        # Processing the call keyword arguments (line 212)
        kwargs_1086 = {}
        # Getting the type of 'exit' (line 212)
        exit_1084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 12), 'exit', False)
        # Calling exit(args, kwargs) (line 212)
        exit_call_result_1087 = invoke(stypy.reporting.localization.Localization(__file__, 212, 12), exit_1084, *[int_1085], **kwargs_1086)
        
        # SSA join for try-except statement (line 207)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Attribute (line 218):
        
        # Obtaining an instance of the builtin type 'list' (line 218)
        list_1088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 218, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 218)
        # Adding element type (line 218)
        
        # Call to MultipleAssignmentsDesugaringVisitor(...): (line 219)
        # Processing the call keyword arguments (line 219)
        kwargs_1091 = {}
        # Getting the type of 'multiple_assignments_visitor_copy' (line 219)
        multiple_assignments_visitor_copy_1089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 12), 'multiple_assignments_visitor_copy', False)
        # Obtaining the member 'MultipleAssignmentsDesugaringVisitor' of a type (line 219)
        MultipleAssignmentsDesugaringVisitor_1090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 12), multiple_assignments_visitor_copy_1089, 'MultipleAssignmentsDesugaringVisitor')
        # Calling MultipleAssignmentsDesugaringVisitor(args, kwargs) (line 219)
        MultipleAssignmentsDesugaringVisitor_call_result_1092 = invoke(stypy.reporting.localization.Localization(__file__, 219, 12), MultipleAssignmentsDesugaringVisitor_1090, *[], **kwargs_1091)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 218, 24), list_1088, MultipleAssignmentsDesugaringVisitor_call_result_1092)
        # Adding element type (line 218)
        
        # Call to ClassAttributesVisitor(...): (line 220)
        # Processing the call keyword arguments (line 220)
        kwargs_1095 = {}
        # Getting the type of 'class_attributes_visitor_copy' (line 220)
        class_attributes_visitor_copy_1093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 12), 'class_attributes_visitor_copy', False)
        # Obtaining the member 'ClassAttributesVisitor' of a type (line 220)
        ClassAttributesVisitor_1094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 220, 12), class_attributes_visitor_copy_1093, 'ClassAttributesVisitor')
        # Calling ClassAttributesVisitor(args, kwargs) (line 220)
        ClassAttributesVisitor_call_result_1096 = invoke(stypy.reporting.localization.Localization(__file__, 220, 12), ClassAttributesVisitor_1094, *[], **kwargs_1095)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 218, 24), list_1088, ClassAttributesVisitor_call_result_1096)
        # Adding element type (line 218)
        
        # Call to ClassInitVisitor(...): (line 221)
        # Processing the call keyword arguments (line 221)
        kwargs_1099 = {}
        # Getting the type of 'class__init__visitor_copy' (line 221)
        class__init__visitor_copy_1097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 12), 'class__init__visitor_copy', False)
        # Obtaining the member 'ClassInitVisitor' of a type (line 221)
        ClassInitVisitor_1098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 12), class__init__visitor_copy_1097, 'ClassInitVisitor')
        # Calling ClassInitVisitor(args, kwargs) (line 221)
        ClassInitVisitor_call_result_1100 = invoke(stypy.reporting.localization.Localization(__file__, 221, 12), ClassInitVisitor_1098, *[], **kwargs_1099)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 218, 24), list_1088, ClassInitVisitor_call_result_1100)
        # Adding element type (line 218)
        
        # Call to TypeInferenceGeneratorVisitor(...): (line 222)
        # Processing the call arguments (line 222)
        
        # Obtaining the type of the subscript
        int_1103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 222, 104), 'int')
        
        # Call to split(...): (line 222)
        # Processing the call arguments (line 222)
        str_1107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 222, 98), 'str', '\\')
        # Processing the call keyword arguments (line 222)
        kwargs_1108 = {}
        # Getting the type of 'self' (line 222)
        self_1104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 70), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 222)
        source_file_path_1105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 70), self_1104, 'source_file_path')
        # Obtaining the member 'split' of a type (line 222)
        split_1106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 70), source_file_path_1105, 'split')
        # Calling split(args, kwargs) (line 222)
        split_call_result_1109 = invoke(stypy.reporting.localization.Localization(__file__, 222, 70), split_1106, *[str_1107], **kwargs_1108)
        
        # Obtaining the member '__getitem__' of a type (line 222)
        getitem___1110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 70), split_call_result_1109, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 222)
        subscript_call_result_1111 = invoke(stypy.reporting.localization.Localization(__file__, 222, 70), getitem___1110, int_1103)
        
        # Getting the type of 'self' (line 223)
        self_1112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 65), 'self', False)
        # Obtaining the member 'original_program_src' of a type (line 223)
        original_program_src_1113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 223, 65), self_1112, 'original_program_src')
        # Processing the call keyword arguments (line 222)
        kwargs_1114 = {}
        # Getting the type of 'type_inference_visitor_copy' (line 222)
        type_inference_visitor_copy_1101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 12), 'type_inference_visitor_copy', False)
        # Obtaining the member 'TypeInferenceGeneratorVisitor' of a type (line 222)
        TypeInferenceGeneratorVisitor_1102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 12), type_inference_visitor_copy_1101, 'TypeInferenceGeneratorVisitor')
        # Calling TypeInferenceGeneratorVisitor(args, kwargs) (line 222)
        TypeInferenceGeneratorVisitor_call_result_1115 = invoke(stypy.reporting.localization.Localization(__file__, 222, 12), TypeInferenceGeneratorVisitor_1102, *[subscript_call_result_1111, original_program_src_1113], **kwargs_1114)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 218, 24), list_1088, TypeInferenceGeneratorVisitor_call_result_1115)
        
        # Getting the type of 'self' (line 218)
        self_1116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 8), 'self')
        # Setting the type of the member 'visitors' of a type (line 218)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 218, 8), self_1116, 'visitors', list_1088)
        # Getting the type of 'generate_type_data_file' (line 228)
        generate_type_data_file_1117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 11), 'generate_type_data_file')
        # Testing if the type of an if condition is none (line 228)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 228, 8), generate_type_data_file_1117):
            pass
        else:
            
            # Testing the type of an if condition (line 228)
            if_condition_1118 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 228, 8), generate_type_data_file_1117)
            # Assigning a type to the variable 'if_condition_1118' (line 228)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 228, 8), 'if_condition_1118', if_condition_1118)
            # SSA begins for if statement (line 228)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 229):
            
            # Call to visit(...): (line 229)
            # Processing the call arguments (line 229)
            
            # Call to __read_new_ast_from_file(...): (line 230)
            # Processing the call keyword arguments (line 230)
            kwargs_1125 = {}
            # Getting the type of 'self' (line 230)
            self_1123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 16), 'self', False)
            # Obtaining the member '__read_new_ast_from_file' of a type (line 230)
            read_new_ast_from_file_1124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 230, 16), self_1123, '__read_new_ast_from_file')
            # Calling __read_new_ast_from_file(args, kwargs) (line 230)
            read_new_ast_from_file_call_result_1126 = invoke(stypy.reporting.localization.Localization(__file__, 230, 16), read_new_ast_from_file_1124, *[], **kwargs_1125)
            
            # Processing the call keyword arguments (line 229)
            kwargs_1127 = {}
            
            # Call to TypeDataAutoGeneratorVisitor(...): (line 229)
            # Processing the call keyword arguments (line 229)
            kwargs_1120 = {}
            # Getting the type of 'TypeDataAutoGeneratorVisitor' (line 229)
            TypeDataAutoGeneratorVisitor_1119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 53), 'TypeDataAutoGeneratorVisitor', False)
            # Calling TypeDataAutoGeneratorVisitor(args, kwargs) (line 229)
            TypeDataAutoGeneratorVisitor_call_result_1121 = invoke(stypy.reporting.localization.Localization(__file__, 229, 53), TypeDataAutoGeneratorVisitor_1119, *[], **kwargs_1120)
            
            # Obtaining the member 'visit' of a type (line 229)
            visit_1122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 229, 53), TypeDataAutoGeneratorVisitor_call_result_1121, 'visit')
            # Calling visit(args, kwargs) (line 229)
            visit_call_result_1128 = invoke(stypy.reporting.localization.Localization(__file__, 229, 53), visit_1122, *[read_new_ast_from_file_call_result_1126], **kwargs_1127)
            
            # Getting the type of 'self' (line 229)
            self_1129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 12), 'self')
            # Setting the type of the member 'type_data_autogeneration_ast_tree' of a type (line 229)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 229, 12), self_1129, 'type_data_autogeneration_ast_tree', visit_call_result_1128)
            
            # Call to fix_missing_locations(...): (line 231)
            # Processing the call arguments (line 231)
            # Getting the type of 'self' (line 231)
            self_1132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 38), 'self', False)
            # Obtaining the member 'type_data_autogeneration_ast_tree' of a type (line 231)
            type_data_autogeneration_ast_tree_1133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 38), self_1132, 'type_data_autogeneration_ast_tree')
            # Processing the call keyword arguments (line 231)
            kwargs_1134 = {}
            # Getting the type of 'ast' (line 231)
            ast_1130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 12), 'ast', False)
            # Obtaining the member 'fix_missing_locations' of a type (line 231)
            fix_missing_locations_1131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 12), ast_1130, 'fix_missing_locations')
            # Calling fix_missing_locations(args, kwargs) (line 231)
            fix_missing_locations_call_result_1135 = invoke(stypy.reporting.localization.Localization(__file__, 231, 12), fix_missing_locations_1131, *[type_data_autogeneration_ast_tree_1133], **kwargs_1134)
            
            
            # Assigning a Name to a Attribute (line 232):
            # Getting the type of 'None' (line 232)
            None_1136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 47), 'None')
            # Getting the type of 'self' (line 232)
            self_1137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 12), 'self')
            # Setting the type of the member 'type_generation_source_code' of a type (line 232)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 232, 12), self_1137, 'type_generation_source_code', None_1136)
            # SSA join for if statement (line 228)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # Assigning a Name to a Attribute (line 235):
        # Getting the type of 'None' (line 235)
        None_1138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 39), 'None')
        # Getting the type of 'self' (line 235)
        self_1139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 8), 'self')
        # Setting the type of the member 'type_inference_ast_tree' of a type (line 235)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 235, 8), self_1139, 'type_inference_ast_tree', None_1138)
        
        # Assigning a Name to a Attribute (line 236):
        # Getting the type of 'None' (line 236)
        None_1140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 42), 'None')
        # Getting the type of 'self' (line 236)
        self_1141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 8), 'self')
        # Setting the type of the member 'type_inference_source_code' of a type (line 236)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 236, 8), self_1141, 'type_inference_source_code', None_1140)
        
        # Assigning a Name to a Attribute (line 237):
        # Getting the type of 'generate_type_data_file' (line 237)
        generate_type_data_file_1142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 39), 'generate_type_data_file')
        # Getting the type of 'self' (line 237)
        self_1143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 8), 'self')
        # Setting the type of the member 'generate_type_data_file' of a type (line 237)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 237, 8), self_1143, 'generate_type_data_file', generate_type_data_file_1142)
        
        # Assigning a Name to a Attribute (line 238):
        # Getting the type of 'show_ast' (line 238)
        show_ast_1144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 24), 'show_ast')
        # Getting the type of 'self' (line 238)
        self_1145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 8), 'self')
        # Setting the type of the member 'show_ast' of a type (line 238)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 238, 8), self_1145, 'show_ast', show_ast_1144)
        
        # Assigning a Name to a Attribute (line 239):
        # Getting the type of 'generate_type_annotated_program' (line 239)
        generate_type_annotated_program_1146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 47), 'generate_type_annotated_program')
        # Getting the type of 'self' (line 239)
        self_1147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 8), 'self')
        # Setting the type of the member 'generate_type_annotated_program' of a type (line 239)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 239, 8), self_1147, 'generate_type_annotated_program', generate_type_annotated_program_1146)
        
        # Assigning a Num to a Attribute (line 240):
        int_1148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 240, 21), 'int')
        # Getting the type of 'self' (line 240)
        self_1149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 8), 'self')
        # Setting the type of the member 'tinit' of a type (line 240)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 240, 8), self_1149, 'tinit', int_1148)
        
        # Assigning a Num to a Attribute (line 241):
        int_1150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 241, 20), 'int')
        # Getting the type of 'self' (line 241)
        self_1151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 8), 'self')
        # Setting the type of the member 'tend' of a type (line 241)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 241, 8), self_1151, 'tend', int_1150)
        
        # Assigning a Name to a Attribute (line 244):
        # Getting the type of 'None' (line 244)
        None_1152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 43), 'None')
        # Getting the type of 'self' (line 244)
        self_1153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 8), 'self')
        # Setting the type of the member 'analyzed_program_type_store' of a type (line 244)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 8), self_1153, 'analyzed_program_type_store', None_1152)
        
        # Assigning a Name to a Attribute (line 245):
        # Getting the type of 'None' (line 245)
        None_1154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 39), 'None')
        # Getting the type of 'self' (line 245)
        self_1155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 8), 'self')
        # Setting the type of the member 'analyzed_program_errors' of a type (line 245)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 245, 8), self_1155, 'analyzed_program_errors', None_1154)
        
        # Assigning a Name to a Attribute (line 246):
        # Getting the type of 'None' (line 246)
        None_1156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 41), 'None')
        # Getting the type of 'self' (line 246)
        self_1157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 8), 'self')
        # Setting the type of the member 'analyzed_program_warnings' of a type (line 246)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 246, 8), self_1157, 'analyzed_program_warnings', None_1156)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_source_file_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_source_file_path'
        module_type_store = module_type_store.open_function_context('set_source_file_path', 248, 4, False)
        # Assigning a type to the variable 'self' (line 249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 249, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.set_source_file_path.__dict__.__setitem__('stypy_localization', localization)
        Stypy.set_source_file_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.set_source_file_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.set_source_file_path.__dict__.__setitem__('stypy_function_name', 'Stypy.set_source_file_path')
        Stypy.set_source_file_path.__dict__.__setitem__('stypy_param_names_list', ['source_file_path'])
        Stypy.set_source_file_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.set_source_file_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.set_source_file_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.set_source_file_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.set_source_file_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.set_source_file_path.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.set_source_file_path', ['source_file_path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_source_file_path', localization, ['source_file_path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_source_file_path(...)' code ##################

        str_1158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 253, (-1)), 'str', '\n        Changes the source file of the program to be processed\n        :param source_file_path: File path\n        :return:\n        ')
        
        # Assigning a Name to a Attribute (line 254):
        # Getting the type of 'source_file_path' (line 254)
        source_file_path_1159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 32), 'source_file_path')
        # Getting the type of 'self' (line 254)
        self_1160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 8), 'self')
        # Setting the type of the member 'source_file_path' of a type (line 254)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 8), self_1160, 'source_file_path', source_file_path_1159)
        
        # Assigning a Call to a Attribute (line 255):
        
        # Call to open(...): (line 255)
        # Processing the call arguments (line 255)
        # Getting the type of 'self' (line 255)
        self_1162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 26), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 255)
        source_file_path_1163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 26), self_1162, 'source_file_path')
        str_1164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 49), 'str', 'r')
        # Processing the call keyword arguments (line 255)
        kwargs_1165 = {}
        # Getting the type of 'open' (line 255)
        open_1161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 21), 'open', False)
        # Calling open(args, kwargs) (line 255)
        open_call_result_1166 = invoke(stypy.reporting.localization.Localization(__file__, 255, 21), open_1161, *[source_file_path_1163, str_1164], **kwargs_1165)
        
        # Getting the type of 'self' (line 255)
        self_1167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 8), 'self')
        # Setting the type of the member 'file_' of a type (line 255)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 8), self_1167, 'file_', open_call_result_1166)
        
        # Assigning a Call to a Attribute (line 256):
        
        # Call to read(...): (line 256)
        # Processing the call keyword arguments (line 256)
        kwargs_1171 = {}
        # Getting the type of 'self' (line 256)
        self_1168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 36), 'self', False)
        # Obtaining the member 'file_' of a type (line 256)
        file__1169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 36), self_1168, 'file_')
        # Obtaining the member 'read' of a type (line 256)
        read_1170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 36), file__1169, 'read')
        # Calling read(args, kwargs) (line 256)
        read_call_result_1172 = invoke(stypy.reporting.localization.Localization(__file__, 256, 36), read_1170, *[], **kwargs_1171)
        
        # Getting the type of 'self' (line 256)
        self_1173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'self')
        # Setting the type of the member 'original_program_src' of a type (line 256)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 8), self_1173, 'original_program_src', read_call_result_1172)
        
        # ################# End of 'set_source_file_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_source_file_path' in the type store
        # Getting the type of 'stypy_return_type' (line 248)
        stypy_return_type_1174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1174)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_source_file_path'
        return stypy_return_type_1174


    @norecursion
    def get_original_source_file_ast(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_original_source_file_ast'
        module_type_store = module_type_store.open_function_context('get_original_source_file_ast', 260, 4, False)
        # Assigning a type to the variable 'self' (line 261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 261, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.get_original_source_file_ast.__dict__.__setitem__('stypy_localization', localization)
        Stypy.get_original_source_file_ast.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.get_original_source_file_ast.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.get_original_source_file_ast.__dict__.__setitem__('stypy_function_name', 'Stypy.get_original_source_file_ast')
        Stypy.get_original_source_file_ast.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.get_original_source_file_ast.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.get_original_source_file_ast.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.get_original_source_file_ast.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.get_original_source_file_ast.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.get_original_source_file_ast.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.get_original_source_file_ast.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.get_original_source_file_ast', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_original_source_file_ast', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_original_source_file_ast(...)' code ##################

        str_1175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 264, (-1)), 'str', '\n        Get the original source file AST tree optionally showing it\n        :return:\n        ')
        # Getting the type of 'self' (line 265)
        self_1176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 11), 'self')
        # Obtaining the member 'verbose' of a type (line 265)
        verbose_1177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 265, 11), self_1176, 'verbose')
        # Testing if the type of an if condition is none (line 265)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 265, 8), verbose_1177):
            pass
        else:
            
            # Testing the type of an if condition (line 265)
            if_condition_1178 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 265, 8), verbose_1177)
            # Assigning a type to the variable 'if_condition_1178' (line 265)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 265, 8), 'if_condition_1178', if_condition_1178)
            # SSA begins for if statement (line 265)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to info(...): (line 266)
            # Processing the call arguments (line 266)
            str_1180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 266, 17), 'str', '\nSTyPy: Calculating program AST...\n')
            # Processing the call keyword arguments (line 266)
            kwargs_1181 = {}
            # Getting the type of 'info' (line 266)
            info_1179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 12), 'info', False)
            # Calling info(args, kwargs) (line 266)
            info_call_result_1182 = invoke(stypy.reporting.localization.Localization(__file__, 266, 12), info_1179, *[str_1180], **kwargs_1181)
            
            # SSA join for if statement (line 265)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # Assigning a Call to a Name (line 267):
        
        # Call to __get_original_source_file_ast(...): (line 267)
        # Processing the call keyword arguments (line 267)
        kwargs_1185 = {}
        # Getting the type of 'self' (line 267)
        self_1183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 23), 'self', False)
        # Obtaining the member '__get_original_source_file_ast' of a type (line 267)
        get_original_source_file_ast_1184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 267, 23), self_1183, '__get_original_source_file_ast')
        # Calling __get_original_source_file_ast(args, kwargs) (line 267)
        get_original_source_file_ast_call_result_1186 = invoke(stypy.reporting.localization.Localization(__file__, 267, 23), get_original_source_file_ast_1184, *[], **kwargs_1185)
        
        # Assigning a type to the variable 'original_ast' (line 267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 267, 8), 'original_ast', get_original_source_file_ast_call_result_1186)
        # Getting the type of 'self' (line 268)
        self_1187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 11), 'self')
        # Obtaining the member 'show_ast' of a type (line 268)
        show_ast_1188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 11), self_1187, 'show_ast')
        # Testing if the type of an if condition is none (line 268)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 268, 8), show_ast_1188):
            pass
        else:
            
            # Testing the type of an if condition (line 268)
            if_condition_1189 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 268, 8), show_ast_1188)
            # Assigning a type to the variable 'if_condition_1189' (line 268)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'if_condition_1189', if_condition_1189)
            # SSA begins for if statement (line 268)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to info(...): (line 269)
            # Processing the call arguments (line 269)
            
            # Call to dump_ast(...): (line 269)
            # Processing the call arguments (line 269)
            # Getting the type of 'original_ast' (line 269)
            original_ast_1192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 26), 'original_ast', False)
            # Processing the call keyword arguments (line 269)
            kwargs_1193 = {}
            # Getting the type of 'dump_ast' (line 269)
            dump_ast_1191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 17), 'dump_ast', False)
            # Calling dump_ast(args, kwargs) (line 269)
            dump_ast_call_result_1194 = invoke(stypy.reporting.localization.Localization(__file__, 269, 17), dump_ast_1191, *[original_ast_1192], **kwargs_1193)
            
            # Processing the call keyword arguments (line 269)
            kwargs_1195 = {}
            # Getting the type of 'info' (line 269)
            info_1190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 12), 'info', False)
            # Calling info(args, kwargs) (line 269)
            info_call_result_1196 = invoke(stypy.reporting.localization.Localization(__file__, 269, 12), info_1190, *[dump_ast_call_result_1194], **kwargs_1195)
            
            # SSA join for if statement (line 268)
            module_type_store = module_type_store.join_ssa_context()
            

        # Getting the type of 'original_ast' (line 271)
        original_ast_1197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 15), 'original_ast')
        # Assigning a type to the variable 'stypy_return_type' (line 271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 271, 8), 'stypy_return_type', original_ast_1197)
        
        # ################# End of 'get_original_source_file_ast(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_original_source_file_ast' in the type store
        # Getting the type of 'stypy_return_type' (line 260)
        stypy_return_type_1198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1198)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_original_source_file_ast'
        return stypy_return_type_1198


    @norecursion
    def get_type_data_autogeneration_ast(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_type_data_autogeneration_ast'
        module_type_store = module_type_store.open_function_context('get_type_data_autogeneration_ast', 275, 4, False)
        # Assigning a type to the variable 'self' (line 276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.get_type_data_autogeneration_ast.__dict__.__setitem__('stypy_localization', localization)
        Stypy.get_type_data_autogeneration_ast.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.get_type_data_autogeneration_ast.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.get_type_data_autogeneration_ast.__dict__.__setitem__('stypy_function_name', 'Stypy.get_type_data_autogeneration_ast')
        Stypy.get_type_data_autogeneration_ast.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.get_type_data_autogeneration_ast.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.get_type_data_autogeneration_ast.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.get_type_data_autogeneration_ast.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.get_type_data_autogeneration_ast.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.get_type_data_autogeneration_ast.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.get_type_data_autogeneration_ast.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.get_type_data_autogeneration_ast', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_type_data_autogeneration_ast', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_type_data_autogeneration_ast(...)' code ##################

        str_1199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, (-1)), 'str', '\n        Get the AST of the optionally generated runtime type data calculation program\n        :return:\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 280)
        str_1200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 280, 29), 'str', 'type_data_autogeneration_ast_tree')
        # Getting the type of 'self' (line 280)
        self_1201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 23), 'self')
        
        (may_be_1202, more_types_in_union_1203) = may_not_provide_member(str_1200, self_1201)

        if may_be_1202:

            if more_types_in_union_1203:
                # Runtime conditional SSA (line 280)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 280)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 280, 8), 'self', remove_member_provider_from_union(self_1201, 'type_data_autogeneration_ast_tree'))
            # Getting the type of 'None' (line 281)
            None_1204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 19), 'None')
            # Assigning a type to the variable 'stypy_return_type' (line 281)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 281, 12), 'stypy_return_type', None_1204)

            if more_types_in_union_1203:
                # SSA join for if statement (line 280)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 282)
        self_1205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 15), 'self')
        # Obtaining the member 'type_data_autogeneration_ast_tree' of a type (line 282)
        type_data_autogeneration_ast_tree_1206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 282, 15), self_1205, 'type_data_autogeneration_ast_tree')
        # Assigning a type to the variable 'stypy_return_type' (line 282)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 282, 8), 'stypy_return_type', type_data_autogeneration_ast_tree_1206)
        
        # ################# End of 'get_type_data_autogeneration_ast(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_type_data_autogeneration_ast' in the type store
        # Getting the type of 'stypy_return_type' (line 275)
        stypy_return_type_1207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1207)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_type_data_autogeneration_ast'
        return stypy_return_type_1207


    @norecursion
    def get_type_data_autogeneration_program_source_code(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_type_data_autogeneration_program_source_code'
        module_type_store = module_type_store.open_function_context('get_type_data_autogeneration_program_source_code', 284, 4, False)
        # Assigning a type to the variable 'self' (line 285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 285, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.get_type_data_autogeneration_program_source_code.__dict__.__setitem__('stypy_localization', localization)
        Stypy.get_type_data_autogeneration_program_source_code.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.get_type_data_autogeneration_program_source_code.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.get_type_data_autogeneration_program_source_code.__dict__.__setitem__('stypy_function_name', 'Stypy.get_type_data_autogeneration_program_source_code')
        Stypy.get_type_data_autogeneration_program_source_code.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.get_type_data_autogeneration_program_source_code.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.get_type_data_autogeneration_program_source_code.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.get_type_data_autogeneration_program_source_code.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.get_type_data_autogeneration_program_source_code.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.get_type_data_autogeneration_program_source_code.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.get_type_data_autogeneration_program_source_code.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.get_type_data_autogeneration_program_source_code', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_type_data_autogeneration_program_source_code', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_type_data_autogeneration_program_source_code(...)' code ##################

        str_1208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 288, (-1)), 'str', '\n        Get the source code of the optionally generated runtime type data calculation program\n        :return:\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 289)
        str_1209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 29), 'str', 'type_generation_source_code')
        # Getting the type of 'self' (line 289)
        self_1210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 23), 'self')
        
        (may_be_1211, more_types_in_union_1212) = may_not_provide_member(str_1209, self_1210)

        if may_be_1211:

            if more_types_in_union_1212:
                # Runtime conditional SSA (line 289)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 289)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 289, 8), 'self', remove_member_provider_from_union(self_1210, 'type_generation_source_code'))
            # Getting the type of 'None' (line 290)
            None_1213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 19), 'None')
            # Assigning a type to the variable 'stypy_return_type' (line 290)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 290, 12), 'stypy_return_type', None_1213)

            if more_types_in_union_1212:
                # SSA join for if statement (line 289)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 292)
        # Getting the type of 'self' (line 292)
        self_1214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 11), 'self')
        # Obtaining the member 'type_generation_source_code' of a type (line 292)
        type_generation_source_code_1215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 292, 11), self_1214, 'type_generation_source_code')
        # Getting the type of 'None' (line 292)
        None_1216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 47), 'None')
        
        (may_be_1217, more_types_in_union_1218) = may_be_none(type_generation_source_code_1215, None_1216)

        if may_be_1217:

            if more_types_in_union_1218:
                # Runtime conditional SSA (line 292)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 293):
            
            # Call to generate_code(...): (line 293)
            # Processing the call keyword arguments (line 293)
            kwargs_1227 = {}
            
            # Call to PythonSrcGeneratorVisitor(...): (line 293)
            # Processing the call arguments (line 293)
            
            # Call to get_type_data_autogeneration_ast(...): (line 294)
            # Processing the call keyword arguments (line 294)
            kwargs_1222 = {}
            # Getting the type of 'self' (line 294)
            self_1220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 16), 'self', False)
            # Obtaining the member 'get_type_data_autogeneration_ast' of a type (line 294)
            get_type_data_autogeneration_ast_1221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 294, 16), self_1220, 'get_type_data_autogeneration_ast')
            # Calling get_type_data_autogeneration_ast(args, kwargs) (line 294)
            get_type_data_autogeneration_ast_call_result_1223 = invoke(stypy.reporting.localization.Localization(__file__, 294, 16), get_type_data_autogeneration_ast_1221, *[], **kwargs_1222)
            
            # Processing the call keyword arguments (line 293)
            kwargs_1224 = {}
            # Getting the type of 'PythonSrcGeneratorVisitor' (line 293)
            PythonSrcGeneratorVisitor_1219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 47), 'PythonSrcGeneratorVisitor', False)
            # Calling PythonSrcGeneratorVisitor(args, kwargs) (line 293)
            PythonSrcGeneratorVisitor_call_result_1225 = invoke(stypy.reporting.localization.Localization(__file__, 293, 47), PythonSrcGeneratorVisitor_1219, *[get_type_data_autogeneration_ast_call_result_1223], **kwargs_1224)
            
            # Obtaining the member 'generate_code' of a type (line 293)
            generate_code_1226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 47), PythonSrcGeneratorVisitor_call_result_1225, 'generate_code')
            # Calling generate_code(args, kwargs) (line 293)
            generate_code_call_result_1228 = invoke(stypy.reporting.localization.Localization(__file__, 293, 47), generate_code_1226, *[], **kwargs_1227)
            
            # Getting the type of 'self' (line 293)
            self_1229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 12), 'self')
            # Setting the type of the member 'type_generation_source_code' of a type (line 293)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 12), self_1229, 'type_generation_source_code', generate_code_call_result_1228)

            if more_types_in_union_1218:
                # SSA join for if statement (line 292)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 296)
        self_1230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 15), 'self')
        # Obtaining the member 'type_generation_source_code' of a type (line 296)
        type_generation_source_code_1231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 15), self_1230, 'type_generation_source_code')
        # Assigning a type to the variable 'stypy_return_type' (line 296)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 296, 8), 'stypy_return_type', type_generation_source_code_1231)
        
        # ################# End of 'get_type_data_autogeneration_program_source_code(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_type_data_autogeneration_program_source_code' in the type store
        # Getting the type of 'stypy_return_type' (line 284)
        stypy_return_type_1232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1232)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_type_data_autogeneration_program_source_code'
        return stypy_return_type_1232


    @norecursion
    def create_automatic_type_data_autogenerator_program(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'create_automatic_type_data_autogenerator_program'
        module_type_store = module_type_store.open_function_context('create_automatic_type_data_autogenerator_program', 298, 4, False)
        # Assigning a type to the variable 'self' (line 299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 299, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.create_automatic_type_data_autogenerator_program.__dict__.__setitem__('stypy_localization', localization)
        Stypy.create_automatic_type_data_autogenerator_program.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.create_automatic_type_data_autogenerator_program.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.create_automatic_type_data_autogenerator_program.__dict__.__setitem__('stypy_function_name', 'Stypy.create_automatic_type_data_autogenerator_program')
        Stypy.create_automatic_type_data_autogenerator_program.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.create_automatic_type_data_autogenerator_program.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.create_automatic_type_data_autogenerator_program.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.create_automatic_type_data_autogenerator_program.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.create_automatic_type_data_autogenerator_program.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.create_automatic_type_data_autogenerator_program.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.create_automatic_type_data_autogenerator_program.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.create_automatic_type_data_autogenerator_program', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'create_automatic_type_data_autogenerator_program', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'create_automatic_type_data_autogenerator_program(...)' code ##################

        str_1233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 302, (-1)), 'str', '\n        Creates a runtime type data calculation program derived from the original one, used for unit testing\n        :return:\n        ')
        
        # Call to exists(...): (line 303)
        # Processing the call arguments (line 303)
        
        # Call to get_stypy_type_data_file_path(...): (line 303)
        # Processing the call arguments (line 303)
        # Getting the type of 'self' (line 303)
        self_1238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 56), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 303)
        source_file_path_1239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 303, 56), self_1238, 'source_file_path')
        # Processing the call keyword arguments (line 303)
        kwargs_1240 = {}
        # Getting the type of 'get_stypy_type_data_file_path' (line 303)
        get_stypy_type_data_file_path_1237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 26), 'get_stypy_type_data_file_path', False)
        # Calling get_stypy_type_data_file_path(args, kwargs) (line 303)
        get_stypy_type_data_file_path_call_result_1241 = invoke(stypy.reporting.localization.Localization(__file__, 303, 26), get_stypy_type_data_file_path_1237, *[source_file_path_1239], **kwargs_1240)
        
        # Processing the call keyword arguments (line 303)
        kwargs_1242 = {}
        # Getting the type of 'os' (line 303)
        os_1234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 11), 'os', False)
        # Obtaining the member 'path' of a type (line 303)
        path_1235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 303, 11), os_1234, 'path')
        # Obtaining the member 'exists' of a type (line 303)
        exists_1236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 303, 11), path_1235, 'exists')
        # Calling exists(args, kwargs) (line 303)
        exists_call_result_1243 = invoke(stypy.reporting.localization.Localization(__file__, 303, 11), exists_1236, *[get_stypy_type_data_file_path_call_result_1241], **kwargs_1242)
        
        # Testing if the type of an if condition is none (line 303)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 303, 8), exists_call_result_1243):
            pass
        else:
            
            # Testing the type of an if condition (line 303)
            if_condition_1244 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 303, 8), exists_call_result_1243)
            # Assigning a type to the variable 'if_condition_1244' (line 303)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 303, 8), 'if_condition_1244', if_condition_1244)
            # SSA begins for if statement (line 303)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            # Assigning a type to the variable 'stypy_return_type' (line 304)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 304, 12), 'stypy_return_type', types.NoneType)
            # SSA join for if statement (line 303)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # Call to info(...): (line 306)
        # Processing the call arguments (line 306)
        str_1246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 306, 13), 'str', '\nSTyPy: Calculating automatic type information helper program AST...\n')
        # Processing the call keyword arguments (line 306)
        kwargs_1247 = {}
        # Getting the type of 'info' (line 306)
        info_1245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 8), 'info', False)
        # Calling info(args, kwargs) (line 306)
        info_call_result_1248 = invoke(stypy.reporting.localization.Localization(__file__, 306, 8), info_1245, *[str_1246], **kwargs_1247)
        
        
        # Assigning a Call to a Name (line 307):
        
        # Call to get_type_data_autogeneration_ast(...): (line 307)
        # Processing the call keyword arguments (line 307)
        kwargs_1251 = {}
        # Getting the type of 'self' (line 307)
        self_1249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 17), 'self', False)
        # Obtaining the member 'get_type_data_autogeneration_ast' of a type (line 307)
        get_type_data_autogeneration_ast_1250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 307, 17), self_1249, 'get_type_data_autogeneration_ast')
        # Calling get_type_data_autogeneration_ast(args, kwargs) (line 307)
        get_type_data_autogeneration_ast_call_result_1252 = invoke(stypy.reporting.localization.Localization(__file__, 307, 17), get_type_data_autogeneration_ast_1250, *[], **kwargs_1251)
        
        # Assigning a type to the variable 'tt_ast' (line 307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 307, 8), 'tt_ast', get_type_data_autogeneration_ast_call_result_1252)
        
        # Type idiom detected: calculating its left and rigth part (line 308)
        # Getting the type of 'tt_ast' (line 308)
        tt_ast_1253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 11), 'tt_ast')
        # Getting the type of 'None' (line 308)
        None_1254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 21), 'None')
        
        (may_be_1255, more_types_in_union_1256) = may_be_none(tt_ast_1253, None_1254)

        if may_be_1255:

            if more_types_in_union_1256:
                # Runtime conditional SSA (line 308)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 309)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 309, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_1256:
                # SSA join for if statement (line 308)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'tt_ast' (line 308)
        tt_ast_1257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 8), 'tt_ast')
        # Assigning a type to the variable 'tt_ast' (line 308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 308, 8), 'tt_ast', remove_type_from_union(tt_ast_1257, types.NoneType))
        # Getting the type of 'self' (line 310)
        self_1258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 11), 'self')
        # Obtaining the member 'show_ast' of a type (line 310)
        show_ast_1259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 310, 11), self_1258, 'show_ast')
        # Testing if the type of an if condition is none (line 310)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 310, 8), show_ast_1259):
            pass
        else:
            
            # Testing the type of an if condition (line 310)
            if_condition_1260 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 310, 8), show_ast_1259)
            # Assigning a type to the variable 'if_condition_1260' (line 310)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 310, 8), 'if_condition_1260', if_condition_1260)
            # SSA begins for if statement (line 310)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to info(...): (line 311)
            # Processing the call arguments (line 311)
            
            # Call to dump_ast(...): (line 311)
            # Processing the call arguments (line 311)
            # Getting the type of 'tt_ast' (line 311)
            tt_ast_1263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 26), 'tt_ast', False)
            # Processing the call keyword arguments (line 311)
            kwargs_1264 = {}
            # Getting the type of 'dump_ast' (line 311)
            dump_ast_1262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 17), 'dump_ast', False)
            # Calling dump_ast(args, kwargs) (line 311)
            dump_ast_call_result_1265 = invoke(stypy.reporting.localization.Localization(__file__, 311, 17), dump_ast_1262, *[tt_ast_1263], **kwargs_1264)
            
            # Processing the call keyword arguments (line 311)
            kwargs_1266 = {}
            # Getting the type of 'info' (line 311)
            info_1261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 12), 'info', False)
            # Calling info(args, kwargs) (line 311)
            info_call_result_1267 = invoke(stypy.reporting.localization.Localization(__file__, 311, 12), info_1261, *[dump_ast_call_result_1265], **kwargs_1266)
            
            # SSA join for if statement (line 310)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # Call to info(...): (line 313)
        # Processing the call arguments (line 313)
        str_1269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 313, 13), 'str', '\n\n')
        # Processing the call keyword arguments (line 313)
        kwargs_1270 = {}
        # Getting the type of 'info' (line 313)
        info_1268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 8), 'info', False)
        # Calling info(args, kwargs) (line 313)
        info_call_result_1271 = invoke(stypy.reporting.localization.Localization(__file__, 313, 8), info_1268, *[str_1269], **kwargs_1270)
        
        
        # Call to info(...): (line 315)
        # Processing the call arguments (line 315)
        str_1273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 315, 13), 'str', '\nSTyPy: Automatic type information helper program code:\n')
        # Processing the call keyword arguments (line 315)
        kwargs_1274 = {}
        # Getting the type of 'info' (line 315)
        info_1272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 8), 'info', False)
        # Calling info(args, kwargs) (line 315)
        info_call_result_1275 = invoke(stypy.reporting.localization.Localization(__file__, 315, 8), info_1272, *[str_1273], **kwargs_1274)
        
        
        # Assigning a Call to a Name (line 316):
        
        # Call to get_type_data_autogeneration_program_source_code(...): (line 316)
        # Processing the call keyword arguments (line 316)
        kwargs_1278 = {}
        # Getting the type of 'self' (line 316)
        self_1276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 22), 'self', False)
        # Obtaining the member 'get_type_data_autogeneration_program_source_code' of a type (line 316)
        get_type_data_autogeneration_program_source_code_1277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 316, 22), self_1276, 'get_type_data_autogeneration_program_source_code')
        # Calling get_type_data_autogeneration_program_source_code(args, kwargs) (line 316)
        get_type_data_autogeneration_program_source_code_call_result_1279 = invoke(stypy.reporting.localization.Localization(__file__, 316, 22), get_type_data_autogeneration_program_source_code_1277, *[], **kwargs_1278)
        
        # Assigning a type to the variable 'tgen_source' (line 316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 316, 8), 'tgen_source', get_type_data_autogeneration_program_source_code_call_result_1279)
        
        # Call to info(...): (line 317)
        # Processing the call arguments (line 317)
        # Getting the type of 'tgen_source' (line 317)
        tgen_source_1281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 13), 'tgen_source', False)
        # Processing the call keyword arguments (line 317)
        kwargs_1282 = {}
        # Getting the type of 'info' (line 317)
        info_1280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 8), 'info', False)
        # Calling info(args, kwargs) (line 317)
        info_call_result_1283 = invoke(stypy.reporting.localization.Localization(__file__, 317, 8), info_1280, *[tgen_source_1281], **kwargs_1282)
        
        
        # Call to write_python_source_code(...): (line 318)
        # Processing the call arguments (line 318)
        
        # Call to get_stypy_type_data_autogenerator_program_file_path(...): (line 318)
        # Processing the call arguments (line 318)
        # Getting the type of 'self' (line 318)
        self_1286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 85), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 318)
        source_file_path_1287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 318, 85), self_1286, 'source_file_path')
        # Processing the call keyword arguments (line 318)
        kwargs_1288 = {}
        # Getting the type of 'get_stypy_type_data_autogenerator_program_file_path' (line 318)
        get_stypy_type_data_autogenerator_program_file_path_1285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 33), 'get_stypy_type_data_autogenerator_program_file_path', False)
        # Calling get_stypy_type_data_autogenerator_program_file_path(args, kwargs) (line 318)
        get_stypy_type_data_autogenerator_program_file_path_call_result_1289 = invoke(stypy.reporting.localization.Localization(__file__, 318, 33), get_stypy_type_data_autogenerator_program_file_path_1285, *[source_file_path_1287], **kwargs_1288)
        
        # Getting the type of 'tgen_source' (line 319)
        tgen_source_1290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 33), 'tgen_source', False)
        # Processing the call keyword arguments (line 318)
        kwargs_1291 = {}
        # Getting the type of 'write_python_source_code' (line 318)
        write_python_source_code_1284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 8), 'write_python_source_code', False)
        # Calling write_python_source_code(args, kwargs) (line 318)
        write_python_source_code_call_result_1292 = invoke(stypy.reporting.localization.Localization(__file__, 318, 8), write_python_source_code_1284, *[get_stypy_type_data_autogenerator_program_file_path_call_result_1289, tgen_source_1290], **kwargs_1291)
        
        
        
        # Call to exists(...): (line 321)
        # Processing the call arguments (line 321)
        
        # Call to get_stypy_type_data_file_path(...): (line 321)
        # Processing the call arguments (line 321)
        # Getting the type of 'self' (line 321)
        self_1297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 60), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 321)
        source_file_path_1298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 60), self_1297, 'source_file_path')
        # Processing the call keyword arguments (line 321)
        kwargs_1299 = {}
        # Getting the type of 'get_stypy_type_data_file_path' (line 321)
        get_stypy_type_data_file_path_1296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 30), 'get_stypy_type_data_file_path', False)
        # Calling get_stypy_type_data_file_path(args, kwargs) (line 321)
        get_stypy_type_data_file_path_call_result_1300 = invoke(stypy.reporting.localization.Localization(__file__, 321, 30), get_stypy_type_data_file_path_1296, *[source_file_path_1298], **kwargs_1299)
        
        # Processing the call keyword arguments (line 321)
        kwargs_1301 = {}
        # Getting the type of 'os' (line 321)
        os_1293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 15), 'os', False)
        # Obtaining the member 'path' of a type (line 321)
        path_1294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 15), os_1293, 'path')
        # Obtaining the member 'exists' of a type (line 321)
        exists_1295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 15), path_1294, 'exists')
        # Calling exists(args, kwargs) (line 321)
        exists_call_result_1302 = invoke(stypy.reporting.localization.Localization(__file__, 321, 15), exists_1295, *[get_stypy_type_data_file_path_call_result_1300], **kwargs_1301)
        
        # Applying the 'not' unary operator (line 321)
        result_not__1303 = python_operator(stypy.reporting.localization.Localization(__file__, 321, 11), 'not', exists_call_result_1302)
        
        # Testing if the type of an if condition is none (line 321)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 321, 8), result_not__1303):
            pass
        else:
            
            # Testing the type of an if condition (line 321)
            if_condition_1304 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 321, 8), result_not__1303)
            # Assigning a type to the variable 'if_condition_1304' (line 321)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 321, 8), 'if_condition_1304', if_condition_1304)
            # SSA begins for if statement (line 321)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to __run_program(...): (line 322)
            # Processing the call arguments (line 322)
            
            # Call to get_stypy_type_data_autogenerator_program_file_path(...): (line 322)
            # Processing the call arguments (line 322)
            # Getting the type of 'self' (line 322)
            self_1308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 83), 'self', False)
            # Obtaining the member 'source_file_path' of a type (line 322)
            source_file_path_1309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 83), self_1308, 'source_file_path')
            # Processing the call keyword arguments (line 322)
            kwargs_1310 = {}
            # Getting the type of 'get_stypy_type_data_autogenerator_program_file_path' (line 322)
            get_stypy_type_data_autogenerator_program_file_path_1307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 31), 'get_stypy_type_data_autogenerator_program_file_path', False)
            # Calling get_stypy_type_data_autogenerator_program_file_path(args, kwargs) (line 322)
            get_stypy_type_data_autogenerator_program_file_path_call_result_1311 = invoke(stypy.reporting.localization.Localization(__file__, 322, 31), get_stypy_type_data_autogenerator_program_file_path_1307, *[source_file_path_1309], **kwargs_1310)
            
            # Processing the call keyword arguments (line 322)
            kwargs_1312 = {}
            # Getting the type of 'self' (line 322)
            self_1305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 12), 'self', False)
            # Obtaining the member '__run_program' of a type (line 322)
            run_program_1306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 12), self_1305, '__run_program')
            # Calling __run_program(args, kwargs) (line 322)
            run_program_call_result_1313 = invoke(stypy.reporting.localization.Localization(__file__, 322, 12), run_program_1306, *[get_stypy_type_data_autogenerator_program_file_path_call_result_1311], **kwargs_1312)
            
            # SSA join for if statement (line 321)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # ################# End of 'create_automatic_type_data_autogenerator_program(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'create_automatic_type_data_autogenerator_program' in the type store
        # Getting the type of 'stypy_return_type' (line 298)
        stypy_return_type_1314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1314)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'create_automatic_type_data_autogenerator_program'
        return stypy_return_type_1314


    @norecursion
    def get_type_inference_program_ast(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_type_inference_program_ast'
        module_type_store = module_type_store.open_function_context('get_type_inference_program_ast', 326, 4, False)
        # Assigning a type to the variable 'self' (line 327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.get_type_inference_program_ast.__dict__.__setitem__('stypy_localization', localization)
        Stypy.get_type_inference_program_ast.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.get_type_inference_program_ast.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.get_type_inference_program_ast.__dict__.__setitem__('stypy_function_name', 'Stypy.get_type_inference_program_ast')
        Stypy.get_type_inference_program_ast.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.get_type_inference_program_ast.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.get_type_inference_program_ast.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.get_type_inference_program_ast.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.get_type_inference_program_ast.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.get_type_inference_program_ast.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.get_type_inference_program_ast.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.get_type_inference_program_ast', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_type_inference_program_ast', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_type_inference_program_ast(...)' code ##################

        str_1315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 330, (-1)), 'str', '\n        Get the generated type inference program AST\n        :return:\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 331)
        # Getting the type of 'self' (line 331)
        self_1316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 11), 'self')
        # Obtaining the member 'type_inference_ast_tree' of a type (line 331)
        type_inference_ast_tree_1317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 11), self_1316, 'type_inference_ast_tree')
        # Getting the type of 'None' (line 331)
        None_1318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 43), 'None')
        
        (may_be_1319, more_types_in_union_1320) = may_be_none(type_inference_ast_tree_1317, None_1318)

        if may_be_1319:

            if more_types_in_union_1320:
                # Runtime conditional SSA (line 331)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Attribute (line 332):
            # Getting the type of 'self' (line 332)
            self_1321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 43), 'self')
            # Obtaining the member 'original_ast_tree' of a type (line 332)
            original_ast_tree_1322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 43), self_1321, 'original_ast_tree')
            # Getting the type of 'self' (line 332)
            self_1323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 12), 'self')
            # Setting the type of the member 'type_inference_ast_tree' of a type (line 332)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 12), self_1323, 'type_inference_ast_tree', original_ast_tree_1322)
            
            # Getting the type of 'self' (line 335)
            self_1324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 27), 'self')
            # Obtaining the member 'visitors' of a type (line 335)
            visitors_1325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 335, 27), self_1324, 'visitors')
            # Assigning a type to the variable 'visitors_1325' (line 335)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 335, 12), 'visitors_1325', visitors_1325)
            # Testing if the for loop is going to be iterated (line 335)
            # Testing the type of a for loop iterable (line 335)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 335, 12), visitors_1325)

            if will_iterate_loop(stypy.reporting.localization.Localization(__file__, 335, 12), visitors_1325):
                # Getting the type of the for loop variable (line 335)
                for_loop_var_1326 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 335, 12), visitors_1325)
                # Assigning a type to the variable 'visitor' (line 335)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 335, 12), 'visitor', for_loop_var_1326)
                # SSA begins for a for statement (line 335)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
                # Getting the type of 'self' (line 336)
                self_1327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 19), 'self')
                # Obtaining the member 'verbose' of a type (line 336)
                verbose_1328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 336, 19), self_1327, 'verbose')
                # Testing if the type of an if condition is none (line 336)

                if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 336, 16), verbose_1328):
                    pass
                else:
                    
                    # Testing the type of an if condition (line 336)
                    if_condition_1329 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 336, 16), verbose_1328)
                    # Assigning a type to the variable 'if_condition_1329' (line 336)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 336, 16), 'if_condition_1329', if_condition_1329)
                    # SSA begins for if statement (line 336)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                    
                    # Call to info(...): (line 337)
                    # Processing the call arguments (line 337)
                    
                    # Call to format(...): (line 337)
                    # Processing the call arguments (line 337)
                    
                    # Call to type(...): (line 337)
                    # Processing the call arguments (line 337)
                    # Getting the type of 'visitor' (line 337)
                    visitor_1334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 61), 'visitor', False)
                    # Processing the call keyword arguments (line 337)
                    kwargs_1335 = {}
                    # Getting the type of 'type' (line 337)
                    type_1333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 56), 'type', False)
                    # Calling type(args, kwargs) (line 337)
                    type_call_result_1336 = invoke(stypy.reporting.localization.Localization(__file__, 337, 56), type_1333, *[visitor_1334], **kwargs_1335)
                    
                    # Obtaining the member '__name__' of a type (line 337)
                    name___1337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 337, 56), type_call_result_1336, '__name__')
                    # Processing the call keyword arguments (line 337)
                    kwargs_1338 = {}
                    str_1331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 337, 25), 'str', "USING '{0}' VISITOR\n")
                    # Obtaining the member 'format' of a type (line 337)
                    format_1332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 337, 25), str_1331, 'format')
                    # Calling format(args, kwargs) (line 337)
                    format_call_result_1339 = invoke(stypy.reporting.localization.Localization(__file__, 337, 25), format_1332, *[name___1337], **kwargs_1338)
                    
                    # Processing the call keyword arguments (line 337)
                    kwargs_1340 = {}
                    # Getting the type of 'info' (line 337)
                    info_1330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 20), 'info', False)
                    # Calling info(args, kwargs) (line 337)
                    info_call_result_1341 = invoke(stypy.reporting.localization.Localization(__file__, 337, 20), info_1330, *[format_call_result_1339], **kwargs_1340)
                    
                    # SSA join for if statement (line 336)
                    module_type_store = module_type_store.join_ssa_context()
                    

                
                # Call to isinstance(...): (line 341)
                # Processing the call arguments (line 341)
                # Getting the type of 'visitor' (line 341)
                visitor_1343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 30), 'visitor', False)
                # Getting the type of 'ast' (line 341)
                ast_1344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 39), 'ast', False)
                # Obtaining the member 'NodeVisitor' of a type (line 341)
                NodeVisitor_1345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 341, 39), ast_1344, 'NodeVisitor')
                # Processing the call keyword arguments (line 341)
                kwargs_1346 = {}
                # Getting the type of 'isinstance' (line 341)
                isinstance_1342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 19), 'isinstance', False)
                # Calling isinstance(args, kwargs) (line 341)
                isinstance_call_result_1347 = invoke(stypy.reporting.localization.Localization(__file__, 341, 19), isinstance_1342, *[visitor_1343, NodeVisitor_1345], **kwargs_1346)
                
                # Testing if the type of an if condition is none (line 341)

                if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 341, 16), isinstance_call_result_1347):
                    
                    # Call to visit(...): (line 346)
                    # Processing the call arguments (line 346)
                    # Getting the type of 'self' (line 346)
                    self_1359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 34), 'self', False)
                    # Obtaining the member 'type_inference_ast_tree' of a type (line 346)
                    type_inference_ast_tree_1360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 34), self_1359, 'type_inference_ast_tree')
                    # Processing the call keyword arguments (line 346)
                    kwargs_1361 = {}
                    # Getting the type of 'visitor' (line 346)
                    visitor_1357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 20), 'visitor', False)
                    # Obtaining the member 'visit' of a type (line 346)
                    visit_1358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 20), visitor_1357, 'visit')
                    # Calling visit(args, kwargs) (line 346)
                    visit_call_result_1362 = invoke(stypy.reporting.localization.Localization(__file__, 346, 20), visit_1358, *[type_inference_ast_tree_1360], **kwargs_1361)
                    
                else:
                    
                    # Testing the type of an if condition (line 341)
                    if_condition_1348 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 341, 16), isinstance_call_result_1347)
                    # Assigning a type to the variable 'if_condition_1348' (line 341)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 341, 16), 'if_condition_1348', if_condition_1348)
                    # SSA begins for if statement (line 341)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                    
                    # Assigning a Call to a Name (line 342):
                    
                    # Call to visit(...): (line 342)
                    # Processing the call arguments (line 342)
                    # Getting the type of 'self' (line 342)
                    self_1351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 46), 'self', False)
                    # Obtaining the member 'type_inference_ast_tree' of a type (line 342)
                    type_inference_ast_tree_1352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 342, 46), self_1351, 'type_inference_ast_tree')
                    # Processing the call keyword arguments (line 342)
                    kwargs_1353 = {}
                    # Getting the type of 'visitor' (line 342)
                    visitor_1349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 32), 'visitor', False)
                    # Obtaining the member 'visit' of a type (line 342)
                    visit_1350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 342, 32), visitor_1349, 'visit')
                    # Calling visit(args, kwargs) (line 342)
                    visit_call_result_1354 = invoke(stypy.reporting.localization.Localization(__file__, 342, 32), visit_1350, *[type_inference_ast_tree_1352], **kwargs_1353)
                    
                    # Assigning a type to the variable 'temp_tree' (line 342)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 342, 20), 'temp_tree', visit_call_result_1354)
                    
                    # Assigning a Name to a Attribute (line 343):
                    # Getting the type of 'temp_tree' (line 343)
                    temp_tree_1355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 51), 'temp_tree')
                    # Getting the type of 'self' (line 343)
                    self_1356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 20), 'self')
                    # Setting the type of the member 'type_inference_ast_tree' of a type (line 343)
                    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 20), self_1356, 'type_inference_ast_tree', temp_tree_1355)
                    # SSA branch for the else part of an if statement (line 341)
                    module_type_store.open_ssa_branch('else')
                    
                    # Call to visit(...): (line 346)
                    # Processing the call arguments (line 346)
                    # Getting the type of 'self' (line 346)
                    self_1359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 34), 'self', False)
                    # Obtaining the member 'type_inference_ast_tree' of a type (line 346)
                    type_inference_ast_tree_1360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 34), self_1359, 'type_inference_ast_tree')
                    # Processing the call keyword arguments (line 346)
                    kwargs_1361 = {}
                    # Getting the type of 'visitor' (line 346)
                    visitor_1357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 20), 'visitor', False)
                    # Obtaining the member 'visit' of a type (line 346)
                    visit_1358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 20), visitor_1357, 'visit')
                    # Calling visit(args, kwargs) (line 346)
                    visit_call_result_1362 = invoke(stypy.reporting.localization.Localization(__file__, 346, 20), visit_1358, *[type_inference_ast_tree_1360], **kwargs_1361)
                    
                    # SSA join for if statement (line 341)
                    module_type_store = module_type_store.join_ssa_context()
                    

                # Getting the type of 'self' (line 348)
                self_1363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 19), 'self')
                # Obtaining the member 'show_ast' of a type (line 348)
                show_ast_1364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 348, 19), self_1363, 'show_ast')
                # Testing if the type of an if condition is none (line 348)

                if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 348, 16), show_ast_1364):
                    pass
                else:
                    
                    # Testing the type of an if condition (line 348)
                    if_condition_1365 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 348, 16), show_ast_1364)
                    # Assigning a type to the variable 'if_condition_1365' (line 348)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 348, 16), 'if_condition_1365', if_condition_1365)
                    # SSA begins for if statement (line 348)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                    
                    # Call to info(...): (line 349)
                    # Processing the call arguments (line 349)
                    
                    # Call to dump_ast(...): (line 349)
                    # Processing the call arguments (line 349)
                    # Getting the type of 'self' (line 349)
                    self_1368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 34), 'self', False)
                    # Obtaining the member 'type_inference_ast_tree' of a type (line 349)
                    type_inference_ast_tree_1369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 34), self_1368, 'type_inference_ast_tree')
                    # Processing the call keyword arguments (line 349)
                    kwargs_1370 = {}
                    # Getting the type of 'dump_ast' (line 349)
                    dump_ast_1367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 25), 'dump_ast', False)
                    # Calling dump_ast(args, kwargs) (line 349)
                    dump_ast_call_result_1371 = invoke(stypy.reporting.localization.Localization(__file__, 349, 25), dump_ast_1367, *[type_inference_ast_tree_1369], **kwargs_1370)
                    
                    # Processing the call keyword arguments (line 349)
                    kwargs_1372 = {}
                    # Getting the type of 'info' (line 349)
                    info_1366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 20), 'info', False)
                    # Calling info(args, kwargs) (line 349)
                    info_call_result_1373 = invoke(stypy.reporting.localization.Localization(__file__, 349, 20), info_1366, *[dump_ast_call_result_1371], **kwargs_1372)
                    
                    # SSA join for if statement (line 348)
                    module_type_store = module_type_store.join_ssa_context()
                    

                # SSA join for a for statement
                module_type_store = module_type_store.join_ssa_context()

            
            
            
            # SSA begins for try-except statement (line 350)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Call to fix_missing_locations(...): (line 352)
            # Processing the call arguments (line 352)
            # Getting the type of 'self' (line 352)
            self_1376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 42), 'self', False)
            # Obtaining the member 'type_inference_ast_tree' of a type (line 352)
            type_inference_ast_tree_1377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 42), self_1376, 'type_inference_ast_tree')
            # Processing the call keyword arguments (line 352)
            kwargs_1378 = {}
            # Getting the type of 'ast' (line 352)
            ast_1374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 16), 'ast', False)
            # Obtaining the member 'fix_missing_locations' of a type (line 352)
            fix_missing_locations_1375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 16), ast_1374, 'fix_missing_locations')
            # Calling fix_missing_locations(args, kwargs) (line 352)
            fix_missing_locations_call_result_1379 = invoke(stypy.reporting.localization.Localization(__file__, 352, 16), fix_missing_locations_1375, *[type_inference_ast_tree_1377], **kwargs_1378)
            
            # SSA branch for the except part of a try statement (line 350)
            # SSA branch for the except '<any exception>' branch of a try statement (line 350)
            module_type_store.open_ssa_branch('except')
            pass
            # SSA join for try-except statement (line 350)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_1320:
                # SSA join for if statement (line 331)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 356)
        self_1380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 15), 'self')
        # Obtaining the member 'type_inference_ast_tree' of a type (line 356)
        type_inference_ast_tree_1381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 15), self_1380, 'type_inference_ast_tree')
        # Assigning a type to the variable 'stypy_return_type' (line 356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 8), 'stypy_return_type', type_inference_ast_tree_1381)
        
        # ################# End of 'get_type_inference_program_ast(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_type_inference_program_ast' in the type store
        # Getting the type of 'stypy_return_type' (line 326)
        stypy_return_type_1382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1382)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_type_inference_program_ast'
        return stypy_return_type_1382


    @norecursion
    def get_type_inference_program_source_code(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_type_inference_program_source_code'
        module_type_store = module_type_store.open_function_context('get_type_inference_program_source_code', 358, 4, False)
        # Assigning a type to the variable 'self' (line 359)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.get_type_inference_program_source_code.__dict__.__setitem__('stypy_localization', localization)
        Stypy.get_type_inference_program_source_code.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.get_type_inference_program_source_code.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.get_type_inference_program_source_code.__dict__.__setitem__('stypy_function_name', 'Stypy.get_type_inference_program_source_code')
        Stypy.get_type_inference_program_source_code.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.get_type_inference_program_source_code.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.get_type_inference_program_source_code.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.get_type_inference_program_source_code.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.get_type_inference_program_source_code.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.get_type_inference_program_source_code.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.get_type_inference_program_source_code.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.get_type_inference_program_source_code', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_type_inference_program_source_code', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_type_inference_program_source_code(...)' code ##################

        str_1383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 362, (-1)), 'str', '\n        Generates the source code for the type inference program, once its AST has been calculated\n        :return:\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 363)
        # Getting the type of 'self' (line 363)
        self_1384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 11), 'self')
        # Obtaining the member 'type_inference_source_code' of a type (line 363)
        type_inference_source_code_1385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 363, 11), self_1384, 'type_inference_source_code')
        # Getting the type of 'None' (line 363)
        None_1386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 46), 'None')
        
        (may_be_1387, more_types_in_union_1388) = may_be_none(type_inference_source_code_1385, None_1386)

        if may_be_1387:

            if more_types_in_union_1388:
                # Runtime conditional SSA (line 363)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 364):
            
            # Call to generate_code(...): (line 364)
            # Processing the call keyword arguments (line 364)
            kwargs_1397 = {}
            
            # Call to PythonSrcGeneratorVisitor(...): (line 364)
            # Processing the call arguments (line 364)
            
            # Call to get_type_inference_program_ast(...): (line 365)
            # Processing the call keyword arguments (line 365)
            kwargs_1392 = {}
            # Getting the type of 'self' (line 365)
            self_1390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 16), 'self', False)
            # Obtaining the member 'get_type_inference_program_ast' of a type (line 365)
            get_type_inference_program_ast_1391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 16), self_1390, 'get_type_inference_program_ast')
            # Calling get_type_inference_program_ast(args, kwargs) (line 365)
            get_type_inference_program_ast_call_result_1393 = invoke(stypy.reporting.localization.Localization(__file__, 365, 16), get_type_inference_program_ast_1391, *[], **kwargs_1392)
            
            # Processing the call keyword arguments (line 364)
            kwargs_1394 = {}
            # Getting the type of 'PythonSrcGeneratorVisitor' (line 364)
            PythonSrcGeneratorVisitor_1389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 46), 'PythonSrcGeneratorVisitor', False)
            # Calling PythonSrcGeneratorVisitor(args, kwargs) (line 364)
            PythonSrcGeneratorVisitor_call_result_1395 = invoke(stypy.reporting.localization.Localization(__file__, 364, 46), PythonSrcGeneratorVisitor_1389, *[get_type_inference_program_ast_call_result_1393], **kwargs_1394)
            
            # Obtaining the member 'generate_code' of a type (line 364)
            generate_code_1396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 364, 46), PythonSrcGeneratorVisitor_call_result_1395, 'generate_code')
            # Calling generate_code(args, kwargs) (line 364)
            generate_code_call_result_1398 = invoke(stypy.reporting.localization.Localization(__file__, 364, 46), generate_code_1396, *[], **kwargs_1397)
            
            # Getting the type of 'self' (line 364)
            self_1399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 12), 'self')
            # Setting the type of the member 'type_inference_source_code' of a type (line 364)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 364, 12), self_1399, 'type_inference_source_code', generate_code_call_result_1398)
            
            # Getting the type of 'self' (line 367)
            self_1400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 27), 'self')
            # Obtaining the member 'visitors' of a type (line 367)
            visitors_1401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 367, 27), self_1400, 'visitors')
            # Assigning a type to the variable 'visitors_1401' (line 367)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 367, 12), 'visitors_1401', visitors_1401)
            # Testing if the for loop is going to be iterated (line 367)
            # Testing the type of a for loop iterable (line 367)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 367, 12), visitors_1401)

            if will_iterate_loop(stypy.reporting.localization.Localization(__file__, 367, 12), visitors_1401):
                # Getting the type of the for loop variable (line 367)
                for_loop_var_1402 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 367, 12), visitors_1401)
                # Assigning a type to the variable 'visitor' (line 367)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 367, 12), 'visitor', for_loop_var_1402)
                # SSA begins for a for statement (line 367)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
                
                # Call to isinstance(...): (line 368)
                # Processing the call arguments (line 368)
                # Getting the type of 'visitor' (line 368)
                visitor_1404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 30), 'visitor', False)
                # Getting the type of 'type_inference_visitor_copy' (line 368)
                type_inference_visitor_copy_1405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 39), 'type_inference_visitor_copy', False)
                # Obtaining the member 'TypeInferenceGeneratorVisitor' of a type (line 368)
                TypeInferenceGeneratorVisitor_1406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 368, 39), type_inference_visitor_copy_1405, 'TypeInferenceGeneratorVisitor')
                # Processing the call keyword arguments (line 368)
                kwargs_1407 = {}
                # Getting the type of 'isinstance' (line 368)
                isinstance_1403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 19), 'isinstance', False)
                # Calling isinstance(args, kwargs) (line 368)
                isinstance_call_result_1408 = invoke(stypy.reporting.localization.Localization(__file__, 368, 19), isinstance_1403, *[visitor_1404, TypeInferenceGeneratorVisitor_1406], **kwargs_1407)
                
                # Testing if the type of an if condition is none (line 368)

                if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 368, 16), isinstance_call_result_1408):
                    pass
                else:
                    
                    # Testing the type of an if condition (line 368)
                    if_condition_1409 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 368, 16), isinstance_call_result_1408)
                    # Assigning a type to the variable 'if_condition_1409' (line 368)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 368, 16), 'if_condition_1409', if_condition_1409)
                    # SSA begins for if statement (line 368)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                    
                    # Getting the type of 'self' (line 369)
                    self_1410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 20), 'self')
                    # Obtaining the member 'type_inference_source_code' of a type (line 369)
                    type_inference_source_code_1411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 369, 20), self_1410, 'type_inference_source_code')
                    
                    # Call to get_postfix_src_code(...): (line 369)
                    # Processing the call keyword arguments (line 369)
                    kwargs_1415 = {}
                    # Getting the type of 'type_inference_visitor_copy' (line 369)
                    type_inference_visitor_copy_1412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 55), 'type_inference_visitor_copy', False)
                    # Obtaining the member 'TypeInferenceGeneratorVisitor' of a type (line 369)
                    TypeInferenceGeneratorVisitor_1413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 369, 55), type_inference_visitor_copy_1412, 'TypeInferenceGeneratorVisitor')
                    # Obtaining the member 'get_postfix_src_code' of a type (line 369)
                    get_postfix_src_code_1414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 369, 55), TypeInferenceGeneratorVisitor_1413, 'get_postfix_src_code')
                    # Calling get_postfix_src_code(args, kwargs) (line 369)
                    get_postfix_src_code_call_result_1416 = invoke(stypy.reporting.localization.Localization(__file__, 369, 55), get_postfix_src_code_1414, *[], **kwargs_1415)
                    
                    # Applying the binary operator '+=' (line 369)
                    result_iadd_1417 = python_operator(stypy.reporting.localization.Localization(__file__, 369, 20), '+=', type_inference_source_code_1411, get_postfix_src_code_call_result_1416)
                    # Getting the type of 'self' (line 369)
                    self_1418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 20), 'self')
                    # Setting the type of the member 'type_inference_source_code' of a type (line 369)
                    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 369, 20), self_1418, 'type_inference_source_code', result_iadd_1417)
                    
                    # SSA join for if statement (line 368)
                    module_type_store = module_type_store.join_ssa_context()
                    

                # SSA join for a for statement
                module_type_store = module_type_store.join_ssa_context()

            

            if more_types_in_union_1388:
                # SSA join for if statement (line 363)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 372)
        self_1419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 15), 'self')
        # Obtaining the member 'type_inference_source_code' of a type (line 372)
        type_inference_source_code_1420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 372, 15), self_1419, 'type_inference_source_code')
        # Assigning a type to the variable 'stypy_return_type' (line 372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 8), 'stypy_return_type', type_inference_source_code_1420)
        
        # ################# End of 'get_type_inference_program_source_code(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_type_inference_program_source_code' in the type store
        # Getting the type of 'stypy_return_type' (line 358)
        stypy_return_type_1421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1421)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_type_inference_program_source_code'
        return stypy_return_type_1421


    @norecursion
    def create_type_inference_program(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'create_type_inference_program'
        module_type_store = module_type_store.open_function_context('create_type_inference_program', 374, 4, False)
        # Assigning a type to the variable 'self' (line 375)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 375, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.create_type_inference_program.__dict__.__setitem__('stypy_localization', localization)
        Stypy.create_type_inference_program.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.create_type_inference_program.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.create_type_inference_program.__dict__.__setitem__('stypy_function_name', 'Stypy.create_type_inference_program')
        Stypy.create_type_inference_program.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.create_type_inference_program.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.create_type_inference_program.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.create_type_inference_program.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.create_type_inference_program.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.create_type_inference_program.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.create_type_inference_program.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.create_type_inference_program', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'create_type_inference_program', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'create_type_inference_program(...)' code ##################

        str_1422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 381, (-1)), 'str', '\n        Perform the full cycle of generating the type inference program AST (get_type_inference_program_ast) -\n        generate the source code from this AST (get_type_inference_program_source_code) - write this source code to a\n        file (write_python_source_code). This method should be called when generating the type inference program from\n        a Python source file, instead of the individual ones, provided in a public fashion just for logging purposes.\n        :return:\n        ')
        # Getting the type of 'self' (line 386)
        self_1423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 11), 'self')
        # Obtaining the member 'verbose' of a type (line 386)
        verbose_1424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 11), self_1423, 'verbose')
        # Testing if the type of an if condition is none (line 386)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 386, 8), verbose_1424):
            pass
        else:
            
            # Testing the type of an if condition (line 386)
            if_condition_1425 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 386, 8), verbose_1424)
            # Assigning a type to the variable 'if_condition_1425' (line 386)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 8), 'if_condition_1425', if_condition_1425)
            # SSA begins for if statement (line 386)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to info(...): (line 387)
            # Processing the call arguments (line 387)
            str_1427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 387, 17), 'str', '\nSTyPy: Calculating type inference program AST...\n')
            # Processing the call keyword arguments (line 387)
            kwargs_1428 = {}
            # Getting the type of 'info' (line 387)
            info_1426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 12), 'info', False)
            # Calling info(args, kwargs) (line 387)
            info_call_result_1429 = invoke(stypy.reporting.localization.Localization(__file__, 387, 12), info_1426, *[str_1427], **kwargs_1428)
            
            # SSA join for if statement (line 386)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # Assigning a Call to a Name (line 388):
        
        # Call to get_type_inference_program_ast(...): (line 388)
        # Processing the call keyword arguments (line 388)
        kwargs_1432 = {}
        # Getting the type of 'self' (line 388)
        self_1430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 17), 'self', False)
        # Obtaining the member 'get_type_inference_program_ast' of a type (line 388)
        get_type_inference_program_ast_1431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 17), self_1430, 'get_type_inference_program_ast')
        # Calling get_type_inference_program_ast(args, kwargs) (line 388)
        get_type_inference_program_ast_call_result_1433 = invoke(stypy.reporting.localization.Localization(__file__, 388, 17), get_type_inference_program_ast_1431, *[], **kwargs_1432)
        
        # Assigning a type to the variable 'ti_ast' (line 388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 388, 8), 'ti_ast', get_type_inference_program_ast_call_result_1433)
        # Getting the type of 'self' (line 390)
        self_1434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 11), 'self')
        # Obtaining the member 'show_ast' of a type (line 390)
        show_ast_1435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 11), self_1434, 'show_ast')
        # Testing if the type of an if condition is none (line 390)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 390, 8), show_ast_1435):
            pass
        else:
            
            # Testing the type of an if condition (line 390)
            if_condition_1436 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 390, 8), show_ast_1435)
            # Assigning a type to the variable 'if_condition_1436' (line 390)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 8), 'if_condition_1436', if_condition_1436)
            # SSA begins for if statement (line 390)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to info(...): (line 391)
            # Processing the call arguments (line 391)
            
            # Call to dump_ast(...): (line 391)
            # Processing the call arguments (line 391)
            # Getting the type of 'ti_ast' (line 391)
            ti_ast_1439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 26), 'ti_ast', False)
            # Processing the call keyword arguments (line 391)
            kwargs_1440 = {}
            # Getting the type of 'dump_ast' (line 391)
            dump_ast_1438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 17), 'dump_ast', False)
            # Calling dump_ast(args, kwargs) (line 391)
            dump_ast_call_result_1441 = invoke(stypy.reporting.localization.Localization(__file__, 391, 17), dump_ast_1438, *[ti_ast_1439], **kwargs_1440)
            
            # Processing the call keyword arguments (line 391)
            kwargs_1442 = {}
            # Getting the type of 'info' (line 391)
            info_1437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 12), 'info', False)
            # Calling info(args, kwargs) (line 391)
            info_call_result_1443 = invoke(stypy.reporting.localization.Localization(__file__, 391, 12), info_1437, *[dump_ast_call_result_1441], **kwargs_1442)
            
            # SSA join for if statement (line 390)
            module_type_store = module_type_store.join_ssa_context()
            

        # Getting the type of 'self' (line 393)
        self_1444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 11), 'self')
        # Obtaining the member 'verbose' of a type (line 393)
        verbose_1445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 11), self_1444, 'verbose')
        # Testing if the type of an if condition is none (line 393)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 393, 8), verbose_1445):
            pass
        else:
            
            # Testing the type of an if condition (line 393)
            if_condition_1446 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 393, 8), verbose_1445)
            # Assigning a type to the variable 'if_condition_1446' (line 393)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 8), 'if_condition_1446', if_condition_1446)
            # SSA begins for if statement (line 393)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to info(...): (line 394)
            # Processing the call arguments (line 394)
            str_1448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 394, 17), 'str', '\n\n')
            # Processing the call keyword arguments (line 394)
            kwargs_1449 = {}
            # Getting the type of 'info' (line 394)
            info_1447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 12), 'info', False)
            # Calling info(args, kwargs) (line 394)
            info_call_result_1450 = invoke(stypy.reporting.localization.Localization(__file__, 394, 12), info_1447, *[str_1448], **kwargs_1449)
            
            
            # Call to info(...): (line 395)
            # Processing the call arguments (line 395)
            str_1452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 395, 17), 'str', '\nSTyPy: Type inference program source code:\n')
            # Processing the call keyword arguments (line 395)
            kwargs_1453 = {}
            # Getting the type of 'info' (line 395)
            info_1451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 12), 'info', False)
            # Calling info(args, kwargs) (line 395)
            info_call_result_1454 = invoke(stypy.reporting.localization.Localization(__file__, 395, 12), info_1451, *[str_1452], **kwargs_1453)
            
            # SSA join for if statement (line 393)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # Assigning a Call to a Name (line 397):
        
        # Call to get_type_inference_program_source_code(...): (line 397)
        # Processing the call keyword arguments (line 397)
        kwargs_1457 = {}
        # Getting the type of 'self' (line 397)
        self_1455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 22), 'self', False)
        # Obtaining the member 'get_type_inference_program_source_code' of a type (line 397)
        get_type_inference_program_source_code_1456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 397, 22), self_1455, 'get_type_inference_program_source_code')
        # Calling get_type_inference_program_source_code(args, kwargs) (line 397)
        get_type_inference_program_source_code_call_result_1458 = invoke(stypy.reporting.localization.Localization(__file__, 397, 22), get_type_inference_program_source_code_1456, *[], **kwargs_1457)
        
        # Assigning a type to the variable 'tinf_source' (line 397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 397, 8), 'tinf_source', get_type_inference_program_source_code_call_result_1458)
        
        # Call to info(...): (line 398)
        # Processing the call arguments (line 398)
        # Getting the type of 'tinf_source' (line 398)
        tinf_source_1460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 13), 'tinf_source', False)
        # Processing the call keyword arguments (line 398)
        kwargs_1461 = {}
        # Getting the type of 'info' (line 398)
        info_1459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 8), 'info', False)
        # Calling info(args, kwargs) (line 398)
        info_call_result_1462 = invoke(stypy.reporting.localization.Localization(__file__, 398, 8), info_1459, *[tinf_source_1460], **kwargs_1461)
        
        
        # Call to write_python_source_code(...): (line 400)
        # Processing the call arguments (line 400)
        
        # Call to get_stypy_type_inference_program_file_path(...): (line 400)
        # Processing the call arguments (line 400)
        # Getting the type of 'self' (line 400)
        self_1465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 76), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 400)
        source_file_path_1466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 400, 76), self_1465, 'source_file_path')
        # Processing the call keyword arguments (line 400)
        kwargs_1467 = {}
        # Getting the type of 'get_stypy_type_inference_program_file_path' (line 400)
        get_stypy_type_inference_program_file_path_1464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 33), 'get_stypy_type_inference_program_file_path', False)
        # Calling get_stypy_type_inference_program_file_path(args, kwargs) (line 400)
        get_stypy_type_inference_program_file_path_call_result_1468 = invoke(stypy.reporting.localization.Localization(__file__, 400, 33), get_stypy_type_inference_program_file_path_1464, *[source_file_path_1466], **kwargs_1467)
        
        # Getting the type of 'tinf_source' (line 400)
        tinf_source_1469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 100), 'tinf_source', False)
        # Processing the call keyword arguments (line 400)
        kwargs_1470 = {}
        # Getting the type of 'write_python_source_code' (line 400)
        write_python_source_code_1463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 8), 'write_python_source_code', False)
        # Calling write_python_source_code(args, kwargs) (line 400)
        write_python_source_code_call_result_1471 = invoke(stypy.reporting.localization.Localization(__file__, 400, 8), write_python_source_code_1463, *[get_stypy_type_inference_program_file_path_call_result_1468, tinf_source_1469], **kwargs_1470)
        
        
        # ################# End of 'create_type_inference_program(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'create_type_inference_program' in the type store
        # Getting the type of 'stypy_return_type' (line 374)
        stypy_return_type_1472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1472)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'create_type_inference_program'
        return stypy_return_type_1472


    @norecursion
    def __run_type_inference(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__run_type_inference'
        module_type_store = module_type_store.open_function_context('__run_type_inference', 404, 4, False)
        # Assigning a type to the variable 'self' (line 405)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 405, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.__run_type_inference.__dict__.__setitem__('stypy_localization', localization)
        Stypy.__run_type_inference.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.__run_type_inference.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.__run_type_inference.__dict__.__setitem__('stypy_function_name', 'Stypy.__run_type_inference')
        Stypy.__run_type_inference.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.__run_type_inference.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.__run_type_inference.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.__run_type_inference.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.__run_type_inference.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.__run_type_inference.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.__run_type_inference.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.__run_type_inference', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__run_type_inference', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__run_type_inference(...)' code ##################

        str_1473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, (-1)), 'str', '\n        Runs the type inference program of the source represented by this Stypy object, generating a type data file\n        (if it does not exist) in order to test the type inference results against these data, provided this option\n        is enabled. Finally, it generates the equivalent type annotated program, if this option is enabled.\n        :return:\n        ')
        # Getting the type of 'self' (line 411)
        self_1474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 11), 'self')
        # Obtaining the member 'verbose' of a type (line 411)
        verbose_1475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 11), self_1474, 'verbose')
        # Testing if the type of an if condition is none (line 411)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 411, 8), verbose_1475):
            pass
        else:
            
            # Testing the type of an if condition (line 411)
            if_condition_1476 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 411, 8), verbose_1475)
            # Assigning a type to the variable 'if_condition_1476' (line 411)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 8), 'if_condition_1476', if_condition_1476)
            # SSA begins for if statement (line 411)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to info(...): (line 412)
            # Processing the call arguments (line 412)
            str_1478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 412, 17), 'str', '\nSTyPy: Running type inference program...\n')
            # Processing the call keyword arguments (line 412)
            kwargs_1479 = {}
            # Getting the type of 'info' (line 412)
            info_1477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 12), 'info', False)
            # Calling info(args, kwargs) (line 412)
            info_call_result_1480 = invoke(stypy.reporting.localization.Localization(__file__, 412, 12), info_1477, *[str_1478], **kwargs_1479)
            
            # SSA join for if statement (line 411)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # Call to __run_type_inference_program(...): (line 427)
        # Processing the call arguments (line 427)
        
        # Call to get_stypy_type_inference_program_file_path(...): (line 427)
        # Processing the call arguments (line 427)
        # Getting the type of 'self' (line 427)
        self_1484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 85), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 427)
        source_file_path_1485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 427, 85), self_1484, 'source_file_path')
        # Processing the call keyword arguments (line 427)
        kwargs_1486 = {}
        # Getting the type of 'get_stypy_type_inference_program_file_path' (line 427)
        get_stypy_type_inference_program_file_path_1483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 42), 'get_stypy_type_inference_program_file_path', False)
        # Calling get_stypy_type_inference_program_file_path(args, kwargs) (line 427)
        get_stypy_type_inference_program_file_path_call_result_1487 = invoke(stypy.reporting.localization.Localization(__file__, 427, 42), get_stypy_type_inference_program_file_path_1483, *[source_file_path_1485], **kwargs_1486)
        
        # Processing the call keyword arguments (line 427)
        kwargs_1488 = {}
        # Getting the type of 'self' (line 427)
        self_1481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 8), 'self', False)
        # Obtaining the member '__run_type_inference_program' of a type (line 427)
        run_type_inference_program_1482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 427, 8), self_1481, '__run_type_inference_program')
        # Calling __run_type_inference_program(args, kwargs) (line 427)
        run_type_inference_program_call_result_1489 = invoke(stypy.reporting.localization.Localization(__file__, 427, 8), run_type_inference_program_1482, *[get_stypy_type_inference_program_file_path_call_result_1487], **kwargs_1488)
        
        # Getting the type of 'self' (line 430)
        self_1490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 11), 'self')
        # Obtaining the member 'generate_type_annotated_program' of a type (line 430)
        generate_type_annotated_program_1491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 430, 11), self_1490, 'generate_type_annotated_program')
        # Testing if the type of an if condition is none (line 430)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 430, 8), generate_type_annotated_program_1491):
            pass
        else:
            
            # Testing the type of an if condition (line 430)
            if_condition_1492 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 430, 8), generate_type_annotated_program_1491)
            # Assigning a type to the variable 'if_condition_1492' (line 430)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 430, 8), 'if_condition_1492', if_condition_1492)
            # SSA begins for if statement (line 430)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to create_type_annotated_program(...): (line 431)
            # Processing the call keyword arguments (line 431)
            kwargs_1495 = {}
            # Getting the type of 'self' (line 431)
            self_1493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 12), 'self', False)
            # Obtaining the member 'create_type_annotated_program' of a type (line 431)
            create_type_annotated_program_1494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 431, 12), self_1493, 'create_type_annotated_program')
            # Calling create_type_annotated_program(args, kwargs) (line 431)
            create_type_annotated_program_call_result_1496 = invoke(stypy.reporting.localization.Localization(__file__, 431, 12), create_type_annotated_program_1494, *[], **kwargs_1495)
            
            # SSA join for if statement (line 430)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # ################# End of '__run_type_inference(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__run_type_inference' in the type store
        # Getting the type of 'stypy_return_type' (line 404)
        stypy_return_type_1497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1497)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__run_type_inference'
        return stypy_return_type_1497


    @norecursion
    def create_type_annotated_program(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'create_type_annotated_program'
        module_type_store = module_type_store.open_function_context('create_type_annotated_program', 433, 4, False)
        # Assigning a type to the variable 'self' (line 434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.create_type_annotated_program.__dict__.__setitem__('stypy_localization', localization)
        Stypy.create_type_annotated_program.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.create_type_annotated_program.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.create_type_annotated_program.__dict__.__setitem__('stypy_function_name', 'Stypy.create_type_annotated_program')
        Stypy.create_type_annotated_program.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.create_type_annotated_program.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.create_type_annotated_program.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.create_type_annotated_program.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.create_type_annotated_program.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.create_type_annotated_program.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.create_type_annotated_program.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.create_type_annotated_program', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'create_type_annotated_program', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'create_type_annotated_program(...)' code ##################

        str_1498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 437, (-1)), 'str', '\n        Creates a type-annotated version of the analyzed Python program.\n        :return:\n        ')
        
        # Assigning a Call to a Name (line 438):
        
        # Call to get_analyzed_program_type_store(...): (line 438)
        # Processing the call keyword arguments (line 438)
        kwargs_1501 = {}
        # Getting the type of 'self' (line 438)
        self_1499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 24), 'self', False)
        # Obtaining the member 'get_analyzed_program_type_store' of a type (line 438)
        get_analyzed_program_type_store_1500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 438, 24), self_1499, 'get_analyzed_program_type_store')
        # Calling get_analyzed_program_type_store(args, kwargs) (line 438)
        get_analyzed_program_type_store_call_result_1502 = invoke(stypy.reporting.localization.Localization(__file__, 438, 24), get_analyzed_program_type_store_1500, *[], **kwargs_1501)
        
        # Assigning a type to the variable 'my_type_store' (line 438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 438, 8), 'my_type_store', get_analyzed_program_type_store_call_result_1502)
        
        # Assigning a Call to a Name (line 441):
        
        # Call to TypeAnnotationVisitor(...): (line 441)
        # Processing the call arguments (line 441)
        # Getting the type of 'self' (line 441)
        self_1504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 50), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 441)
        source_file_path_1505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 441, 50), self_1504, 'source_file_path')
        # Getting the type of 'my_type_store' (line 441)
        my_type_store_1506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 73), 'my_type_store', False)
        # Processing the call keyword arguments (line 441)
        kwargs_1507 = {}
        # Getting the type of 'TypeAnnotationVisitor' (line 441)
        TypeAnnotationVisitor_1503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 28), 'TypeAnnotationVisitor', False)
        # Calling TypeAnnotationVisitor(args, kwargs) (line 441)
        TypeAnnotationVisitor_call_result_1508 = invoke(stypy.reporting.localization.Localization(__file__, 441, 28), TypeAnnotationVisitor_1503, *[source_file_path_1505, my_type_store_1506], **kwargs_1507)
        
        # Assigning a type to the variable 'annotator_visitor' (line 441)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 441, 8), 'annotator_visitor', TypeAnnotationVisitor_call_result_1508)
        
        # Assigning a Call to a Name (line 443):
        
        # Call to visit(...): (line 443)
        # Processing the call arguments (line 443)
        
        # Call to __read_new_ast_from_file(...): (line 443)
        # Processing the call keyword arguments (line 443)
        kwargs_1513 = {}
        # Getting the type of 'self' (line 443)
        self_1511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 49), 'self', False)
        # Obtaining the member '__read_new_ast_from_file' of a type (line 443)
        read_new_ast_from_file_1512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 443, 49), self_1511, '__read_new_ast_from_file')
        # Calling __read_new_ast_from_file(args, kwargs) (line 443)
        read_new_ast_from_file_call_result_1514 = invoke(stypy.reporting.localization.Localization(__file__, 443, 49), read_new_ast_from_file_1512, *[], **kwargs_1513)
        
        # Processing the call keyword arguments (line 443)
        kwargs_1515 = {}
        # Getting the type of 'annotator_visitor' (line 443)
        annotator_visitor_1509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 25), 'annotator_visitor', False)
        # Obtaining the member 'visit' of a type (line 443)
        visit_1510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 443, 25), annotator_visitor_1509, 'visit')
        # Calling visit(args, kwargs) (line 443)
        visit_call_result_1516 = invoke(stypy.reporting.localization.Localization(__file__, 443, 25), visit_1510, *[read_new_ast_from_file_call_result_1514], **kwargs_1515)
        
        # Assigning a type to the variable 'annotated_tree' (line 443)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 443, 8), 'annotated_tree', visit_call_result_1516)
        # Getting the type of 'self' (line 444)
        self_1517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 11), 'self')
        # Obtaining the member 'show_ast' of a type (line 444)
        show_ast_1518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 11), self_1517, 'show_ast')
        # Testing if the type of an if condition is none (line 444)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 444, 8), show_ast_1518):
            pass
        else:
            
            # Testing the type of an if condition (line 444)
            if_condition_1519 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 444, 8), show_ast_1518)
            # Assigning a type to the variable 'if_condition_1519' (line 444)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 444, 8), 'if_condition_1519', if_condition_1519)
            # SSA begins for if statement (line 444)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to info(...): (line 445)
            # Processing the call arguments (line 445)
            str_1521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 445, 17), 'str', 'Type annotated program AST: ')
            # Processing the call keyword arguments (line 445)
            kwargs_1522 = {}
            # Getting the type of 'info' (line 445)
            info_1520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 12), 'info', False)
            # Calling info(args, kwargs) (line 445)
            info_call_result_1523 = invoke(stypy.reporting.localization.Localization(__file__, 445, 12), info_1520, *[str_1521], **kwargs_1522)
            
            
            # Call to info(...): (line 446)
            # Processing the call arguments (line 446)
            
            # Call to dump_ast(...): (line 446)
            # Processing the call arguments (line 446)
            # Getting the type of 'annotated_tree' (line 446)
            annotated_tree_1526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 26), 'annotated_tree', False)
            # Processing the call keyword arguments (line 446)
            kwargs_1527 = {}
            # Getting the type of 'dump_ast' (line 446)
            dump_ast_1525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 17), 'dump_ast', False)
            # Calling dump_ast(args, kwargs) (line 446)
            dump_ast_call_result_1528 = invoke(stypy.reporting.localization.Localization(__file__, 446, 17), dump_ast_1525, *[annotated_tree_1526], **kwargs_1527)
            
            # Processing the call keyword arguments (line 446)
            kwargs_1529 = {}
            # Getting the type of 'info' (line 446)
            info_1524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 12), 'info', False)
            # Calling info(args, kwargs) (line 446)
            info_call_result_1530 = invoke(stypy.reporting.localization.Localization(__file__, 446, 12), info_1524, *[dump_ast_call_result_1528], **kwargs_1529)
            
            # SSA join for if statement (line 444)
            module_type_store = module_type_store.join_ssa_context()
            

        
        
        # SSA begins for try-except statement (line 448)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to fix_missing_locations(...): (line 449)
        # Processing the call arguments (line 449)
        # Getting the type of 'annotated_tree' (line 449)
        annotated_tree_1533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 38), 'annotated_tree', False)
        # Processing the call keyword arguments (line 449)
        kwargs_1534 = {}
        # Getting the type of 'ast' (line 449)
        ast_1531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 12), 'ast', False)
        # Obtaining the member 'fix_missing_locations' of a type (line 449)
        fix_missing_locations_1532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 449, 12), ast_1531, 'fix_missing_locations')
        # Calling fix_missing_locations(args, kwargs) (line 449)
        fix_missing_locations_call_result_1535 = invoke(stypy.reporting.localization.Localization(__file__, 449, 12), fix_missing_locations_1532, *[annotated_tree_1533], **kwargs_1534)
        
        # SSA branch for the except part of a try statement (line 448)
        # SSA branch for the except '<any exception>' branch of a try statement (line 448)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 448)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 453):
        
        # Call to generate_code(...): (line 453)
        # Processing the call keyword arguments (line 453)
        kwargs_1541 = {}
        
        # Call to PythonSrcGeneratorVisitor(...): (line 453)
        # Processing the call arguments (line 453)
        # Getting the type of 'annotated_tree' (line 453)
        annotated_tree_1537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 63), 'annotated_tree', False)
        # Processing the call keyword arguments (line 453)
        kwargs_1538 = {}
        # Getting the type of 'PythonSrcGeneratorVisitor' (line 453)
        PythonSrcGeneratorVisitor_1536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 37), 'PythonSrcGeneratorVisitor', False)
        # Calling PythonSrcGeneratorVisitor(args, kwargs) (line 453)
        PythonSrcGeneratorVisitor_call_result_1539 = invoke(stypy.reporting.localization.Localization(__file__, 453, 37), PythonSrcGeneratorVisitor_1536, *[annotated_tree_1537], **kwargs_1538)
        
        # Obtaining the member 'generate_code' of a type (line 453)
        generate_code_1540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 453, 37), PythonSrcGeneratorVisitor_call_result_1539, 'generate_code')
        # Calling generate_code(args, kwargs) (line 453)
        generate_code_call_result_1542 = invoke(stypy.reporting.localization.Localization(__file__, 453, 37), generate_code_1540, *[], **kwargs_1541)
        
        # Assigning a type to the variable 'annotated_type_source_code' (line 453)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 453, 8), 'annotated_type_source_code', generate_code_call_result_1542)
        
        # Call to write_python_source_code(...): (line 454)
        # Processing the call arguments (line 454)
        
        # Call to get_stypy_type_annotation_file_path(...): (line 454)
        # Processing the call arguments (line 454)
        # Getting the type of 'self' (line 454)
        self_1545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 69), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 454)
        source_file_path_1546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 454, 69), self_1545, 'source_file_path')
        # Processing the call keyword arguments (line 454)
        kwargs_1547 = {}
        # Getting the type of 'get_stypy_type_annotation_file_path' (line 454)
        get_stypy_type_annotation_file_path_1544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 33), 'get_stypy_type_annotation_file_path', False)
        # Calling get_stypy_type_annotation_file_path(args, kwargs) (line 454)
        get_stypy_type_annotation_file_path_call_result_1548 = invoke(stypy.reporting.localization.Localization(__file__, 454, 33), get_stypy_type_annotation_file_path_1544, *[source_file_path_1546], **kwargs_1547)
        
        # Getting the type of 'annotated_type_source_code' (line 455)
        annotated_type_source_code_1549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 33), 'annotated_type_source_code', False)
        # Processing the call keyword arguments (line 454)
        kwargs_1550 = {}
        # Getting the type of 'write_python_source_code' (line 454)
        write_python_source_code_1543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 8), 'write_python_source_code', False)
        # Calling write_python_source_code(args, kwargs) (line 454)
        write_python_source_code_call_result_1551 = invoke(stypy.reporting.localization.Localization(__file__, 454, 8), write_python_source_code_1543, *[get_stypy_type_annotation_file_path_call_result_1548, annotated_type_source_code_1549], **kwargs_1550)
        
        
        # Getting the type of 'my_type_store' (line 458)
        my_type_store_1552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 28), 'my_type_store')
        # Obtaining the member 'external_modules' of a type (line 458)
        external_modules_1553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 458, 28), my_type_store_1552, 'external_modules')
        # Assigning a type to the variable 'external_modules_1553' (line 458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 458, 8), 'external_modules_1553', external_modules_1553)
        # Testing if the for loop is going to be iterated (line 458)
        # Testing the type of a for loop iterable (line 458)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 458, 8), external_modules_1553)

        if will_iterate_loop(stypy.reporting.localization.Localization(__file__, 458, 8), external_modules_1553):
            # Getting the type of the for loop variable (line 458)
            for_loop_var_1554 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 458, 8), external_modules_1553)
            # Assigning a type to the variable 'stypy_object' (line 458)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 458, 8), 'stypy_object', for_loop_var_1554)
            # SSA begins for a for statement (line 458)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Call to create_type_annotated_program(...): (line 459)
            # Processing the call keyword arguments (line 459)
            kwargs_1557 = {}
            # Getting the type of 'stypy_object' (line 459)
            stypy_object_1555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 12), 'stypy_object', False)
            # Obtaining the member 'create_type_annotated_program' of a type (line 459)
            create_type_annotated_program_1556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 459, 12), stypy_object_1555, 'create_type_annotated_program')
            # Calling create_type_annotated_program(args, kwargs) (line 459)
            create_type_annotated_program_call_result_1558 = invoke(stypy.reporting.localization.Localization(__file__, 459, 12), create_type_annotated_program_1556, *[], **kwargs_1557)
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()

        
        
        # ################# End of 'create_type_annotated_program(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'create_type_annotated_program' in the type store
        # Getting the type of 'stypy_return_type' (line 433)
        stypy_return_type_1559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1559)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'create_type_annotated_program'
        return stypy_return_type_1559


    @norecursion
    def analyze(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'analyze'
        module_type_store = module_type_store.open_function_context('analyze', 461, 4, False)
        # Assigning a type to the variable 'self' (line 462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.analyze.__dict__.__setitem__('stypy_localization', localization)
        Stypy.analyze.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.analyze.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.analyze.__dict__.__setitem__('stypy_function_name', 'Stypy.analyze')
        Stypy.analyze.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.analyze.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.analyze.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.analyze.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.analyze.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.analyze.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.analyze.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.analyze', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'analyze', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'analyze(...)' code ##################

        str_1560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, (-1)), 'str', '\n        Main stypy function. Performs all the step to analyze the source file types in order\n        ')
        # Getting the type of 'self' (line 465)
        self_1561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 11), 'self')
        # Obtaining the member 'verbose' of a type (line 465)
        verbose_1562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 465, 11), self_1561, 'verbose')
        # Testing if the type of an if condition is none (line 465)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 465, 8), verbose_1562):
            pass
        else:
            
            # Testing the type of an if condition (line 465)
            if_condition_1563 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 465, 8), verbose_1562)
            # Assigning a type to the variable 'if_condition_1563' (line 465)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 465, 8), 'if_condition_1563', if_condition_1563)
            # SSA begins for if statement (line 465)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to info(...): (line 466)
            # Processing the call arguments (line 466)
            str_1565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 466, 17), 'str', "Parsing file '")
            # Getting the type of 'self' (line 466)
            self_1566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 36), 'self', False)
            # Obtaining the member 'source_file_path' of a type (line 466)
            source_file_path_1567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 36), self_1566, 'source_file_path')
            # Applying the binary operator '+' (line 466)
            result_add_1568 = python_operator(stypy.reporting.localization.Localization(__file__, 466, 17), '+', str_1565, source_file_path_1567)
            
            str_1569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 466, 60), 'str', "'\n")
            # Applying the binary operator '+' (line 466)
            result_add_1570 = python_operator(stypy.reporting.localization.Localization(__file__, 466, 58), '+', result_add_1568, str_1569)
            
            # Processing the call keyword arguments (line 466)
            kwargs_1571 = {}
            # Getting the type of 'info' (line 466)
            info_1564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 12), 'info', False)
            # Calling info(args, kwargs) (line 466)
            info_call_result_1572 = invoke(stypy.reporting.localization.Localization(__file__, 466, 12), info_1564, *[result_add_1570], **kwargs_1571)
            
            # SSA join for if statement (line 465)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # Assigning a Call to a Name (line 468):
        
        # Call to get_type_store_of_module(...): (line 468)
        # Processing the call arguments (line 468)
        # Getting the type of 'self' (line 468)
        self_1577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 83), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 468)
        source_file_path_1578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 83), self_1577, 'source_file_path')
        # Processing the call keyword arguments (line 468)
        kwargs_1579 = {}
        # Getting the type of 'type_store_copy' (line 468)
        type_store_copy_1573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 22), 'type_store_copy', False)
        # Obtaining the member 'typestore' of a type (line 468)
        typestore_1574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 22), type_store_copy_1573, 'typestore')
        # Obtaining the member 'TypeStore' of a type (line 468)
        TypeStore_1575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 22), typestore_1574, 'TypeStore')
        # Obtaining the member 'get_type_store_of_module' of a type (line 468)
        get_type_store_of_module_1576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 22), TypeStore_1575, 'get_type_store_of_module')
        # Calling get_type_store_of_module(args, kwargs) (line 468)
        get_type_store_of_module_call_result_1580 = invoke(stypy.reporting.localization.Localization(__file__, 468, 22), get_type_store_of_module_1576, *[source_file_path_1578], **kwargs_1579)
        
        # Assigning a type to the variable 'existing_ts' (line 468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 468, 8), 'existing_ts', get_type_store_of_module_call_result_1580)
        
        # Type idiom detected: calculating its left and rigth part (line 469)
        # Getting the type of 'existing_ts' (line 469)
        existing_ts_1581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 8), 'existing_ts')
        # Getting the type of 'None' (line 469)
        None_1582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 30), 'None')
        
        (may_be_1583, more_types_in_union_1584) = may_not_be_none(existing_ts_1581, None_1582)

        if may_be_1583:

            if more_types_in_union_1584:
                # Runtime conditional SSA (line 469)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 470):
            # Getting the type of 'existing_ts' (line 470)
            existing_ts_1585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 47), 'existing_ts')
            # Getting the type of 'self' (line 470)
            self_1586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 12), 'self')
            # Setting the type of the member 'analyzed_program_type_store' of a type (line 470)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 470, 12), self_1586, 'analyzed_program_type_store', existing_ts_1585)
            # Getting the type of 'existing_ts' (line 471)
            existing_ts_1587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 19), 'existing_ts')
            # Assigning a type to the variable 'stypy_return_type' (line 471)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 471, 12), 'stypy_return_type', existing_ts_1587)

            if more_types_in_union_1584:
                # SSA join for if statement (line 469)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to get_original_source_file_ast(...): (line 474)
        # Processing the call keyword arguments (line 474)
        kwargs_1590 = {}
        # Getting the type of 'self' (line 474)
        self_1588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'self', False)
        # Obtaining the member 'get_original_source_file_ast' of a type (line 474)
        get_original_source_file_ast_1589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 8), self_1588, 'get_original_source_file_ast')
        # Calling get_original_source_file_ast(args, kwargs) (line 474)
        get_original_source_file_ast_call_result_1591 = invoke(stypy.reporting.localization.Localization(__file__, 474, 8), get_original_source_file_ast_1589, *[], **kwargs_1590)
        
        # Getting the type of 'self' (line 477)
        self_1592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 11), 'self')
        # Obtaining the member 'generate_type_data_file' of a type (line 477)
        generate_type_data_file_1593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 11), self_1592, 'generate_type_data_file')
        # Testing if the type of an if condition is none (line 477)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 477, 8), generate_type_data_file_1593):
            pass
        else:
            
            # Testing the type of an if condition (line 477)
            if_condition_1594 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 477, 8), generate_type_data_file_1593)
            # Assigning a type to the variable 'if_condition_1594' (line 477)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 8), 'if_condition_1594', if_condition_1594)
            # SSA begins for if statement (line 477)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to __is_file_suitable_for_autocalculate_types(...): (line 478)
            # Processing the call arguments (line 478)
            # Getting the type of 'self' (line 478)
            self_1597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 64), 'self', False)
            # Obtaining the member 'source_file_path' of a type (line 478)
            source_file_path_1598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 478, 64), self_1597, 'source_file_path')
            # Processing the call keyword arguments (line 478)
            kwargs_1599 = {}
            # Getting the type of 'Stypy' (line 478)
            Stypy_1595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 15), 'Stypy', False)
            # Obtaining the member '__is_file_suitable_for_autocalculate_types' of a type (line 478)
            is_file_suitable_for_autocalculate_types_1596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 478, 15), Stypy_1595, '__is_file_suitable_for_autocalculate_types')
            # Calling __is_file_suitable_for_autocalculate_types(args, kwargs) (line 478)
            is_file_suitable_for_autocalculate_types_call_result_1600 = invoke(stypy.reporting.localization.Localization(__file__, 478, 15), is_file_suitable_for_autocalculate_types_1596, *[source_file_path_1598], **kwargs_1599)
            
            # Testing if the type of an if condition is none (line 478)

            if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 478, 12), is_file_suitable_for_autocalculate_types_call_result_1600):
                pass
            else:
                
                # Testing the type of an if condition (line 478)
                if_condition_1601 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 478, 12), is_file_suitable_for_autocalculate_types_call_result_1600)
                # Assigning a type to the variable 'if_condition_1601' (line 478)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 12), 'if_condition_1601', if_condition_1601)
                # SSA begins for if statement (line 478)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Call to create_automatic_type_data_autogenerator_program(...): (line 479)
                # Processing the call keyword arguments (line 479)
                kwargs_1604 = {}
                # Getting the type of 'self' (line 479)
                self_1602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 16), 'self', False)
                # Obtaining the member 'create_automatic_type_data_autogenerator_program' of a type (line 479)
                create_automatic_type_data_autogenerator_program_1603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 479, 16), self_1602, 'create_automatic_type_data_autogenerator_program')
                # Calling create_automatic_type_data_autogenerator_program(args, kwargs) (line 479)
                create_automatic_type_data_autogenerator_program_call_result_1605 = invoke(stypy.reporting.localization.Localization(__file__, 479, 16), create_automatic_type_data_autogenerator_program_1603, *[], **kwargs_1604)
                
                # SSA join for if statement (line 478)
                module_type_store = module_type_store.join_ssa_context()
                

            # SSA join for if statement (line 477)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # Call to create_type_inference_program(...): (line 482)
        # Processing the call keyword arguments (line 482)
        kwargs_1608 = {}
        # Getting the type of 'self' (line 482)
        self_1606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 8), 'self', False)
        # Obtaining the member 'create_type_inference_program' of a type (line 482)
        create_type_inference_program_1607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 8), self_1606, 'create_type_inference_program')
        # Calling create_type_inference_program(args, kwargs) (line 482)
        create_type_inference_program_call_result_1609 = invoke(stypy.reporting.localization.Localization(__file__, 482, 8), create_type_inference_program_1607, *[], **kwargs_1608)
        
        
        # Call to __run_type_inference(...): (line 484)
        # Processing the call keyword arguments (line 484)
        kwargs_1612 = {}
        # Getting the type of 'self' (line 484)
        self_1610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 15), 'self', False)
        # Obtaining the member '__run_type_inference' of a type (line 484)
        run_type_inference_1611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 15), self_1610, '__run_type_inference')
        # Calling __run_type_inference(args, kwargs) (line 484)
        run_type_inference_call_result_1613 = invoke(stypy.reporting.localization.Localization(__file__, 484, 15), run_type_inference_1611, *[], **kwargs_1612)
        
        # Assigning a type to the variable 'stypy_return_type' (line 484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 8), 'stypy_return_type', run_type_inference_call_result_1613)
        
        # ################# End of 'analyze(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'analyze' in the type store
        # Getting the type of 'stypy_return_type' (line 461)
        stypy_return_type_1614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1614)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'analyze'
        return stypy_return_type_1614


    @norecursion
    def get_analyzed_program_type_store(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_analyzed_program_type_store'
        module_type_store = module_type_store.open_function_context('get_analyzed_program_type_store', 488, 4, False)
        # Assigning a type to the variable 'self' (line 489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 489, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.get_analyzed_program_type_store.__dict__.__setitem__('stypy_localization', localization)
        Stypy.get_analyzed_program_type_store.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.get_analyzed_program_type_store.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.get_analyzed_program_type_store.__dict__.__setitem__('stypy_function_name', 'Stypy.get_analyzed_program_type_store')
        Stypy.get_analyzed_program_type_store.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.get_analyzed_program_type_store.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.get_analyzed_program_type_store.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.get_analyzed_program_type_store.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.get_analyzed_program_type_store.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.get_analyzed_program_type_store.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.get_analyzed_program_type_store.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.get_analyzed_program_type_store', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_analyzed_program_type_store', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_analyzed_program_type_store(...)' code ##################

        str_1615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 492, (-1)), 'str', '\n        Get the type store of the analyzed Python source file\n        :return:\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 493)
        # Getting the type of 'self' (line 493)
        self_1616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 11), 'self')
        # Obtaining the member 'analyzed_program_type_store' of a type (line 493)
        analyzed_program_type_store_1617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 11), self_1616, 'analyzed_program_type_store')
        # Getting the type of 'None' (line 493)
        None_1618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 47), 'None')
        
        (may_be_1619, more_types_in_union_1620) = may_be_none(analyzed_program_type_store_1617, None_1618)

        if may_be_1619:

            if more_types_in_union_1620:
                # Runtime conditional SSA (line 493)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to analyze(...): (line 494)
            # Processing the call keyword arguments (line 494)
            kwargs_1623 = {}
            # Getting the type of 'self' (line 494)
            self_1621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 12), 'self', False)
            # Obtaining the member 'analyze' of a type (line 494)
            analyze_1622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 12), self_1621, 'analyze')
            # Calling analyze(args, kwargs) (line 494)
            analyze_call_result_1624 = invoke(stypy.reporting.localization.Localization(__file__, 494, 12), analyze_1622, *[], **kwargs_1623)
            

            if more_types_in_union_1620:
                # SSA join for if statement (line 493)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 496)
        self_1625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 15), 'self')
        # Obtaining the member 'analyzed_program_type_store' of a type (line 496)
        analyzed_program_type_store_1626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 15), self_1625, 'analyzed_program_type_store')
        # Assigning a type to the variable 'stypy_return_type' (line 496)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 496, 8), 'stypy_return_type', analyzed_program_type_store_1626)
        
        # ################# End of 'get_analyzed_program_type_store(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_analyzed_program_type_store' in the type store
        # Getting the type of 'stypy_return_type' (line 488)
        stypy_return_type_1627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1627)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_analyzed_program_type_store'
        return stypy_return_type_1627


    @norecursion
    def get_analyzed_program_errors(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_analyzed_program_errors'
        module_type_store = module_type_store.open_function_context('get_analyzed_program_errors', 498, 4, False)
        # Assigning a type to the variable 'self' (line 499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.get_analyzed_program_errors.__dict__.__setitem__('stypy_localization', localization)
        Stypy.get_analyzed_program_errors.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.get_analyzed_program_errors.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.get_analyzed_program_errors.__dict__.__setitem__('stypy_function_name', 'Stypy.get_analyzed_program_errors')
        Stypy.get_analyzed_program_errors.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.get_analyzed_program_errors.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.get_analyzed_program_errors.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.get_analyzed_program_errors.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.get_analyzed_program_errors.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.get_analyzed_program_errors.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.get_analyzed_program_errors.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.get_analyzed_program_errors', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_analyzed_program_errors', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_analyzed_program_errors(...)' code ##################

        str_1628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, (-1)), 'str', '\n        Get the type errors of the analyzed Python source file\n        :return:\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 503)
        # Getting the type of 'self' (line 503)
        self_1629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 11), 'self')
        # Obtaining the member 'analyzed_program_errors' of a type (line 503)
        analyzed_program_errors_1630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 503, 11), self_1629, 'analyzed_program_errors')
        # Getting the type of 'None' (line 503)
        None_1631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 43), 'None')
        
        (may_be_1632, more_types_in_union_1633) = may_be_none(analyzed_program_errors_1630, None_1631)

        if may_be_1632:

            if more_types_in_union_1633:
                # Runtime conditional SSA (line 503)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to analyze(...): (line 504)
            # Processing the call keyword arguments (line 504)
            kwargs_1636 = {}
            # Getting the type of 'self' (line 504)
            self_1634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 12), 'self', False)
            # Obtaining the member 'analyze' of a type (line 504)
            analyze_1635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 504, 12), self_1634, 'analyze')
            # Calling analyze(args, kwargs) (line 504)
            analyze_call_result_1637 = invoke(stypy.reporting.localization.Localization(__file__, 504, 12), analyze_1635, *[], **kwargs_1636)
            

            if more_types_in_union_1633:
                # SSA join for if statement (line 503)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 506)
        self_1638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 15), 'self')
        # Obtaining the member 'analyzed_program_errors' of a type (line 506)
        analyzed_program_errors_1639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 506, 15), self_1638, 'analyzed_program_errors')
        # Assigning a type to the variable 'stypy_return_type' (line 506)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 506, 8), 'stypy_return_type', analyzed_program_errors_1639)
        
        # ################# End of 'get_analyzed_program_errors(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_analyzed_program_errors' in the type store
        # Getting the type of 'stypy_return_type' (line 498)
        stypy_return_type_1640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1640)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_analyzed_program_errors'
        return stypy_return_type_1640


    @norecursion
    def get_analyzed_program_warnings(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_analyzed_program_warnings'
        module_type_store = module_type_store.open_function_context('get_analyzed_program_warnings', 508, 4, False)
        # Assigning a type to the variable 'self' (line 509)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 509, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.get_analyzed_program_warnings.__dict__.__setitem__('stypy_localization', localization)
        Stypy.get_analyzed_program_warnings.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.get_analyzed_program_warnings.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.get_analyzed_program_warnings.__dict__.__setitem__('stypy_function_name', 'Stypy.get_analyzed_program_warnings')
        Stypy.get_analyzed_program_warnings.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.get_analyzed_program_warnings.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.get_analyzed_program_warnings.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.get_analyzed_program_warnings.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.get_analyzed_program_warnings.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.get_analyzed_program_warnings.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.get_analyzed_program_warnings.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.get_analyzed_program_warnings', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_analyzed_program_warnings', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_analyzed_program_warnings(...)' code ##################

        str_1641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 512, (-1)), 'str', '\n        Get the type warnings of the analyzed Python source file\n        :return:\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 513)
        # Getting the type of 'self' (line 513)
        self_1642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 11), 'self')
        # Obtaining the member 'analyzed_program_warnings' of a type (line 513)
        analyzed_program_warnings_1643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 11), self_1642, 'analyzed_program_warnings')
        # Getting the type of 'None' (line 513)
        None_1644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 45), 'None')
        
        (may_be_1645, more_types_in_union_1646) = may_be_none(analyzed_program_warnings_1643, None_1644)

        if may_be_1645:

            if more_types_in_union_1646:
                # Runtime conditional SSA (line 513)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to analyze(...): (line 514)
            # Processing the call keyword arguments (line 514)
            kwargs_1649 = {}
            # Getting the type of 'self' (line 514)
            self_1647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 12), 'self', False)
            # Obtaining the member 'analyze' of a type (line 514)
            analyze_1648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 12), self_1647, 'analyze')
            # Calling analyze(args, kwargs) (line 514)
            analyze_call_result_1650 = invoke(stypy.reporting.localization.Localization(__file__, 514, 12), analyze_1648, *[], **kwargs_1649)
            

            if more_types_in_union_1646:
                # SSA join for if statement (line 513)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 516)
        self_1651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 15), 'self')
        # Obtaining the member 'analyzed_program_warnings' of a type (line 516)
        analyzed_program_warnings_1652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 516, 15), self_1651, 'analyzed_program_warnings')
        # Assigning a type to the variable 'stypy_return_type' (line 516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 516, 8), 'stypy_return_type', analyzed_program_warnings_1652)
        
        # ################# End of 'get_analyzed_program_warnings(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_analyzed_program_warnings' in the type store
        # Getting the type of 'stypy_return_type' (line 508)
        stypy_return_type_1653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1653)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_analyzed_program_warnings'
        return stypy_return_type_1653


    @norecursion
    def get_last_type_checking_running_time(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_last_type_checking_running_time'
        module_type_store = module_type_store.open_function_context('get_last_type_checking_running_time', 518, 4, False)
        # Assigning a type to the variable 'self' (line 519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.get_last_type_checking_running_time.__dict__.__setitem__('stypy_localization', localization)
        Stypy.get_last_type_checking_running_time.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.get_last_type_checking_running_time.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.get_last_type_checking_running_time.__dict__.__setitem__('stypy_function_name', 'Stypy.get_last_type_checking_running_time')
        Stypy.get_last_type_checking_running_time.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.get_last_type_checking_running_time.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.get_last_type_checking_running_time.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.get_last_type_checking_running_time.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.get_last_type_checking_running_time.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.get_last_type_checking_running_time.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.get_last_type_checking_running_time.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.get_last_type_checking_running_time', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_last_type_checking_running_time', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_last_type_checking_running_time(...)' code ##################

        str_1654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 522, (-1)), 'str', '\n        Get the time spent on the last Python source file analysis\n        :return:\n        ')
        # Getting the type of 'self' (line 523)
        self_1655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 15), 'self')
        # Obtaining the member 'tend' of a type (line 523)
        tend_1656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 15), self_1655, 'tend')
        # Getting the type of 'self' (line 523)
        self_1657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 27), 'self')
        # Obtaining the member 'tinit' of a type (line 523)
        tinit_1658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 27), self_1657, 'tinit')
        # Applying the binary operator '-' (line 523)
        result_sub_1659 = python_operator(stypy.reporting.localization.Localization(__file__, 523, 15), '-', tend_1656, tinit_1658)
        
        # Assigning a type to the variable 'stypy_return_type' (line 523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 8), 'stypy_return_type', result_sub_1659)
        
        # ################# End of 'get_last_type_checking_running_time(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_last_type_checking_running_time' in the type store
        # Getting the type of 'stypy_return_type' (line 518)
        stypy_return_type_1660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1660)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_last_type_checking_running_time'
        return stypy_return_type_1660


# Assigning a type to the variable 'Stypy' (line 45)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 45, 0), 'Stypy', Stypy)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
