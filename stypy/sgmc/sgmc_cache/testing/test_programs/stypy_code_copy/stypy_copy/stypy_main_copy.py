
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: import sys
2: import time
3: import imp
4: import ast
5: 
6: from visitor_copy.type_inference_copy import type_inference_visitor_copy
7: from visitor_copy.python_src_generation_copy.python_src_generator_visitor_copy import PythonSrcGeneratorVisitor
8: from visitor_copy.python_type_data_autogeneration_copy.python_type_data_autogeneration_visitor_copy import *
9: from visitor_copy.type_inference_copy.visitor_utils_copy.stypy_functions_copy import default_module_type_store_var_name, \
10:       default_type_error_var_name, default_type_warning_var_name
11: from visitor_copy.python_src_print_copy.python_src_print_visitor_copy import dump_ast
12: from stypy_parameters_copy import *
13: from visitor_copy.type_inference_copy.desugaring_copy import multiple_assignments_visitor_copy
14: from visitor_copy.type_inference_copy.desugaring_copy import class_attributes_visitor_copy
15: from visitor_copy.type_inference_copy.desugaring_copy import class__init__visitor_copy
16: from visitor_copy.type_annotation_copy.type_annotation_visitor_copy import TypeAnnotationVisitor
17: import type_store_copy
18: from type_store_copy.typestore_copy import TypeStore
19: from python_lib_copy.python_types_copy import type_inference_copy
20: from log_copy import logging_console_copy
21: from code_generation_copy.source_code_writer_copy import write_python_source_code
22: 
23: 
24: '''
25: Assigning log functions
26: '''
27: info = logging_console_copy.info
28: ok = logging_console_copy.ok
29: error = logging_console_copy.error
30: warning = logging_console_copy.warning
31: 
32: "Null log functions when log is disabled"
33: 
34: 
35: def f():
36:     pass
37: 
38: 
39: reset_logs = f
40: 
41: 
42: def void_print_func(*args):
43:     pass
44: 
45: 
46: class Stypy:
47:     '''
48:     Main class for the stypy type-inference Python system. It controls all the interaction with Python source code files
49:     and stypy runtime. From a Python source file it:
50:     - Parses the file and generates an equivalent type-inference program. This program can be executed to tell the
51:     original program type errors
52:     - Optionally generates a type annotated Python source file identical to the original one but with types assigned
53:     to all its variables. It is the same functionality that stypy provides, but written into suitable places of a copy
54:     of the original file instead of reporting types and type errors via console. It is helpful for debuggin purposes
55:     and in the future it can be adapted to follow PEP 0484 (Type hints) https://www.python.org/dev/peps/pep-0484/
56:     - Optionally generates a version of the original program that calculates a table of variables and its runtime types.
57:     It does not work on 100% of the cases, its implementation is rather basic and may fail with some program constructs,
58:     but it help to generate tables of types that later on can be used to unit test generated type inference programs.
59:     '''
60: 
61:     # ##################################### PRIVATE METHODS ######################################
62: 
63:     def __read_new_ast_from_file(self):
64:         '''
65:         Reads the AST of the source Python file
66:         :return:
67:         '''
68:         return ast.parse(self.original_program_src)
69: 
70:     def __get_original_source_file_ast(self):
71:         '''
72:         Returns the AST of the source Python file
73:         :return:
74:         '''
75:         return self.original_ast_tree
76: 
77:     @staticmethod
78:     def __run_program(file_path):
79:         '''
80:         Runs a Python program importing its source code and providing fresh locals() and globals() environments. It is
81:         used to execute the various Python programs that stypy generates if needed.
82:         :param file_path:
83:         :return:
84:         '''
85:         my_globals = globals()
86:         my_globals["__file__"] = file_path
87: 
88:         my_locals = dict()
89: 
90:         dirname = os.path.dirname(file_path)
91:         source_file = file_path.split('/')[-1][0:-3]
92: 
93:         sys.path.append(dirname)
94:         __import__(source_file, my_globals, my_locals)
95: 
96:     def __run_type_inference_program(self, file_path):
97:         '''
98:         Runs a type inference program generated by stypy by importing it. It provides a fresh globals environment
99:         with initialized __file__ and __name__ environment variables, an empty locals() environment and time-measuring
100:         instrumentation. At the end of the execution, it extracts the generated type store, the type errors and the
101:         type warnings that have been detected.
102:         :param file_path: Program to run
103:         :return:
104:         '''
105:         my_globals = globals()
106:         my_globals["__file__"] = file_path
107:         my_globals['__name__'] = '__main__'
108: 
109:         my_locals = dict()
110: 
111:         #dirname = os.path.dirname(file_path)
112:         source_file = file_path.split('/')[-1][0:-3]
113:         #
114:         # #sys.path.append(dirname)
115:         # sys.path = [dirname] + sys.path
116:         # self.tinit = time.time()
117:         # module = __import__(source_file, my_globals, my_locals)
118:         # self.tend = time.time()
119:         # sys.path.remove(dirname)
120:         module = imp.load_source(source_file, file_path)
121:         try:
122:             # After running the program, extract type inference data
123:             self.analyzed_program_type_store = getattr(module, default_module_type_store_var_name)
124:             self.analyzed_program_errors = getattr(module, default_type_error_var_name)
125:             self.analyzed_program_warnings = getattr(module, default_type_warning_var_name)
126:         except:
127:             self.analyzed_program_type_store = None
128:             self.analyzed_program_errors = []
129:             self.analyzed_program_warnings = []
130: 
131:     @staticmethod
132:     def __is_file_suitable_for_autocalculate_types(file_path):
133:         '''
134:         Determines if a source file is suitable to generate a derived runtime type calculation program. Negative
135:         tests (those that fail at runtime) are not suitable for it because they cannot be fully executed to calculate
136:         the runtime type of its variables. Negative test program name begins with "error_" by convention.
137:         :param file_path: File to test
138:         :return:
139:         '''
140:         return "error_" not in file_path
141: 
142:     @staticmethod
143:     def __configure_stypy_output(verbose):
144:         '''
145:         Configures whether output are displayed on console or are not displayed
146:         :param verbose:
147:         :return:
148:         '''
149:         global info
150:         global ok
151:         global error
152: 
153:         if verbose:
154:             info = sys.stdout.write
155:             ok = sys.stdout.write
156:             error = sys.stderr.write
157:         else:
158:             info = void_print_func
159:             ok = void_print_func
160:             error = void_print_func
161: 
162:     ###################################### PUBLIC METHODS ######################################
163: 
164:     def create_instance(self, source_file_path):
165:         '''
166:         Creates a new instance of the Stypy class using the values of the current stypy instance regarding Python
167:         interpreter, output verbosity and optional file generation. Its purpose is to "spawn" a new Stypy object
168:         for a different source file with the same configuration quickly, in order to parse Python source modules
169:         that are loaded by the main parsed program
170:         :param source_file_path:
171:         :return:
172:         '''
173:         return Stypy(source_file_path, self.python_exe, self.verbose, self.generate_type_data_file)
174: 
175:     def __init__(self, source_file_path, python_exe=PYTHON_EXE, verbose=False,
176:                  generate_type_data_file=False, generate_type_annotated_program=False, show_ast=False,
177:                  regenerate_type_inference_programs=False):
178:         '''
179:         Buils a new Stypy type inference object instance for a certain source program. Creating an equivalent type
180:         inference program.
181:         :param source_file_path: Source program to process and calculate its type inference program
182:         :param python_exe: Python implementation to use (optional, initialized by default to the PYTHON_EXE stypy
183:         parameter)
184:         :param verbose: Output verbosity (True/False)
185:         :param generate_type_data_file: Optionally generate a type data file to perform unit testing over the
186:         generated type inference program. Defaults to False
187:         :param generate_type_annotated_program: Optionally generate a type annotated source file from the original one.
188:         Defaults to False
189:         :param show_ast: Display the AST of the processed source file. Defaults to False
190:         :return:
191:         '''
192:         self.python_exe = python_exe
193:         self.validation_error = ""
194:         self.source_file_path = source_file_path
195:         self.file_ = open(self.source_file_path, 'r')
196:         self.original_program_src = self.file_.read()
197:         self.regenerate_type_inference_programs = regenerate_type_inference_programs
198: 
199:         # Configure all FunctionContext and TypeInferenceProxy objects to use type annotation, that will be later used
200:         # to create type annotated source files
201:         type_store_copy.function_context.FunctionContext.annotate_types = generate_type_annotated_program
202:         type_inference_copy.type_inference_proxy.TypeInferenceProxy.annotate_types = generate_type_annotated_program
203: 
204:         # Output configuration
205:         self.verbose = verbose
206:         Stypy.__configure_stypy_output(verbose)
207: 
208:         try:
209:             # Read the program AST
210:             self.original_ast_tree = self.__read_new_ast_from_file()
211:         except Exception as exc:
212:             error("Python is unable to compile the input file '{0}':\n".format(self.source_file_path) + str(exc))
213:             exit(-1)
214: 
215:         # Sequence of source visitors that will be applied over the original program AST. Those visitor transform the
216:         # program code in various ways, aiming to facilitate the type inference program generation when dealing with
217:         # some Python constructs. Visitors are processed in declaration order. The last one should be the
218:         # TypeInferenceGeneratorVisitor, that is in charge of generating the type inference program.
219:         self.visitors = [
220:             multiple_assignments_visitor_copy.MultipleAssignmentsDesugaringVisitor(),
221:             class_attributes_visitor_copy.ClassAttributesVisitor(),
222:             class__init__visitor_copy.ClassInitVisitor(),
223:             type_inference_visitor_copy.TypeInferenceGeneratorVisitor(self.source_file_path.split('\\')[-1],
224:                                                                  self.original_program_src),
225:         ]
226: 
227:         # Have I got to generate a type data file? If yes, use the visitor that transform the original program into
228:         # a derived one that captures runtime variable values during execution
229:         if generate_type_data_file:
230:             self.type_data_autogeneration_ast_tree = TypeDataAutoGeneratorVisitor().visit(
231:                 self.__read_new_ast_from_file())
232:             ast.fix_missing_locations(self.type_data_autogeneration_ast_tree)
233:             self.type_generation_source_code = None
234: 
235:         # Member initialization
236:         self.type_inference_ast_tree = None
237:         self.type_inference_source_code = None
238:         self.generate_type_data_file = generate_type_data_file
239:         self.show_ast = show_ast
240:         self.generate_type_annotated_program = generate_type_annotated_program
241:         self.tinit = 0
242:         self.tend = 0
243: 
244:         # Program analysis output results
245:         self.analyzed_program_type_store = None
246:         self.analyzed_program_errors = None
247:         self.analyzed_program_warnings = None
248: 
249:     def set_source_file_path(self, source_file_path):
250:         '''
251:         Changes the source file of the program to be processed
252:         :param source_file_path: File path
253:         :return:
254:         '''
255:         self.source_file_path = source_file_path
256:         self.file_ = open(self.source_file_path, 'r')
257:         self.original_program_src = self.file_.read()
258: 
259:     ###################################### ORIGINAL SOURCE FILE ######################################
260: 
261:     def get_original_source_file_ast(self):
262:         '''
263:         Get the original source file AST tree optionally showing it
264:         :return:
265:         '''
266:         if self.verbose:
267:             info("\nSTyPy: Calculating program AST...\n")
268:         original_ast = self.__get_original_source_file_ast()
269:         if self.show_ast:
270:             info(dump_ast(original_ast))
271: 
272:         return original_ast
273: 
274:     ###################################### TYPE DATA FILE AUTOGENERATION ######################################
275: 
276:     def get_type_data_autogeneration_ast(self):
277:         '''
278:         Get the AST of the optionally generated runtime type data calculation program
279:         :return:
280:         '''
281:         if not hasattr(self, "type_data_autogeneration_ast_tree"):
282:             return None
283:         return self.type_data_autogeneration_ast_tree
284: 
285:     def get_type_data_autogeneration_program_source_code(self):
286:         '''
287:         Get the source code of the optionally generated runtime type data calculation program
288:         :return:
289:         '''
290:         if not hasattr(self, "type_generation_source_code"):
291:             return None
292: 
293:         if self.type_generation_source_code is None:
294:             self.type_generation_source_code = PythonSrcGeneratorVisitor(
295:                 self.get_type_data_autogeneration_ast()).generate_code()
296: 
297:         return self.type_generation_source_code
298: 
299:     def create_automatic_type_data_autogenerator_program(self):
300:         '''
301:         Creates a runtime type data calculation program derived from the original one, used for unit testing
302:         :return:
303:         '''
304:         if os.path.exists(get_stypy_type_data_file_path(self.source_file_path)):
305:             return
306: 
307:         info("\nSTyPy: Calculating automatic type information helper program AST...\n")
308:         tt_ast = self.get_type_data_autogeneration_ast()
309:         if tt_ast is None:
310:             return
311:         if self.show_ast:
312:             info(dump_ast(tt_ast))
313: 
314:         info("\n\n")
315: 
316:         info("\nSTyPy: Automatic type information helper program code:\n")
317:         tgen_source = self.get_type_data_autogeneration_program_source_code()
318:         info(tgen_source)
319:         write_python_source_code(get_stypy_type_data_autogenerator_program_file_path(self.source_file_path),
320:                                  tgen_source)
321: 
322:         if not os.path.exists(get_stypy_type_data_file_path(self.source_file_path)):
323:             self.__run_program(get_stypy_type_data_autogenerator_program_file_path(self.source_file_path))
324: 
325:     ###################################### TYPE INFERENCE PROGRAM ######################################
326: 
327:     def get_type_inference_program_ast(self):
328:         '''
329:         Get the generated type inference program AST
330:         :return:
331:         '''
332:         if self.type_inference_ast_tree is None:
333:             self.type_inference_ast_tree = self.original_ast_tree
334: 
335:             # Apply each visitor in declaration order
336:             for visitor in self.visitors:
337:                 if self.verbose:
338:                     info("USING '{0}' VISITOR\n".format(type(visitor).__name__))
339: 
340:                 # Visitor is a NodeVisitor that generate a new tree from the original one without changing it.
341:                 # Replace the current one for the next iteration once finished
342:                 if isinstance(visitor, ast.NodeVisitor):
343:                     temp_tree = visitor.visit(self.type_inference_ast_tree)
344:                     self.type_inference_ast_tree = temp_tree
345:                 else:
346:                     # Modify nodes of the existing tree (visitor is a NodeTransformer)
347:                     visitor.visit(self.type_inference_ast_tree)
348: 
349:                 if self.show_ast:
350:                     info(dump_ast(self.type_inference_ast_tree))
351:             try:
352:                 # This is needed for proper source code generation from the generated AST tree
353:                 ast.fix_missing_locations(self.type_inference_ast_tree)
354:             except:
355:                 pass
356: 
357:         return self.type_inference_ast_tree
358: 
359:     def get_type_inference_program_source_code(self):
360:         '''
361:         Generates the source code for the type inference program, once its AST has been calculated
362:         :return:
363:         '''
364:         if self.type_inference_source_code is None:
365:             self.type_inference_source_code = PythonSrcGeneratorVisitor(
366:                 self.get_type_inference_program_ast()).generate_code()
367: 
368:             for visitor in self.visitors:
369:                 if isinstance(visitor, type_inference_visitor_copy.TypeInferenceGeneratorVisitor):
370:                     self.type_inference_source_code += type_inference_visitor_copy.TypeInferenceGeneratorVisitor.get_postfix_src_code()
371:                     break
372: 
373:         return self.type_inference_source_code
374: 
375:     def create_type_inference_program(self):
376:         '''
377:         Perform the full cycle of generating the type inference program AST (get_type_inference_program_ast) -
378:         generate the source code from this AST (get_type_inference_program_source_code) - write this source code to a
379:         file (write_python_source_code). This method should be called when generating the type inference program from
380:         a Python source file, instead of the individual ones, provided in a public fashion just for logging purposes.
381:         :return:
382:         '''
383:         # if not self.regenerate_type_inference_programs:
384:         #     if os.path.isfile(get_stypy_type_inference_program_file_path(self.source_file_path)):
385:         #         return
386: 
387:         if self.verbose:
388:             info("\nSTyPy: Calculating type inference program AST...\n")
389:         ti_ast = self.get_type_inference_program_ast()
390: 
391:         if self.show_ast:
392:             info(dump_ast(ti_ast))
393: 
394:         if self.verbose:
395:             info("\n\n")
396:             info("\nSTyPy: Type inference program source code:\n")
397: 
398:         tinf_source = self.get_type_inference_program_source_code()
399:         info(tinf_source)
400: 
401:         write_python_source_code(get_stypy_type_inference_program_file_path(self.source_file_path), tinf_source)
402: 
403:     ###################################### RUN TYPE INFERENCE ######################################
404: 
405:     def __run_type_inference(self):
406:         '''
407:         Runs the type inference program of the source represented by this Stypy object, generating a type data file
408:         (if it does not exist) in order to test the type inference results against these data, provided this option
409:         is enabled. Finally, it generates the equivalent type annotated program, if this option is enabled.
410:         :return:
411:         '''
412:         if self.verbose:
413:             info("\nSTyPy: Running type inference program...\n")
414: 
415:         # TODO: Remove
416:         # if self.generate_type_data_file:
417:         #     # Do we already have a type data file?
418:         #     if not os.path.exists(get_stypy_type_data_file_path(self.source_file_path)):
419:         #         try:
420:         #             # If not, create a runtime type data calculation program and run it
421:         #             self.__run_type_inference_program(
422:         #                 get_stypy_type_data_autogenerator_program_file_path(self.source_file_path))
423:         #         except:
424:         #             pass
425: 
426:         # result = compile(self.type_inference_ast_tree, '<string>', 'exec') # compile the module AST
427:         # Run the generated type inference program to look for errors
428:         self.__run_type_inference_program(get_stypy_type_inference_program_file_path(self.source_file_path))
429: 
430:         # Create a type annotated program from the original source file
431:         if self.generate_type_annotated_program:
432:             self.create_type_annotated_program()
433: 
434:     def create_type_annotated_program(self):
435:         '''
436:         Creates a type-annotated version of the analyzed Python program.
437:         :return:
438:         '''
439:         my_type_store = self.get_analyzed_program_type_store()
440:         # Visit the source code with the analyzed program type store with the inferred types, so we can place type
441:         # annotations in the correct source lines
442:         annotator_visitor = TypeAnnotationVisitor(self.source_file_path, my_type_store)
443: 
444:         annotated_tree = annotator_visitor.visit(self.__read_new_ast_from_file())
445:         if self.show_ast:
446:             info("Type annotated program AST: ")
447:             info(dump_ast(annotated_tree))
448: 
449:         try:
450:             ast.fix_missing_locations(annotated_tree)
451:         except:
452:             pass
453: 
454:         annotated_type_source_code = PythonSrcGeneratorVisitor(annotated_tree).generate_code()
455:         write_python_source_code(get_stypy_type_annotation_file_path(self.source_file_path),
456:                                  annotated_type_source_code)
457: 
458:         # Annotate the types of modules that the program uses
459:         for stypy_object in my_type_store.external_modules:
460:             stypy_object.create_type_annotated_program()
461: 
462:     def analyze(self):
463:         '''
464:         Main stypy function. Performs all the step to analyze the source file types in order
465:         '''
466:         if self.verbose:
467:             info("Parsing file '" + self.source_file_path + "'\n")
468: 
469:         existing_ts = TypeStore.get_type_store_of_module(self.source_file_path)
470:         if existing_ts is not None:
471:             self.analyzed_program_type_store = existing_ts
472:             return existing_ts
473: 
474:         # Obtain the AST of the source file
475:         self.get_original_source_file_ast()
476: 
477:         # If a type data file have to be generated and the source file is suitable to do so, do it
478:         if self.generate_type_data_file:
479:             if Stypy.__is_file_suitable_for_autocalculate_types(self.source_file_path):
480:                 self.create_automatic_type_data_autogenerator_program()
481: 
482:         # Create the type inference program
483:         self.create_type_inference_program()
484: 
485:         return self.__run_type_inference()
486: 
487:     ###################################### POST ANALYSIS DATA ######################################
488: 
489:     def get_analyzed_program_type_store(self):
490:         '''
491:         Get the type store of the analyzed Python source file
492:         :return:
493:         '''
494:         if self.analyzed_program_type_store is None:
495:             self.analyze()
496: 
497:         return self.analyzed_program_type_store
498: 
499:     def get_analyzed_program_errors(self):
500:         '''
501:         Get the type errors of the analyzed Python source file
502:         :return:
503:         '''
504:         if self.analyzed_program_errors is None:
505:             self.analyze()
506: 
507:         return self.analyzed_program_errors
508: 
509:     def get_analyzed_program_warnings(self):
510:         '''
511:         Get the type warnings of the analyzed Python source file
512:         :return:
513:         '''
514:         if self.analyzed_program_warnings is None:
515:             self.analyze()
516: 
517:         return self.analyzed_program_warnings
518: 
519:     def get_last_type_checking_running_time(self):
520:         '''
521:         Get the time spent on the last Python source file analysis
522:         :return:
523:         '''
524:         return self.tend - self.tinit
525: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1, 0))

# 'import sys' statement (line 1)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 1, 0), 'sys', sys, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2, 0))

# 'import time' statement (line 2)
import time

import_module(stypy.reporting.localization.Localization(__file__, 2, 0), 'time', time, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3, 0))

# 'import imp' statement (line 3)
import imp

import_module(stypy.reporting.localization.Localization(__file__, 3, 0), 'imp', imp, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 4, 0))

# 'import ast' statement (line 4)
import ast

import_module(stypy.reporting.localization.Localization(__file__, 4, 0), 'ast', ast, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 6, 0))

# 'from visitor_copy.type_inference_copy import type_inference_visitor_copy' statement (line 6)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_1 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'visitor_copy.type_inference_copy')

if (type(import_1) is not StypyTypeError):

    if (import_1 != 'pyd_module'):
        __import__(import_1)
        sys_modules_2 = sys.modules[import_1]
        import_from_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'visitor_copy.type_inference_copy', sys_modules_2.module_type_store, module_type_store, ['type_inference_visitor_copy'])
        nest_module(stypy.reporting.localization.Localization(__file__, 6, 0), __file__, sys_modules_2, sys_modules_2.module_type_store, module_type_store)
    else:
        from visitor_copy.type_inference_copy import type_inference_visitor_copy

        import_from_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'visitor_copy.type_inference_copy', None, module_type_store, ['type_inference_visitor_copy'], [type_inference_visitor_copy])

else:
    # Assigning a type to the variable 'visitor_copy.type_inference_copy' (line 6)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6, 0), 'visitor_copy.type_inference_copy', import_1)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 7, 0))

# 'from visitor_copy.python_src_generation_copy.python_src_generator_visitor_copy import PythonSrcGeneratorVisitor' statement (line 7)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_3 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'visitor_copy.python_src_generation_copy.python_src_generator_visitor_copy')

if (type(import_3) is not StypyTypeError):

    if (import_3 != 'pyd_module'):
        __import__(import_3)
        sys_modules_4 = sys.modules[import_3]
        import_from_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'visitor_copy.python_src_generation_copy.python_src_generator_visitor_copy', sys_modules_4.module_type_store, module_type_store, ['PythonSrcGeneratorVisitor'])
        nest_module(stypy.reporting.localization.Localization(__file__, 7, 0), __file__, sys_modules_4, sys_modules_4.module_type_store, module_type_store)
    else:
        from visitor_copy.python_src_generation_copy.python_src_generator_visitor_copy import PythonSrcGeneratorVisitor

        import_from_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'visitor_copy.python_src_generation_copy.python_src_generator_visitor_copy', None, module_type_store, ['PythonSrcGeneratorVisitor'], [PythonSrcGeneratorVisitor])

else:
    # Assigning a type to the variable 'visitor_copy.python_src_generation_copy.python_src_generator_visitor_copy' (line 7)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7, 0), 'visitor_copy.python_src_generation_copy.python_src_generator_visitor_copy', import_3)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 8, 0))

# 'from visitor_copy.python_type_data_autogeneration_copy.python_type_data_autogeneration_visitor_copy import ' statement (line 8)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_5 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'visitor_copy.python_type_data_autogeneration_copy.python_type_data_autogeneration_visitor_copy')

if (type(import_5) is not StypyTypeError):

    if (import_5 != 'pyd_module'):
        __import__(import_5)
        sys_modules_6 = sys.modules[import_5]
        import_from_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'visitor_copy.python_type_data_autogeneration_copy.python_type_data_autogeneration_visitor_copy', sys_modules_6.module_type_store, module_type_store, ['*'])
        nest_module(stypy.reporting.localization.Localization(__file__, 8, 0), __file__, sys_modules_6, sys_modules_6.module_type_store, module_type_store)
    else:
        from visitor_copy.python_type_data_autogeneration_copy.python_type_data_autogeneration_visitor_copy import *

        import_from_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'visitor_copy.python_type_data_autogeneration_copy.python_type_data_autogeneration_visitor_copy', None, module_type_store, ['*'], None)

else:
    # Assigning a type to the variable 'visitor_copy.python_type_data_autogeneration_copy.python_type_data_autogeneration_visitor_copy' (line 8)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 8, 0), 'visitor_copy.python_type_data_autogeneration_copy.python_type_data_autogeneration_visitor_copy', import_5)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 9, 0))

# 'from visitor_copy.type_inference_copy.visitor_utils_copy.stypy_functions_copy import default_module_type_store_var_name, default_type_error_var_name, default_type_warning_var_name' statement (line 9)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_7 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'visitor_copy.type_inference_copy.visitor_utils_copy.stypy_functions_copy')

if (type(import_7) is not StypyTypeError):

    if (import_7 != 'pyd_module'):
        __import__(import_7)
        sys_modules_8 = sys.modules[import_7]
        import_from_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'visitor_copy.type_inference_copy.visitor_utils_copy.stypy_functions_copy', sys_modules_8.module_type_store, module_type_store, ['default_module_type_store_var_name', 'default_type_error_var_name', 'default_type_warning_var_name'])
        nest_module(stypy.reporting.localization.Localization(__file__, 9, 0), __file__, sys_modules_8, sys_modules_8.module_type_store, module_type_store)
    else:
        from visitor_copy.type_inference_copy.visitor_utils_copy.stypy_functions_copy import default_module_type_store_var_name, default_type_error_var_name, default_type_warning_var_name

        import_from_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'visitor_copy.type_inference_copy.visitor_utils_copy.stypy_functions_copy', None, module_type_store, ['default_module_type_store_var_name', 'default_type_error_var_name', 'default_type_warning_var_name'], [default_module_type_store_var_name, default_type_error_var_name, default_type_warning_var_name])

else:
    # Assigning a type to the variable 'visitor_copy.type_inference_copy.visitor_utils_copy.stypy_functions_copy' (line 9)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 9, 0), 'visitor_copy.type_inference_copy.visitor_utils_copy.stypy_functions_copy', import_7)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 11, 0))

# 'from visitor_copy.python_src_print_copy.python_src_print_visitor_copy import dump_ast' statement (line 11)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_9 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'visitor_copy.python_src_print_copy.python_src_print_visitor_copy')

if (type(import_9) is not StypyTypeError):

    if (import_9 != 'pyd_module'):
        __import__(import_9)
        sys_modules_10 = sys.modules[import_9]
        import_from_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'visitor_copy.python_src_print_copy.python_src_print_visitor_copy', sys_modules_10.module_type_store, module_type_store, ['dump_ast'])
        nest_module(stypy.reporting.localization.Localization(__file__, 11, 0), __file__, sys_modules_10, sys_modules_10.module_type_store, module_type_store)
    else:
        from visitor_copy.python_src_print_copy.python_src_print_visitor_copy import dump_ast

        import_from_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'visitor_copy.python_src_print_copy.python_src_print_visitor_copy', None, module_type_store, ['dump_ast'], [dump_ast])

else:
    # Assigning a type to the variable 'visitor_copy.python_src_print_copy.python_src_print_visitor_copy' (line 11)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 11, 0), 'visitor_copy.python_src_print_copy.python_src_print_visitor_copy', import_9)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'from stypy_parameters_copy import ' statement (line 12)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_11 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'stypy_parameters_copy')

if (type(import_11) is not StypyTypeError):

    if (import_11 != 'pyd_module'):
        __import__(import_11)
        sys_modules_12 = sys.modules[import_11]
        import_from_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'stypy_parameters_copy', sys_modules_12.module_type_store, module_type_store, ['*'])
        nest_module(stypy.reporting.localization.Localization(__file__, 12, 0), __file__, sys_modules_12, sys_modules_12.module_type_store, module_type_store)
    else:
        from stypy_parameters_copy import *

        import_from_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'stypy_parameters_copy', None, module_type_store, ['*'], None)

else:
    # Assigning a type to the variable 'stypy_parameters_copy' (line 12)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 12, 0), 'stypy_parameters_copy', import_11)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 13, 0))

# 'from visitor_copy.type_inference_copy.desugaring_copy import multiple_assignments_visitor_copy' statement (line 13)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_13 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'visitor_copy.type_inference_copy.desugaring_copy')

if (type(import_13) is not StypyTypeError):

    if (import_13 != 'pyd_module'):
        __import__(import_13)
        sys_modules_14 = sys.modules[import_13]
        import_from_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'visitor_copy.type_inference_copy.desugaring_copy', sys_modules_14.module_type_store, module_type_store, ['multiple_assignments_visitor_copy'])
        nest_module(stypy.reporting.localization.Localization(__file__, 13, 0), __file__, sys_modules_14, sys_modules_14.module_type_store, module_type_store)
    else:
        from visitor_copy.type_inference_copy.desugaring_copy import multiple_assignments_visitor_copy

        import_from_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'visitor_copy.type_inference_copy.desugaring_copy', None, module_type_store, ['multiple_assignments_visitor_copy'], [multiple_assignments_visitor_copy])

else:
    # Assigning a type to the variable 'visitor_copy.type_inference_copy.desugaring_copy' (line 13)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 13, 0), 'visitor_copy.type_inference_copy.desugaring_copy', import_13)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'from visitor_copy.type_inference_copy.desugaring_copy import class_attributes_visitor_copy' statement (line 14)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_15 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'visitor_copy.type_inference_copy.desugaring_copy')

if (type(import_15) is not StypyTypeError):

    if (import_15 != 'pyd_module'):
        __import__(import_15)
        sys_modules_16 = sys.modules[import_15]
        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'visitor_copy.type_inference_copy.desugaring_copy', sys_modules_16.module_type_store, module_type_store, ['class_attributes_visitor_copy'])
        nest_module(stypy.reporting.localization.Localization(__file__, 14, 0), __file__, sys_modules_16, sys_modules_16.module_type_store, module_type_store)
    else:
        from visitor_copy.type_inference_copy.desugaring_copy import class_attributes_visitor_copy

        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'visitor_copy.type_inference_copy.desugaring_copy', None, module_type_store, ['class_attributes_visitor_copy'], [class_attributes_visitor_copy])

else:
    # Assigning a type to the variable 'visitor_copy.type_inference_copy.desugaring_copy' (line 14)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 14, 0), 'visitor_copy.type_inference_copy.desugaring_copy', import_15)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 15, 0))

# 'from visitor_copy.type_inference_copy.desugaring_copy import class__init__visitor_copy' statement (line 15)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_17 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'visitor_copy.type_inference_copy.desugaring_copy')

if (type(import_17) is not StypyTypeError):

    if (import_17 != 'pyd_module'):
        __import__(import_17)
        sys_modules_18 = sys.modules[import_17]
        import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'visitor_copy.type_inference_copy.desugaring_copy', sys_modules_18.module_type_store, module_type_store, ['class__init__visitor_copy'])
        nest_module(stypy.reporting.localization.Localization(__file__, 15, 0), __file__, sys_modules_18, sys_modules_18.module_type_store, module_type_store)
    else:
        from visitor_copy.type_inference_copy.desugaring_copy import class__init__visitor_copy

        import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'visitor_copy.type_inference_copy.desugaring_copy', None, module_type_store, ['class__init__visitor_copy'], [class__init__visitor_copy])

else:
    # Assigning a type to the variable 'visitor_copy.type_inference_copy.desugaring_copy' (line 15)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 15, 0), 'visitor_copy.type_inference_copy.desugaring_copy', import_17)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 16, 0))

# 'from visitor_copy.type_annotation_copy.type_annotation_visitor_copy import TypeAnnotationVisitor' statement (line 16)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_19 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'visitor_copy.type_annotation_copy.type_annotation_visitor_copy')

if (type(import_19) is not StypyTypeError):

    if (import_19 != 'pyd_module'):
        __import__(import_19)
        sys_modules_20 = sys.modules[import_19]
        import_from_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'visitor_copy.type_annotation_copy.type_annotation_visitor_copy', sys_modules_20.module_type_store, module_type_store, ['TypeAnnotationVisitor'])
        nest_module(stypy.reporting.localization.Localization(__file__, 16, 0), __file__, sys_modules_20, sys_modules_20.module_type_store, module_type_store)
    else:
        from visitor_copy.type_annotation_copy.type_annotation_visitor_copy import TypeAnnotationVisitor

        import_from_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'visitor_copy.type_annotation_copy.type_annotation_visitor_copy', None, module_type_store, ['TypeAnnotationVisitor'], [TypeAnnotationVisitor])

else:
    # Assigning a type to the variable 'visitor_copy.type_annotation_copy.type_annotation_visitor_copy' (line 16)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 16, 0), 'visitor_copy.type_annotation_copy.type_annotation_visitor_copy', import_19)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 17, 0))

# 'import type_store_copy' statement (line 17)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_21 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'type_store_copy')

if (type(import_21) is not StypyTypeError):

    if (import_21 != 'pyd_module'):
        __import__(import_21)
        sys_modules_22 = sys.modules[import_21]
        import_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'type_store_copy', sys_modules_22.module_type_store, module_type_store)
    else:
        import type_store_copy

        import_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'type_store_copy', type_store_copy, module_type_store)

else:
    # Assigning a type to the variable 'type_store_copy' (line 17)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 17, 0), 'type_store_copy', import_21)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 18, 0))

# 'from type_store_copy.typestore_copy import TypeStore' statement (line 18)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_23 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'type_store_copy.typestore_copy')

if (type(import_23) is not StypyTypeError):

    if (import_23 != 'pyd_module'):
        __import__(import_23)
        sys_modules_24 = sys.modules[import_23]
        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'type_store_copy.typestore_copy', sys_modules_24.module_type_store, module_type_store, ['TypeStore'])
        nest_module(stypy.reporting.localization.Localization(__file__, 18, 0), __file__, sys_modules_24, sys_modules_24.module_type_store, module_type_store)
    else:
        from type_store_copy.typestore_copy import TypeStore

        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'type_store_copy.typestore_copy', None, module_type_store, ['TypeStore'], [TypeStore])

else:
    # Assigning a type to the variable 'type_store_copy.typestore_copy' (line 18)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 18, 0), 'type_store_copy.typestore_copy', import_23)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 0))

# 'from python_lib_copy.python_types_copy import type_inference_copy' statement (line 19)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_25 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'python_lib_copy.python_types_copy')

if (type(import_25) is not StypyTypeError):

    if (import_25 != 'pyd_module'):
        __import__(import_25)
        sys_modules_26 = sys.modules[import_25]
        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'python_lib_copy.python_types_copy', sys_modules_26.module_type_store, module_type_store, ['type_inference_copy'])
        nest_module(stypy.reporting.localization.Localization(__file__, 19, 0), __file__, sys_modules_26, sys_modules_26.module_type_store, module_type_store)
    else:
        from python_lib_copy.python_types_copy import type_inference_copy

        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'python_lib_copy.python_types_copy', None, module_type_store, ['type_inference_copy'], [type_inference_copy])

else:
    # Assigning a type to the variable 'python_lib_copy.python_types_copy' (line 19)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 19, 0), 'python_lib_copy.python_types_copy', import_25)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 20, 0))

# 'from log_copy import logging_console_copy' statement (line 20)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_27 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'log_copy')

if (type(import_27) is not StypyTypeError):

    if (import_27 != 'pyd_module'):
        __import__(import_27)
        sys_modules_28 = sys.modules[import_27]
        import_from_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'log_copy', sys_modules_28.module_type_store, module_type_store, ['logging_console_copy'])
        nest_module(stypy.reporting.localization.Localization(__file__, 20, 0), __file__, sys_modules_28, sys_modules_28.module_type_store, module_type_store)
    else:
        from log_copy import logging_console_copy

        import_from_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'log_copy', None, module_type_store, ['logging_console_copy'], [logging_console_copy])

else:
    # Assigning a type to the variable 'log_copy' (line 20)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 20, 0), 'log_copy', import_27)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 21, 0))

# 'from code_generation_copy.source_code_writer_copy import write_python_source_code' statement (line 21)
update_path_to_current_file_folder('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')
import_29 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'code_generation_copy.source_code_writer_copy')

if (type(import_29) is not StypyTypeError):

    if (import_29 != 'pyd_module'):
        __import__(import_29)
        sys_modules_30 = sys.modules[import_29]
        import_from_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'code_generation_copy.source_code_writer_copy', sys_modules_30.module_type_store, module_type_store, ['write_python_source_code'])
        nest_module(stypy.reporting.localization.Localization(__file__, 21, 0), __file__, sys_modules_30, sys_modules_30.module_type_store, module_type_store)
    else:
        from code_generation_copy.source_code_writer_copy import write_python_source_code

        import_from_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'code_generation_copy.source_code_writer_copy', None, module_type_store, ['write_python_source_code'], [write_python_source_code])

else:
    # Assigning a type to the variable 'code_generation_copy.source_code_writer_copy' (line 21)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 21, 0), 'code_generation_copy.source_code_writer_copy', import_29)

remove_current_file_folder_from_path('C:/Users/redon/PycharmProjects/stypyV2/testing/test_programs/stypy_code_copy/stypy_copy/')

str_31 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, (-1)), 'str', '\nAssigning log functions\n')

# Assigning a Attribute to a Name (line 27):
# Getting the type of 'logging_console_copy' (line 27)
logging_console_copy_32 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 27, 7), 'logging_console_copy')
# Obtaining the member 'info' of a type (line 27)
info_33 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 27, 7), logging_console_copy_32, 'info')
# Assigning a type to the variable 'info' (line 27)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 0), 'info', info_33)

# Assigning a Attribute to a Name (line 28):
# Getting the type of 'logging_console_copy' (line 28)
logging_console_copy_34 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 28, 5), 'logging_console_copy')
# Obtaining the member 'ok' of a type (line 28)
ok_35 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 28, 5), logging_console_copy_34, 'ok')
# Assigning a type to the variable 'ok' (line 28)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), 'ok', ok_35)

# Assigning a Attribute to a Name (line 29):
# Getting the type of 'logging_console_copy' (line 29)
logging_console_copy_36 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 29, 8), 'logging_console_copy')
# Obtaining the member 'error' of a type (line 29)
error_37 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 29, 8), logging_console_copy_36, 'error')
# Assigning a type to the variable 'error' (line 29)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 0), 'error', error_37)

# Assigning a Attribute to a Name (line 30):
# Getting the type of 'logging_console_copy' (line 30)
logging_console_copy_38 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 30, 10), 'logging_console_copy')
# Obtaining the member 'warning' of a type (line 30)
warning_39 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 30, 10), logging_console_copy_38, 'warning')
# Assigning a type to the variable 'warning' (line 30)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 30, 0), 'warning', warning_39)
str_40 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 32, 0), 'str', 'Null log functions when log is disabled')

@norecursion
def f(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'f'
    module_type_store = module_type_store.open_function_context('f', 35, 0, False)
    
    # Passed parameters checking function
    f.stypy_localization = localization
    f.stypy_type_of_self = None
    f.stypy_type_store = module_type_store
    f.stypy_function_name = 'f'
    f.stypy_param_names_list = []
    f.stypy_varargs_param_name = None
    f.stypy_kwargs_param_name = None
    f.stypy_call_defaults = defaults
    f.stypy_call_varargs = varargs
    f.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'f', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'f', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'f(...)' code ##################

    pass
    
    # ################# End of 'f(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'f' in the type store
    # Getting the type of 'stypy_return_type' (line 35)
    stypy_return_type_41 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 35, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_41)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'f'
    return stypy_return_type_41

# Assigning a type to the variable 'f' (line 35)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 35, 0), 'f', f)

# Assigning a Name to a Name (line 39):
# Getting the type of 'f' (line 39)
f_42 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 13), 'f')
# Assigning a type to the variable 'reset_logs' (line 39)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 0), 'reset_logs', f_42)

@norecursion
def void_print_func(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'void_print_func'
    module_type_store = module_type_store.open_function_context('void_print_func', 42, 0, False)
    
    # Passed parameters checking function
    void_print_func.stypy_localization = localization
    void_print_func.stypy_type_of_self = None
    void_print_func.stypy_type_store = module_type_store
    void_print_func.stypy_function_name = 'void_print_func'
    void_print_func.stypy_param_names_list = []
    void_print_func.stypy_varargs_param_name = 'args'
    void_print_func.stypy_kwargs_param_name = None
    void_print_func.stypy_call_defaults = defaults
    void_print_func.stypy_call_varargs = varargs
    void_print_func.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'void_print_func', [], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'void_print_func', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'void_print_func(...)' code ##################

    pass
    
    # ################# End of 'void_print_func(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'void_print_func' in the type store
    # Getting the type of 'stypy_return_type' (line 42)
    stypy_return_type_43 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 42, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_43)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'void_print_func'
    return stypy_return_type_43

# Assigning a type to the variable 'void_print_func' (line 42)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 42, 0), 'void_print_func', void_print_func)
# Declaration of the 'Stypy' class

class Stypy:
    str_44 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 59, (-1)), 'str', '\n    Main class for the stypy type-inference Python system. It controls all the interaction with Python source code files\n    and stypy runtime. From a Python source file it:\n    - Parses the file and generates an equivalent type-inference program. This program can be executed to tell the\n    original program type errors\n    - Optionally generates a type annotated Python source file identical to the original one but with types assigned\n    to all its variables. It is the same functionality that stypy provides, but written into suitable places of a copy\n    of the original file instead of reporting types and type errors via console. It is helpful for debuggin purposes\n    and in the future it can be adapted to follow PEP 0484 (Type hints) https://www.python.org/dev/peps/pep-0484/\n    - Optionally generates a version of the original program that calculates a table of variables and its runtime types.\n    It does not work on 100% of the cases, its implementation is rather basic and may fail with some program constructs,\n    but it help to generate tables of types that later on can be used to unit test generated type inference programs.\n    ')

    @norecursion
    def __read_new_ast_from_file(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__read_new_ast_from_file'
        module_type_store = module_type_store.open_function_context('__read_new_ast_from_file', 63, 4, False)
        # Assigning a type to the variable 'self' (line 64)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 64, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.__read_new_ast_from_file.__dict__.__setitem__('stypy_localization', localization)
        Stypy.__read_new_ast_from_file.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.__read_new_ast_from_file.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.__read_new_ast_from_file.__dict__.__setitem__('stypy_function_name', 'Stypy.__read_new_ast_from_file')
        Stypy.__read_new_ast_from_file.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.__read_new_ast_from_file.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.__read_new_ast_from_file.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.__read_new_ast_from_file.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.__read_new_ast_from_file.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.__read_new_ast_from_file.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.__read_new_ast_from_file.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.__read_new_ast_from_file', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__read_new_ast_from_file', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__read_new_ast_from_file(...)' code ##################

        str_45 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 67, (-1)), 'str', '\n        Reads the AST of the source Python file\n        :return:\n        ')
        
        # Call to parse(...): (line 68)
        # Processing the call arguments (line 68)
        # Getting the type of 'self' (line 68)
        self_48 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 25), 'self', False)
        # Obtaining the member 'original_program_src' of a type (line 68)
        original_program_src_49 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 68, 25), self_48, 'original_program_src')
        # Processing the call keyword arguments (line 68)
        kwargs_50 = {}
        # Getting the type of 'ast' (line 68)
        ast_46 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 15), 'ast', False)
        # Obtaining the member 'parse' of a type (line 68)
        parse_47 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 68, 15), ast_46, 'parse')
        # Calling parse(args, kwargs) (line 68)
        parse_call_result_51 = invoke(stypy.reporting.localization.Localization(__file__, 68, 15), parse_47, *[original_program_src_49], **kwargs_50)
        
        # Assigning a type to the variable 'stypy_return_type' (line 68)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 68, 8), 'stypy_return_type', parse_call_result_51)
        
        # ################# End of '__read_new_ast_from_file(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__read_new_ast_from_file' in the type store
        # Getting the type of 'stypy_return_type' (line 63)
        stypy_return_type_52 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 63, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__read_new_ast_from_file'
        return stypy_return_type_52


    @norecursion
    def __get_original_source_file_ast(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__get_original_source_file_ast'
        module_type_store = module_type_store.open_function_context('__get_original_source_file_ast', 70, 4, False)
        # Assigning a type to the variable 'self' (line 71)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 71, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.__get_original_source_file_ast.__dict__.__setitem__('stypy_localization', localization)
        Stypy.__get_original_source_file_ast.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.__get_original_source_file_ast.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.__get_original_source_file_ast.__dict__.__setitem__('stypy_function_name', 'Stypy.__get_original_source_file_ast')
        Stypy.__get_original_source_file_ast.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.__get_original_source_file_ast.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.__get_original_source_file_ast.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.__get_original_source_file_ast.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.__get_original_source_file_ast.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.__get_original_source_file_ast.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.__get_original_source_file_ast.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.__get_original_source_file_ast', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__get_original_source_file_ast', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__get_original_source_file_ast(...)' code ##################

        str_53 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 74, (-1)), 'str', '\n        Returns the AST of the source Python file\n        :return:\n        ')
        # Getting the type of 'self' (line 75)
        self_54 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 15), 'self')
        # Obtaining the member 'original_ast_tree' of a type (line 75)
        original_ast_tree_55 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 75, 15), self_54, 'original_ast_tree')
        # Assigning a type to the variable 'stypy_return_type' (line 75)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 8), 'stypy_return_type', original_ast_tree_55)
        
        # ################# End of '__get_original_source_file_ast(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__get_original_source_file_ast' in the type store
        # Getting the type of 'stypy_return_type' (line 70)
        stypy_return_type_56 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_56)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__get_original_source_file_ast'
        return stypy_return_type_56


    @staticmethod
    @norecursion
    def __run_program(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__run_program'
        module_type_store = module_type_store.open_function_context('__run_program', 77, 4, False)
        
        # Passed parameters checking function
        Stypy.__run_program.__dict__.__setitem__('stypy_localization', localization)
        Stypy.__run_program.__dict__.__setitem__('stypy_type_of_self', None)
        Stypy.__run_program.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.__run_program.__dict__.__setitem__('stypy_function_name', '__run_program')
        Stypy.__run_program.__dict__.__setitem__('stypy_param_names_list', ['file_path'])
        Stypy.__run_program.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.__run_program.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.__run_program.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.__run_program.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.__run_program.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.__run_program.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, None, module_type_store, '__run_program', ['file_path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__run_program', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__run_program(...)' code ##################

        str_57 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, (-1)), 'str', '\n        Runs a Python program importing its source code and providing fresh locals() and globals() environments. It is\n        used to execute the various Python programs that stypy generates if needed.\n        :param file_path:\n        :return:\n        ')
        
        # Assigning a Call to a Name (line 85):
        
        # Call to globals(...): (line 85)
        # Processing the call keyword arguments (line 85)
        kwargs_59 = {}
        # Getting the type of 'globals' (line 85)
        globals_58 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 21), 'globals', False)
        # Calling globals(args, kwargs) (line 85)
        globals_call_result_60 = invoke(stypy.reporting.localization.Localization(__file__, 85, 21), globals_58, *[], **kwargs_59)
        
        # Assigning a type to the variable 'my_globals' (line 85)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 85, 8), 'my_globals', globals_call_result_60)
        
        # Assigning a Name to a Subscript (line 86):
        # Getting the type of 'file_path' (line 86)
        file_path_61 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 33), 'file_path')
        # Getting the type of 'my_globals' (line 86)
        my_globals_62 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 8), 'my_globals')
        str_63 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 86, 19), 'str', '__file__')
        # Storing an element on a container (line 86)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 86, 8), my_globals_62, (str_63, file_path_61))
        
        # Assigning a Call to a Name (line 88):
        
        # Call to dict(...): (line 88)
        # Processing the call keyword arguments (line 88)
        kwargs_65 = {}
        # Getting the type of 'dict' (line 88)
        dict_64 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 88, 20), 'dict', False)
        # Calling dict(args, kwargs) (line 88)
        dict_call_result_66 = invoke(stypy.reporting.localization.Localization(__file__, 88, 20), dict_64, *[], **kwargs_65)
        
        # Assigning a type to the variable 'my_locals' (line 88)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 88, 8), 'my_locals', dict_call_result_66)
        
        # Assigning a Call to a Name (line 90):
        
        # Call to dirname(...): (line 90)
        # Processing the call arguments (line 90)
        # Getting the type of 'file_path' (line 90)
        file_path_70 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 90, 34), 'file_path', False)
        # Processing the call keyword arguments (line 90)
        kwargs_71 = {}
        # Getting the type of 'os' (line 90)
        os_67 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 90, 18), 'os', False)
        # Obtaining the member 'path' of a type (line 90)
        path_68 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 90, 18), os_67, 'path')
        # Obtaining the member 'dirname' of a type (line 90)
        dirname_69 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 90, 18), path_68, 'dirname')
        # Calling dirname(args, kwargs) (line 90)
        dirname_call_result_72 = invoke(stypy.reporting.localization.Localization(__file__, 90, 18), dirname_69, *[file_path_70], **kwargs_71)
        
        # Assigning a type to the variable 'dirname' (line 90)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 90, 8), 'dirname', dirname_call_result_72)
        
        # Assigning a Subscript to a Name (line 91):
        
        # Obtaining the type of the subscript
        int_73 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, 47), 'int')
        int_74 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, 49), 'int')
        slice_75 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 91, 22), int_73, int_74, None)
        
        # Obtaining the type of the subscript
        int_76 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, 43), 'int')
        
        # Call to split(...): (line 91)
        # Processing the call arguments (line 91)
        str_79 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, 38), 'str', '/')
        # Processing the call keyword arguments (line 91)
        kwargs_80 = {}
        # Getting the type of 'file_path' (line 91)
        file_path_77 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 22), 'file_path', False)
        # Obtaining the member 'split' of a type (line 91)
        split_78 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 91, 22), file_path_77, 'split')
        # Calling split(args, kwargs) (line 91)
        split_call_result_81 = invoke(stypy.reporting.localization.Localization(__file__, 91, 22), split_78, *[str_79], **kwargs_80)
        
        # Obtaining the member '__getitem__' of a type (line 91)
        getitem___82 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 91, 22), split_call_result_81, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 91)
        subscript_call_result_83 = invoke(stypy.reporting.localization.Localization(__file__, 91, 22), getitem___82, int_76)
        
        # Obtaining the member '__getitem__' of a type (line 91)
        getitem___84 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 91, 22), subscript_call_result_83, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 91)
        subscript_call_result_85 = invoke(stypy.reporting.localization.Localization(__file__, 91, 22), getitem___84, slice_75)
        
        # Assigning a type to the variable 'source_file' (line 91)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 91, 8), 'source_file', subscript_call_result_85)
        
        # Call to append(...): (line 93)
        # Processing the call arguments (line 93)
        # Getting the type of 'dirname' (line 93)
        dirname_89 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 24), 'dirname', False)
        # Processing the call keyword arguments (line 93)
        kwargs_90 = {}
        # Getting the type of 'sys' (line 93)
        sys_86 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 8), 'sys', False)
        # Obtaining the member 'path' of a type (line 93)
        path_87 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 93, 8), sys_86, 'path')
        # Obtaining the member 'append' of a type (line 93)
        append_88 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 93, 8), path_87, 'append')
        # Calling append(args, kwargs) (line 93)
        append_call_result_91 = invoke(stypy.reporting.localization.Localization(__file__, 93, 8), append_88, *[dirname_89], **kwargs_90)
        
        
        # Call to __import__(...): (line 94)
        # Processing the call arguments (line 94)
        # Getting the type of 'source_file' (line 94)
        source_file_93 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 19), 'source_file', False)
        # Getting the type of 'my_globals' (line 94)
        my_globals_94 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 32), 'my_globals', False)
        # Getting the type of 'my_locals' (line 94)
        my_locals_95 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 44), 'my_locals', False)
        # Processing the call keyword arguments (line 94)
        kwargs_96 = {}
        # Getting the type of '__import__' (line 94)
        import___92 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 8), '__import__', False)
        # Calling __import__(args, kwargs) (line 94)
        import___call_result_97 = invoke(stypy.reporting.localization.Localization(__file__, 94, 8), import___92, *[source_file_93, my_globals_94, my_locals_95], **kwargs_96)
        
        
        # ################# End of '__run_program(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__run_program' in the type store
        # Getting the type of 'stypy_return_type' (line 77)
        stypy_return_type_98 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_98)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__run_program'
        return stypy_return_type_98


    @norecursion
    def __run_type_inference_program(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__run_type_inference_program'
        module_type_store = module_type_store.open_function_context('__run_type_inference_program', 96, 4, False)
        # Assigning a type to the variable 'self' (line 97)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 97, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.__run_type_inference_program.__dict__.__setitem__('stypy_localization', localization)
        Stypy.__run_type_inference_program.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.__run_type_inference_program.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.__run_type_inference_program.__dict__.__setitem__('stypy_function_name', 'Stypy.__run_type_inference_program')
        Stypy.__run_type_inference_program.__dict__.__setitem__('stypy_param_names_list', ['file_path'])
        Stypy.__run_type_inference_program.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.__run_type_inference_program.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.__run_type_inference_program.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.__run_type_inference_program.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.__run_type_inference_program.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.__run_type_inference_program.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.__run_type_inference_program', ['file_path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__run_type_inference_program', localization, ['file_path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__run_type_inference_program(...)' code ##################

        str_99 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, (-1)), 'str', '\n        Runs a type inference program generated by stypy by importing it. It provides a fresh globals environment\n        with initialized __file__ and __name__ environment variables, an empty locals() environment and time-measuring\n        instrumentation. At the end of the execution, it extracts the generated type store, the type errors and the\n        type warnings that have been detected.\n        :param file_path: Program to run\n        :return:\n        ')
        
        # Assigning a Call to a Name (line 105):
        
        # Call to globals(...): (line 105)
        # Processing the call keyword arguments (line 105)
        kwargs_101 = {}
        # Getting the type of 'globals' (line 105)
        globals_100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 21), 'globals', False)
        # Calling globals(args, kwargs) (line 105)
        globals_call_result_102 = invoke(stypy.reporting.localization.Localization(__file__, 105, 21), globals_100, *[], **kwargs_101)
        
        # Assigning a type to the variable 'my_globals' (line 105)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 105, 8), 'my_globals', globals_call_result_102)
        
        # Assigning a Name to a Subscript (line 106):
        # Getting the type of 'file_path' (line 106)
        file_path_103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 33), 'file_path')
        # Getting the type of 'my_globals' (line 106)
        my_globals_104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 8), 'my_globals')
        str_105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 106, 19), 'str', '__file__')
        # Storing an element on a container (line 106)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 106, 8), my_globals_104, (str_105, file_path_103))
        
        # Assigning a Str to a Subscript (line 107):
        str_106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 107, 33), 'str', '__main__')
        # Getting the type of 'my_globals' (line 107)
        my_globals_107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 8), 'my_globals')
        str_108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 107, 19), 'str', '__name__')
        # Storing an element on a container (line 107)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 107, 8), my_globals_107, (str_108, str_106))
        
        # Assigning a Call to a Name (line 109):
        
        # Call to dict(...): (line 109)
        # Processing the call keyword arguments (line 109)
        kwargs_110 = {}
        # Getting the type of 'dict' (line 109)
        dict_109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 20), 'dict', False)
        # Calling dict(args, kwargs) (line 109)
        dict_call_result_111 = invoke(stypy.reporting.localization.Localization(__file__, 109, 20), dict_109, *[], **kwargs_110)
        
        # Assigning a type to the variable 'my_locals' (line 109)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 109, 8), 'my_locals', dict_call_result_111)
        
        # Assigning a Subscript to a Name (line 112):
        
        # Obtaining the type of the subscript
        int_112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 112, 47), 'int')
        int_113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 112, 49), 'int')
        slice_114 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 112, 22), int_112, int_113, None)
        
        # Obtaining the type of the subscript
        int_115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 112, 43), 'int')
        
        # Call to split(...): (line 112)
        # Processing the call arguments (line 112)
        str_118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 112, 38), 'str', '/')
        # Processing the call keyword arguments (line 112)
        kwargs_119 = {}
        # Getting the type of 'file_path' (line 112)
        file_path_116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 22), 'file_path', False)
        # Obtaining the member 'split' of a type (line 112)
        split_117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 112, 22), file_path_116, 'split')
        # Calling split(args, kwargs) (line 112)
        split_call_result_120 = invoke(stypy.reporting.localization.Localization(__file__, 112, 22), split_117, *[str_118], **kwargs_119)
        
        # Obtaining the member '__getitem__' of a type (line 112)
        getitem___121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 112, 22), split_call_result_120, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 112)
        subscript_call_result_122 = invoke(stypy.reporting.localization.Localization(__file__, 112, 22), getitem___121, int_115)
        
        # Obtaining the member '__getitem__' of a type (line 112)
        getitem___123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 112, 22), subscript_call_result_122, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 112)
        subscript_call_result_124 = invoke(stypy.reporting.localization.Localization(__file__, 112, 22), getitem___123, slice_114)
        
        # Assigning a type to the variable 'source_file' (line 112)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 112, 8), 'source_file', subscript_call_result_124)
        
        # Assigning a Call to a Name (line 120):
        
        # Call to load_source(...): (line 120)
        # Processing the call arguments (line 120)
        # Getting the type of 'source_file' (line 120)
        source_file_127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 33), 'source_file', False)
        # Getting the type of 'file_path' (line 120)
        file_path_128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 46), 'file_path', False)
        # Processing the call keyword arguments (line 120)
        kwargs_129 = {}
        # Getting the type of 'imp' (line 120)
        imp_125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 17), 'imp', False)
        # Obtaining the member 'load_source' of a type (line 120)
        load_source_126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 120, 17), imp_125, 'load_source')
        # Calling load_source(args, kwargs) (line 120)
        load_source_call_result_130 = invoke(stypy.reporting.localization.Localization(__file__, 120, 17), load_source_126, *[source_file_127, file_path_128], **kwargs_129)
        
        # Assigning a type to the variable 'module' (line 120)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 120, 8), 'module', load_source_call_result_130)
        
        
        # SSA begins for try-except statement (line 121)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Attribute (line 123):
        
        # Call to getattr(...): (line 123)
        # Processing the call arguments (line 123)
        # Getting the type of 'module' (line 123)
        module_132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 55), 'module', False)
        # Getting the type of 'default_module_type_store_var_name' (line 123)
        default_module_type_store_var_name_133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 63), 'default_module_type_store_var_name', False)
        # Processing the call keyword arguments (line 123)
        kwargs_134 = {}
        # Getting the type of 'getattr' (line 123)
        getattr_131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 47), 'getattr', False)
        # Calling getattr(args, kwargs) (line 123)
        getattr_call_result_135 = invoke(stypy.reporting.localization.Localization(__file__, 123, 47), getattr_131, *[module_132, default_module_type_store_var_name_133], **kwargs_134)
        
        # Getting the type of 'self' (line 123)
        self_136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 12), 'self')
        # Setting the type of the member 'analyzed_program_type_store' of a type (line 123)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 123, 12), self_136, 'analyzed_program_type_store', getattr_call_result_135)
        
        # Assigning a Call to a Attribute (line 124):
        
        # Call to getattr(...): (line 124)
        # Processing the call arguments (line 124)
        # Getting the type of 'module' (line 124)
        module_138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 51), 'module', False)
        # Getting the type of 'default_type_error_var_name' (line 124)
        default_type_error_var_name_139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 59), 'default_type_error_var_name', False)
        # Processing the call keyword arguments (line 124)
        kwargs_140 = {}
        # Getting the type of 'getattr' (line 124)
        getattr_137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 43), 'getattr', False)
        # Calling getattr(args, kwargs) (line 124)
        getattr_call_result_141 = invoke(stypy.reporting.localization.Localization(__file__, 124, 43), getattr_137, *[module_138, default_type_error_var_name_139], **kwargs_140)
        
        # Getting the type of 'self' (line 124)
        self_142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 12), 'self')
        # Setting the type of the member 'analyzed_program_errors' of a type (line 124)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 124, 12), self_142, 'analyzed_program_errors', getattr_call_result_141)
        
        # Assigning a Call to a Attribute (line 125):
        
        # Call to getattr(...): (line 125)
        # Processing the call arguments (line 125)
        # Getting the type of 'module' (line 125)
        module_144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 53), 'module', False)
        # Getting the type of 'default_type_warning_var_name' (line 125)
        default_type_warning_var_name_145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 61), 'default_type_warning_var_name', False)
        # Processing the call keyword arguments (line 125)
        kwargs_146 = {}
        # Getting the type of 'getattr' (line 125)
        getattr_143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 45), 'getattr', False)
        # Calling getattr(args, kwargs) (line 125)
        getattr_call_result_147 = invoke(stypy.reporting.localization.Localization(__file__, 125, 45), getattr_143, *[module_144, default_type_warning_var_name_145], **kwargs_146)
        
        # Getting the type of 'self' (line 125)
        self_148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 12), 'self')
        # Setting the type of the member 'analyzed_program_warnings' of a type (line 125)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 125, 12), self_148, 'analyzed_program_warnings', getattr_call_result_147)
        # SSA branch for the except part of a try statement (line 121)
        # SSA branch for the except '<any exception>' branch of a try statement (line 121)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Name to a Attribute (line 127):
        # Getting the type of 'None' (line 127)
        None_149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 47), 'None')
        # Getting the type of 'self' (line 127)
        self_150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 12), 'self')
        # Setting the type of the member 'analyzed_program_type_store' of a type (line 127)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 127, 12), self_150, 'analyzed_program_type_store', None_149)
        
        # Assigning a List to a Attribute (line 128):
        
        # Obtaining an instance of the builtin type 'list' (line 128)
        list_151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 128, 43), 'list')
        # Adding type elements to the builtin type 'list' instance (line 128)
        
        # Getting the type of 'self' (line 128)
        self_152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 12), 'self')
        # Setting the type of the member 'analyzed_program_errors' of a type (line 128)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 128, 12), self_152, 'analyzed_program_errors', list_151)
        
        # Assigning a List to a Attribute (line 129):
        
        # Obtaining an instance of the builtin type 'list' (line 129)
        list_153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 129, 45), 'list')
        # Adding type elements to the builtin type 'list' instance (line 129)
        
        # Getting the type of 'self' (line 129)
        self_154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 12), 'self')
        # Setting the type of the member 'analyzed_program_warnings' of a type (line 129)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 129, 12), self_154, 'analyzed_program_warnings', list_153)
        # SSA join for try-except statement (line 121)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__run_type_inference_program(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__run_type_inference_program' in the type store
        # Getting the type of 'stypy_return_type' (line 96)
        stypy_return_type_155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_155)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__run_type_inference_program'
        return stypy_return_type_155


    @staticmethod
    @norecursion
    def __is_file_suitable_for_autocalculate_types(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__is_file_suitable_for_autocalculate_types'
        module_type_store = module_type_store.open_function_context('__is_file_suitable_for_autocalculate_types', 131, 4, False)
        
        # Passed parameters checking function
        Stypy.__is_file_suitable_for_autocalculate_types.__dict__.__setitem__('stypy_localization', localization)
        Stypy.__is_file_suitable_for_autocalculate_types.__dict__.__setitem__('stypy_type_of_self', None)
        Stypy.__is_file_suitable_for_autocalculate_types.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.__is_file_suitable_for_autocalculate_types.__dict__.__setitem__('stypy_function_name', '__is_file_suitable_for_autocalculate_types')
        Stypy.__is_file_suitable_for_autocalculate_types.__dict__.__setitem__('stypy_param_names_list', ['file_path'])
        Stypy.__is_file_suitable_for_autocalculate_types.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.__is_file_suitable_for_autocalculate_types.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.__is_file_suitable_for_autocalculate_types.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.__is_file_suitable_for_autocalculate_types.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.__is_file_suitable_for_autocalculate_types.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.__is_file_suitable_for_autocalculate_types.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, None, module_type_store, '__is_file_suitable_for_autocalculate_types', ['file_path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__is_file_suitable_for_autocalculate_types', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__is_file_suitable_for_autocalculate_types(...)' code ##################

        str_156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 139, (-1)), 'str', '\n        Determines if a source file is suitable to generate a derived runtime type calculation program. Negative\n        tests (those that fail at runtime) are not suitable for it because they cannot be fully executed to calculate\n        the runtime type of its variables. Negative test program name begins with "error_" by convention.\n        :param file_path: File to test\n        :return:\n        ')
        
        str_157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 140, 15), 'str', 'error_')
        # Getting the type of 'file_path' (line 140)
        file_path_158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 31), 'file_path')
        # Applying the binary operator 'notin' (line 140)
        result_contains_159 = python_operator(stypy.reporting.localization.Localization(__file__, 140, 15), 'notin', str_157, file_path_158)
        
        # Assigning a type to the variable 'stypy_return_type' (line 140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 140, 8), 'stypy_return_type', result_contains_159)
        
        # ################# End of '__is_file_suitable_for_autocalculate_types(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__is_file_suitable_for_autocalculate_types' in the type store
        # Getting the type of 'stypy_return_type' (line 131)
        stypy_return_type_160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_160)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__is_file_suitable_for_autocalculate_types'
        return stypy_return_type_160


    @staticmethod
    @norecursion
    def __configure_stypy_output(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__configure_stypy_output'
        module_type_store = module_type_store.open_function_context('__configure_stypy_output', 142, 4, False)
        
        # Passed parameters checking function
        Stypy.__configure_stypy_output.__dict__.__setitem__('stypy_localization', localization)
        Stypy.__configure_stypy_output.__dict__.__setitem__('stypy_type_of_self', None)
        Stypy.__configure_stypy_output.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.__configure_stypy_output.__dict__.__setitem__('stypy_function_name', '__configure_stypy_output')
        Stypy.__configure_stypy_output.__dict__.__setitem__('stypy_param_names_list', ['verbose'])
        Stypy.__configure_stypy_output.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.__configure_stypy_output.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.__configure_stypy_output.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.__configure_stypy_output.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.__configure_stypy_output.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.__configure_stypy_output.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, None, module_type_store, '__configure_stypy_output', ['verbose'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__configure_stypy_output', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__configure_stypy_output(...)' code ##################

        str_161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, (-1)), 'str', '\n        Configures whether output are displayed on console or are not displayed\n        :param verbose:\n        :return:\n        ')
        # Marking variables as global (line 149)
        module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 149, 8), 'info')
        # Marking variables as global (line 150)
        module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 150, 8), 'ok')
        # Marking variables as global (line 151)
        module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 151, 8), 'error')
        # Getting the type of 'verbose' (line 153)
        verbose_162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 11), 'verbose')
        # Testing if the type of an if condition is none (line 153)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 153, 8), verbose_162):
            
            # Assigning a Name to a Name (line 158):
            # Getting the type of 'void_print_func' (line 158)
            void_print_func_173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 19), 'void_print_func')
            # Assigning a type to the variable 'info' (line 158)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 12), 'info', void_print_func_173)
            
            # Assigning a Name to a Name (line 159):
            # Getting the type of 'void_print_func' (line 159)
            void_print_func_174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 17), 'void_print_func')
            # Assigning a type to the variable 'ok' (line 159)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 12), 'ok', void_print_func_174)
            
            # Assigning a Name to a Name (line 160):
            # Getting the type of 'void_print_func' (line 160)
            void_print_func_175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 20), 'void_print_func')
            # Assigning a type to the variable 'error' (line 160)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 160, 12), 'error', void_print_func_175)
        else:
            
            # Testing the type of an if condition (line 153)
            if_condition_163 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 153, 8), verbose_162)
            # Assigning a type to the variable 'if_condition_163' (line 153)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 153, 8), 'if_condition_163', if_condition_163)
            # SSA begins for if statement (line 153)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Attribute to a Name (line 154):
            # Getting the type of 'sys' (line 154)
            sys_164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 19), 'sys')
            # Obtaining the member 'stdout' of a type (line 154)
            stdout_165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 19), sys_164, 'stdout')
            # Obtaining the member 'write' of a type (line 154)
            write_166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 19), stdout_165, 'write')
            # Assigning a type to the variable 'info' (line 154)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 154, 12), 'info', write_166)
            
            # Assigning a Attribute to a Name (line 155):
            # Getting the type of 'sys' (line 155)
            sys_167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 17), 'sys')
            # Obtaining the member 'stdout' of a type (line 155)
            stdout_168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 17), sys_167, 'stdout')
            # Obtaining the member 'write' of a type (line 155)
            write_169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 17), stdout_168, 'write')
            # Assigning a type to the variable 'ok' (line 155)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 155, 12), 'ok', write_169)
            
            # Assigning a Attribute to a Name (line 156):
            # Getting the type of 'sys' (line 156)
            sys_170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 20), 'sys')
            # Obtaining the member 'stderr' of a type (line 156)
            stderr_171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 156, 20), sys_170, 'stderr')
            # Obtaining the member 'write' of a type (line 156)
            write_172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 156, 20), stderr_171, 'write')
            # Assigning a type to the variable 'error' (line 156)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 156, 12), 'error', write_172)
            # SSA branch for the else part of an if statement (line 153)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Name to a Name (line 158):
            # Getting the type of 'void_print_func' (line 158)
            void_print_func_173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 19), 'void_print_func')
            # Assigning a type to the variable 'info' (line 158)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 12), 'info', void_print_func_173)
            
            # Assigning a Name to a Name (line 159):
            # Getting the type of 'void_print_func' (line 159)
            void_print_func_174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 17), 'void_print_func')
            # Assigning a type to the variable 'ok' (line 159)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 12), 'ok', void_print_func_174)
            
            # Assigning a Name to a Name (line 160):
            # Getting the type of 'void_print_func' (line 160)
            void_print_func_175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 20), 'void_print_func')
            # Assigning a type to the variable 'error' (line 160)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 160, 12), 'error', void_print_func_175)
            # SSA join for if statement (line 153)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # ################# End of '__configure_stypy_output(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__configure_stypy_output' in the type store
        # Getting the type of 'stypy_return_type' (line 142)
        stypy_return_type_176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_176)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__configure_stypy_output'
        return stypy_return_type_176


    @norecursion
    def create_instance(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'create_instance'
        module_type_store = module_type_store.open_function_context('create_instance', 164, 4, False)
        # Assigning a type to the variable 'self' (line 165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 165, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.create_instance.__dict__.__setitem__('stypy_localization', localization)
        Stypy.create_instance.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.create_instance.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.create_instance.__dict__.__setitem__('stypy_function_name', 'Stypy.create_instance')
        Stypy.create_instance.__dict__.__setitem__('stypy_param_names_list', ['source_file_path'])
        Stypy.create_instance.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.create_instance.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.create_instance.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.create_instance.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.create_instance.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.create_instance.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.create_instance', ['source_file_path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'create_instance', localization, ['source_file_path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'create_instance(...)' code ##################

        str_177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 172, (-1)), 'str', '\n        Creates a new instance of the Stypy class using the values of the current stypy instance regarding Python\n        interpreter, output verbosity and optional file generation. Its purpose is to "spawn" a new Stypy object\n        for a different source file with the same configuration quickly, in order to parse Python source modules\n        that are loaded by the main parsed program\n        :param source_file_path:\n        :return:\n        ')
        
        # Call to Stypy(...): (line 173)
        # Processing the call arguments (line 173)
        # Getting the type of 'source_file_path' (line 173)
        source_file_path_179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 21), 'source_file_path', False)
        # Getting the type of 'self' (line 173)
        self_180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 39), 'self', False)
        # Obtaining the member 'python_exe' of a type (line 173)
        python_exe_181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 39), self_180, 'python_exe')
        # Getting the type of 'self' (line 173)
        self_182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 56), 'self', False)
        # Obtaining the member 'verbose' of a type (line 173)
        verbose_183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 56), self_182, 'verbose')
        # Getting the type of 'self' (line 173)
        self_184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 70), 'self', False)
        # Obtaining the member 'generate_type_data_file' of a type (line 173)
        generate_type_data_file_185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 70), self_184, 'generate_type_data_file')
        # Processing the call keyword arguments (line 173)
        kwargs_186 = {}
        # Getting the type of 'Stypy' (line 173)
        Stypy_178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 15), 'Stypy', False)
        # Calling Stypy(args, kwargs) (line 173)
        Stypy_call_result_187 = invoke(stypy.reporting.localization.Localization(__file__, 173, 15), Stypy_178, *[source_file_path_179, python_exe_181, verbose_183, generate_type_data_file_185], **kwargs_186)
        
        # Assigning a type to the variable 'stypy_return_type' (line 173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 8), 'stypy_return_type', Stypy_call_result_187)
        
        # ################# End of 'create_instance(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'create_instance' in the type store
        # Getting the type of 'stypy_return_type' (line 164)
        stypy_return_type_188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_188)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'create_instance'
        return stypy_return_type_188


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'PYTHON_EXE' (line 175)
        PYTHON_EXE_189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 52), 'PYTHON_EXE')
        # Getting the type of 'False' (line 175)
        False_190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 72), 'False')
        # Getting the type of 'False' (line 176)
        False_191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 41), 'False')
        # Getting the type of 'False' (line 176)
        False_192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 80), 'False')
        # Getting the type of 'False' (line 176)
        False_193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 96), 'False')
        # Getting the type of 'False' (line 177)
        False_194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 52), 'False')
        defaults = [PYTHON_EXE_189, False_190, False_191, False_192, False_193, False_194]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 175, 4, False)
        # Assigning a type to the variable 'self' (line 176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 176, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.__init__', ['source_file_path', 'python_exe', 'verbose', 'generate_type_data_file', 'generate_type_annotated_program', 'show_ast', 'regenerate_type_inference_programs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['source_file_path', 'python_exe', 'verbose', 'generate_type_data_file', 'generate_type_annotated_program', 'show_ast', 'regenerate_type_inference_programs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, (-1)), 'str', '\n        Buils a new Stypy type inference object instance for a certain source program. Creating an equivalent type\n        inference program.\n        :param source_file_path: Source program to process and calculate its type inference program\n        :param python_exe: Python implementation to use (optional, initialized by default to the PYTHON_EXE stypy\n        parameter)\n        :param verbose: Output verbosity (True/False)\n        :param generate_type_data_file: Optionally generate a type data file to perform unit testing over the\n        generated type inference program. Defaults to False\n        :param generate_type_annotated_program: Optionally generate a type annotated source file from the original one.\n        Defaults to False\n        :param show_ast: Display the AST of the processed source file. Defaults to False\n        :return:\n        ')
        
        # Assigning a Name to a Attribute (line 192):
        # Getting the type of 'python_exe' (line 192)
        python_exe_196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 26), 'python_exe')
        # Getting the type of 'self' (line 192)
        self_197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 8), 'self')
        # Setting the type of the member 'python_exe' of a type (line 192)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 8), self_197, 'python_exe', python_exe_196)
        
        # Assigning a Str to a Attribute (line 193):
        str_198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 32), 'str', '')
        # Getting the type of 'self' (line 193)
        self_199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 8), 'self')
        # Setting the type of the member 'validation_error' of a type (line 193)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 8), self_199, 'validation_error', str_198)
        
        # Assigning a Name to a Attribute (line 194):
        # Getting the type of 'source_file_path' (line 194)
        source_file_path_200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 32), 'source_file_path')
        # Getting the type of 'self' (line 194)
        self_201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 8), 'self')
        # Setting the type of the member 'source_file_path' of a type (line 194)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 8), self_201, 'source_file_path', source_file_path_200)
        
        # Assigning a Call to a Attribute (line 195):
        
        # Call to open(...): (line 195)
        # Processing the call arguments (line 195)
        # Getting the type of 'self' (line 195)
        self_203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 26), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 195)
        source_file_path_204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 26), self_203, 'source_file_path')
        str_205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 49), 'str', 'r')
        # Processing the call keyword arguments (line 195)
        kwargs_206 = {}
        # Getting the type of 'open' (line 195)
        open_202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 21), 'open', False)
        # Calling open(args, kwargs) (line 195)
        open_call_result_207 = invoke(stypy.reporting.localization.Localization(__file__, 195, 21), open_202, *[source_file_path_204, str_205], **kwargs_206)
        
        # Getting the type of 'self' (line 195)
        self_208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 8), 'self')
        # Setting the type of the member 'file_' of a type (line 195)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 8), self_208, 'file_', open_call_result_207)
        
        # Assigning a Call to a Attribute (line 196):
        
        # Call to read(...): (line 196)
        # Processing the call keyword arguments (line 196)
        kwargs_212 = {}
        # Getting the type of 'self' (line 196)
        self_209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 36), 'self', False)
        # Obtaining the member 'file_' of a type (line 196)
        file__210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 196, 36), self_209, 'file_')
        # Obtaining the member 'read' of a type (line 196)
        read_211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 196, 36), file__210, 'read')
        # Calling read(args, kwargs) (line 196)
        read_call_result_213 = invoke(stypy.reporting.localization.Localization(__file__, 196, 36), read_211, *[], **kwargs_212)
        
        # Getting the type of 'self' (line 196)
        self_214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 8), 'self')
        # Setting the type of the member 'original_program_src' of a type (line 196)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 196, 8), self_214, 'original_program_src', read_call_result_213)
        
        # Assigning a Name to a Attribute (line 197):
        # Getting the type of 'regenerate_type_inference_programs' (line 197)
        regenerate_type_inference_programs_215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 50), 'regenerate_type_inference_programs')
        # Getting the type of 'self' (line 197)
        self_216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 8), 'self')
        # Setting the type of the member 'regenerate_type_inference_programs' of a type (line 197)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 197, 8), self_216, 'regenerate_type_inference_programs', regenerate_type_inference_programs_215)
        
        # Assigning a Name to a Attribute (line 201):
        # Getting the type of 'generate_type_annotated_program' (line 201)
        generate_type_annotated_program_217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 74), 'generate_type_annotated_program')
        # Getting the type of 'type_store_copy' (line 201)
        type_store_copy_218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 8), 'type_store_copy')
        # Obtaining the member 'function_context' of a type (line 201)
        function_context_219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 8), type_store_copy_218, 'function_context')
        # Obtaining the member 'FunctionContext' of a type (line 201)
        FunctionContext_220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 8), function_context_219, 'FunctionContext')
        # Setting the type of the member 'annotate_types' of a type (line 201)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 8), FunctionContext_220, 'annotate_types', generate_type_annotated_program_217)
        
        # Assigning a Name to a Attribute (line 202):
        # Getting the type of 'generate_type_annotated_program' (line 202)
        generate_type_annotated_program_221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 85), 'generate_type_annotated_program')
        # Getting the type of 'type_inference_copy' (line 202)
        type_inference_copy_222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 8), 'type_inference_copy')
        # Obtaining the member 'type_inference_proxy' of a type (line 202)
        type_inference_proxy_223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 8), type_inference_copy_222, 'type_inference_proxy')
        # Obtaining the member 'TypeInferenceProxy' of a type (line 202)
        TypeInferenceProxy_224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 8), type_inference_proxy_223, 'TypeInferenceProxy')
        # Setting the type of the member 'annotate_types' of a type (line 202)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 8), TypeInferenceProxy_224, 'annotate_types', generate_type_annotated_program_221)
        
        # Assigning a Name to a Attribute (line 205):
        # Getting the type of 'verbose' (line 205)
        verbose_225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 23), 'verbose')
        # Getting the type of 'self' (line 205)
        self_226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 8), 'self')
        # Setting the type of the member 'verbose' of a type (line 205)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 205, 8), self_226, 'verbose', verbose_225)
        
        # Call to __configure_stypy_output(...): (line 206)
        # Processing the call arguments (line 206)
        # Getting the type of 'verbose' (line 206)
        verbose_229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 39), 'verbose', False)
        # Processing the call keyword arguments (line 206)
        kwargs_230 = {}
        # Getting the type of 'Stypy' (line 206)
        Stypy_227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 8), 'Stypy', False)
        # Obtaining the member '__configure_stypy_output' of a type (line 206)
        configure_stypy_output_228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 206, 8), Stypy_227, '__configure_stypy_output')
        # Calling __configure_stypy_output(args, kwargs) (line 206)
        configure_stypy_output_call_result_231 = invoke(stypy.reporting.localization.Localization(__file__, 206, 8), configure_stypy_output_228, *[verbose_229], **kwargs_230)
        
        
        
        # SSA begins for try-except statement (line 208)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Attribute (line 210):
        
        # Call to __read_new_ast_from_file(...): (line 210)
        # Processing the call keyword arguments (line 210)
        kwargs_234 = {}
        # Getting the type of 'self' (line 210)
        self_232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 37), 'self', False)
        # Obtaining the member '__read_new_ast_from_file' of a type (line 210)
        read_new_ast_from_file_233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 210, 37), self_232, '__read_new_ast_from_file')
        # Calling __read_new_ast_from_file(args, kwargs) (line 210)
        read_new_ast_from_file_call_result_235 = invoke(stypy.reporting.localization.Localization(__file__, 210, 37), read_new_ast_from_file_233, *[], **kwargs_234)
        
        # Getting the type of 'self' (line 210)
        self_236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 12), 'self')
        # Setting the type of the member 'original_ast_tree' of a type (line 210)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 210, 12), self_236, 'original_ast_tree', read_new_ast_from_file_call_result_235)
        # SSA branch for the except part of a try statement (line 208)
        # SSA branch for the except 'Exception' branch of a try statement (line 208)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'Exception' (line 211)
        Exception_237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 15), 'Exception')
        # Assigning a type to the variable 'exc' (line 211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 8), 'exc', Exception_237)
        
        # Call to error(...): (line 212)
        # Processing the call arguments (line 212)
        
        # Call to format(...): (line 212)
        # Processing the call arguments (line 212)
        # Getting the type of 'self' (line 212)
        self_241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 79), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 212)
        source_file_path_242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 212, 79), self_241, 'source_file_path')
        # Processing the call keyword arguments (line 212)
        kwargs_243 = {}
        str_239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 212, 18), 'str', "Python is unable to compile the input file '{0}':\n")
        # Obtaining the member 'format' of a type (line 212)
        format_240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 212, 18), str_239, 'format')
        # Calling format(args, kwargs) (line 212)
        format_call_result_244 = invoke(stypy.reporting.localization.Localization(__file__, 212, 18), format_240, *[source_file_path_242], **kwargs_243)
        
        
        # Call to str(...): (line 212)
        # Processing the call arguments (line 212)
        # Getting the type of 'exc' (line 212)
        exc_246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 108), 'exc', False)
        # Processing the call keyword arguments (line 212)
        kwargs_247 = {}
        # Getting the type of 'str' (line 212)
        str_245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 104), 'str', False)
        # Calling str(args, kwargs) (line 212)
        str_call_result_248 = invoke(stypy.reporting.localization.Localization(__file__, 212, 104), str_245, *[exc_246], **kwargs_247)
        
        # Applying the binary operator '+' (line 212)
        result_add_249 = python_operator(stypy.reporting.localization.Localization(__file__, 212, 18), '+', format_call_result_244, str_call_result_248)
        
        # Processing the call keyword arguments (line 212)
        kwargs_250 = {}
        # Getting the type of 'error' (line 212)
        error_238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 12), 'error', False)
        # Calling error(args, kwargs) (line 212)
        error_call_result_251 = invoke(stypy.reporting.localization.Localization(__file__, 212, 12), error_238, *[result_add_249], **kwargs_250)
        
        
        # Call to exit(...): (line 213)
        # Processing the call arguments (line 213)
        int_253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 213, 17), 'int')
        # Processing the call keyword arguments (line 213)
        kwargs_254 = {}
        # Getting the type of 'exit' (line 213)
        exit_252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 12), 'exit', False)
        # Calling exit(args, kwargs) (line 213)
        exit_call_result_255 = invoke(stypy.reporting.localization.Localization(__file__, 213, 12), exit_252, *[int_253], **kwargs_254)
        
        # SSA join for try-except statement (line 208)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Attribute (line 219):
        
        # Obtaining an instance of the builtin type 'list' (line 219)
        list_256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 219)
        # Adding element type (line 219)
        
        # Call to MultipleAssignmentsDesugaringVisitor(...): (line 220)
        # Processing the call keyword arguments (line 220)
        kwargs_259 = {}
        # Getting the type of 'multiple_assignments_visitor_copy' (line 220)
        multiple_assignments_visitor_copy_257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 12), 'multiple_assignments_visitor_copy', False)
        # Obtaining the member 'MultipleAssignmentsDesugaringVisitor' of a type (line 220)
        MultipleAssignmentsDesugaringVisitor_258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 220, 12), multiple_assignments_visitor_copy_257, 'MultipleAssignmentsDesugaringVisitor')
        # Calling MultipleAssignmentsDesugaringVisitor(args, kwargs) (line 220)
        MultipleAssignmentsDesugaringVisitor_call_result_260 = invoke(stypy.reporting.localization.Localization(__file__, 220, 12), MultipleAssignmentsDesugaringVisitor_258, *[], **kwargs_259)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 219, 24), list_256, MultipleAssignmentsDesugaringVisitor_call_result_260)
        # Adding element type (line 219)
        
        # Call to ClassAttributesVisitor(...): (line 221)
        # Processing the call keyword arguments (line 221)
        kwargs_263 = {}
        # Getting the type of 'class_attributes_visitor_copy' (line 221)
        class_attributes_visitor_copy_261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 12), 'class_attributes_visitor_copy', False)
        # Obtaining the member 'ClassAttributesVisitor' of a type (line 221)
        ClassAttributesVisitor_262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 12), class_attributes_visitor_copy_261, 'ClassAttributesVisitor')
        # Calling ClassAttributesVisitor(args, kwargs) (line 221)
        ClassAttributesVisitor_call_result_264 = invoke(stypy.reporting.localization.Localization(__file__, 221, 12), ClassAttributesVisitor_262, *[], **kwargs_263)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 219, 24), list_256, ClassAttributesVisitor_call_result_264)
        # Adding element type (line 219)
        
        # Call to ClassInitVisitor(...): (line 222)
        # Processing the call keyword arguments (line 222)
        kwargs_267 = {}
        # Getting the type of 'class__init__visitor_copy' (line 222)
        class__init__visitor_copy_265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 12), 'class__init__visitor_copy', False)
        # Obtaining the member 'ClassInitVisitor' of a type (line 222)
        ClassInitVisitor_266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 12), class__init__visitor_copy_265, 'ClassInitVisitor')
        # Calling ClassInitVisitor(args, kwargs) (line 222)
        ClassInitVisitor_call_result_268 = invoke(stypy.reporting.localization.Localization(__file__, 222, 12), ClassInitVisitor_266, *[], **kwargs_267)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 219, 24), list_256, ClassInitVisitor_call_result_268)
        # Adding element type (line 219)
        
        # Call to TypeInferenceGeneratorVisitor(...): (line 223)
        # Processing the call arguments (line 223)
        
        # Obtaining the type of the subscript
        int_271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 223, 104), 'int')
        
        # Call to split(...): (line 223)
        # Processing the call arguments (line 223)
        str_275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 223, 98), 'str', '\\')
        # Processing the call keyword arguments (line 223)
        kwargs_276 = {}
        # Getting the type of 'self' (line 223)
        self_272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 70), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 223)
        source_file_path_273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 223, 70), self_272, 'source_file_path')
        # Obtaining the member 'split' of a type (line 223)
        split_274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 223, 70), source_file_path_273, 'split')
        # Calling split(args, kwargs) (line 223)
        split_call_result_277 = invoke(stypy.reporting.localization.Localization(__file__, 223, 70), split_274, *[str_275], **kwargs_276)
        
        # Obtaining the member '__getitem__' of a type (line 223)
        getitem___278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 223, 70), split_call_result_277, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 223)
        subscript_call_result_279 = invoke(stypy.reporting.localization.Localization(__file__, 223, 70), getitem___278, int_271)
        
        # Getting the type of 'self' (line 224)
        self_280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 65), 'self', False)
        # Obtaining the member 'original_program_src' of a type (line 224)
        original_program_src_281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 65), self_280, 'original_program_src')
        # Processing the call keyword arguments (line 223)
        kwargs_282 = {}
        # Getting the type of 'type_inference_visitor_copy' (line 223)
        type_inference_visitor_copy_269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 12), 'type_inference_visitor_copy', False)
        # Obtaining the member 'TypeInferenceGeneratorVisitor' of a type (line 223)
        TypeInferenceGeneratorVisitor_270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 223, 12), type_inference_visitor_copy_269, 'TypeInferenceGeneratorVisitor')
        # Calling TypeInferenceGeneratorVisitor(args, kwargs) (line 223)
        TypeInferenceGeneratorVisitor_call_result_283 = invoke(stypy.reporting.localization.Localization(__file__, 223, 12), TypeInferenceGeneratorVisitor_270, *[subscript_call_result_279, original_program_src_281], **kwargs_282)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 219, 24), list_256, TypeInferenceGeneratorVisitor_call_result_283)
        
        # Getting the type of 'self' (line 219)
        self_284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 8), 'self')
        # Setting the type of the member 'visitors' of a type (line 219)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 8), self_284, 'visitors', list_256)
        # Getting the type of 'generate_type_data_file' (line 229)
        generate_type_data_file_285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 11), 'generate_type_data_file')
        # Testing if the type of an if condition is none (line 229)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 229, 8), generate_type_data_file_285):
            pass
        else:
            
            # Testing the type of an if condition (line 229)
            if_condition_286 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 229, 8), generate_type_data_file_285)
            # Assigning a type to the variable 'if_condition_286' (line 229)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 229, 8), 'if_condition_286', if_condition_286)
            # SSA begins for if statement (line 229)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 230):
            
            # Call to visit(...): (line 230)
            # Processing the call arguments (line 230)
            
            # Call to __read_new_ast_from_file(...): (line 231)
            # Processing the call keyword arguments (line 231)
            kwargs_293 = {}
            # Getting the type of 'self' (line 231)
            self_291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 16), 'self', False)
            # Obtaining the member '__read_new_ast_from_file' of a type (line 231)
            read_new_ast_from_file_292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 16), self_291, '__read_new_ast_from_file')
            # Calling __read_new_ast_from_file(args, kwargs) (line 231)
            read_new_ast_from_file_call_result_294 = invoke(stypy.reporting.localization.Localization(__file__, 231, 16), read_new_ast_from_file_292, *[], **kwargs_293)
            
            # Processing the call keyword arguments (line 230)
            kwargs_295 = {}
            
            # Call to TypeDataAutoGeneratorVisitor(...): (line 230)
            # Processing the call keyword arguments (line 230)
            kwargs_288 = {}
            # Getting the type of 'TypeDataAutoGeneratorVisitor' (line 230)
            TypeDataAutoGeneratorVisitor_287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 53), 'TypeDataAutoGeneratorVisitor', False)
            # Calling TypeDataAutoGeneratorVisitor(args, kwargs) (line 230)
            TypeDataAutoGeneratorVisitor_call_result_289 = invoke(stypy.reporting.localization.Localization(__file__, 230, 53), TypeDataAutoGeneratorVisitor_287, *[], **kwargs_288)
            
            # Obtaining the member 'visit' of a type (line 230)
            visit_290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 230, 53), TypeDataAutoGeneratorVisitor_call_result_289, 'visit')
            # Calling visit(args, kwargs) (line 230)
            visit_call_result_296 = invoke(stypy.reporting.localization.Localization(__file__, 230, 53), visit_290, *[read_new_ast_from_file_call_result_294], **kwargs_295)
            
            # Getting the type of 'self' (line 230)
            self_297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 12), 'self')
            # Setting the type of the member 'type_data_autogeneration_ast_tree' of a type (line 230)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 230, 12), self_297, 'type_data_autogeneration_ast_tree', visit_call_result_296)
            
            # Call to fix_missing_locations(...): (line 232)
            # Processing the call arguments (line 232)
            # Getting the type of 'self' (line 232)
            self_300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 38), 'self', False)
            # Obtaining the member 'type_data_autogeneration_ast_tree' of a type (line 232)
            type_data_autogeneration_ast_tree_301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 232, 38), self_300, 'type_data_autogeneration_ast_tree')
            # Processing the call keyword arguments (line 232)
            kwargs_302 = {}
            # Getting the type of 'ast' (line 232)
            ast_298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 12), 'ast', False)
            # Obtaining the member 'fix_missing_locations' of a type (line 232)
            fix_missing_locations_299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 232, 12), ast_298, 'fix_missing_locations')
            # Calling fix_missing_locations(args, kwargs) (line 232)
            fix_missing_locations_call_result_303 = invoke(stypy.reporting.localization.Localization(__file__, 232, 12), fix_missing_locations_299, *[type_data_autogeneration_ast_tree_301], **kwargs_302)
            
            
            # Assigning a Name to a Attribute (line 233):
            # Getting the type of 'None' (line 233)
            None_304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 47), 'None')
            # Getting the type of 'self' (line 233)
            self_305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 12), 'self')
            # Setting the type of the member 'type_generation_source_code' of a type (line 233)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 233, 12), self_305, 'type_generation_source_code', None_304)
            # SSA join for if statement (line 229)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # Assigning a Name to a Attribute (line 236):
        # Getting the type of 'None' (line 236)
        None_306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 39), 'None')
        # Getting the type of 'self' (line 236)
        self_307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 8), 'self')
        # Setting the type of the member 'type_inference_ast_tree' of a type (line 236)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 236, 8), self_307, 'type_inference_ast_tree', None_306)
        
        # Assigning a Name to a Attribute (line 237):
        # Getting the type of 'None' (line 237)
        None_308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 42), 'None')
        # Getting the type of 'self' (line 237)
        self_309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 8), 'self')
        # Setting the type of the member 'type_inference_source_code' of a type (line 237)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 237, 8), self_309, 'type_inference_source_code', None_308)
        
        # Assigning a Name to a Attribute (line 238):
        # Getting the type of 'generate_type_data_file' (line 238)
        generate_type_data_file_310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 39), 'generate_type_data_file')
        # Getting the type of 'self' (line 238)
        self_311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 8), 'self')
        # Setting the type of the member 'generate_type_data_file' of a type (line 238)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 238, 8), self_311, 'generate_type_data_file', generate_type_data_file_310)
        
        # Assigning a Name to a Attribute (line 239):
        # Getting the type of 'show_ast' (line 239)
        show_ast_312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 24), 'show_ast')
        # Getting the type of 'self' (line 239)
        self_313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 8), 'self')
        # Setting the type of the member 'show_ast' of a type (line 239)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 239, 8), self_313, 'show_ast', show_ast_312)
        
        # Assigning a Name to a Attribute (line 240):
        # Getting the type of 'generate_type_annotated_program' (line 240)
        generate_type_annotated_program_314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 47), 'generate_type_annotated_program')
        # Getting the type of 'self' (line 240)
        self_315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 8), 'self')
        # Setting the type of the member 'generate_type_annotated_program' of a type (line 240)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 240, 8), self_315, 'generate_type_annotated_program', generate_type_annotated_program_314)
        
        # Assigning a Num to a Attribute (line 241):
        int_316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 241, 21), 'int')
        # Getting the type of 'self' (line 241)
        self_317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 8), 'self')
        # Setting the type of the member 'tinit' of a type (line 241)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 241, 8), self_317, 'tinit', int_316)
        
        # Assigning a Num to a Attribute (line 242):
        int_318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 242, 20), 'int')
        # Getting the type of 'self' (line 242)
        self_319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 8), 'self')
        # Setting the type of the member 'tend' of a type (line 242)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 242, 8), self_319, 'tend', int_318)
        
        # Assigning a Name to a Attribute (line 245):
        # Getting the type of 'None' (line 245)
        None_320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 43), 'None')
        # Getting the type of 'self' (line 245)
        self_321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 8), 'self')
        # Setting the type of the member 'analyzed_program_type_store' of a type (line 245)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 245, 8), self_321, 'analyzed_program_type_store', None_320)
        
        # Assigning a Name to a Attribute (line 246):
        # Getting the type of 'None' (line 246)
        None_322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 39), 'None')
        # Getting the type of 'self' (line 246)
        self_323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 8), 'self')
        # Setting the type of the member 'analyzed_program_errors' of a type (line 246)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 246, 8), self_323, 'analyzed_program_errors', None_322)
        
        # Assigning a Name to a Attribute (line 247):
        # Getting the type of 'None' (line 247)
        None_324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 41), 'None')
        # Getting the type of 'self' (line 247)
        self_325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 8), 'self')
        # Setting the type of the member 'analyzed_program_warnings' of a type (line 247)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 8), self_325, 'analyzed_program_warnings', None_324)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_source_file_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_source_file_path'
        module_type_store = module_type_store.open_function_context('set_source_file_path', 249, 4, False)
        # Assigning a type to the variable 'self' (line 250)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 250, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.set_source_file_path.__dict__.__setitem__('stypy_localization', localization)
        Stypy.set_source_file_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.set_source_file_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.set_source_file_path.__dict__.__setitem__('stypy_function_name', 'Stypy.set_source_file_path')
        Stypy.set_source_file_path.__dict__.__setitem__('stypy_param_names_list', ['source_file_path'])
        Stypy.set_source_file_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.set_source_file_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.set_source_file_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.set_source_file_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.set_source_file_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.set_source_file_path.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.set_source_file_path', ['source_file_path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_source_file_path', localization, ['source_file_path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_source_file_path(...)' code ##################

        str_326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, (-1)), 'str', '\n        Changes the source file of the program to be processed\n        :param source_file_path: File path\n        :return:\n        ')
        
        # Assigning a Name to a Attribute (line 255):
        # Getting the type of 'source_file_path' (line 255)
        source_file_path_327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 32), 'source_file_path')
        # Getting the type of 'self' (line 255)
        self_328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 8), 'self')
        # Setting the type of the member 'source_file_path' of a type (line 255)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 8), self_328, 'source_file_path', source_file_path_327)
        
        # Assigning a Call to a Attribute (line 256):
        
        # Call to open(...): (line 256)
        # Processing the call arguments (line 256)
        # Getting the type of 'self' (line 256)
        self_330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 26), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 256)
        source_file_path_331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 26), self_330, 'source_file_path')
        str_332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 49), 'str', 'r')
        # Processing the call keyword arguments (line 256)
        kwargs_333 = {}
        # Getting the type of 'open' (line 256)
        open_329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 21), 'open', False)
        # Calling open(args, kwargs) (line 256)
        open_call_result_334 = invoke(stypy.reporting.localization.Localization(__file__, 256, 21), open_329, *[source_file_path_331, str_332], **kwargs_333)
        
        # Getting the type of 'self' (line 256)
        self_335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'self')
        # Setting the type of the member 'file_' of a type (line 256)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 8), self_335, 'file_', open_call_result_334)
        
        # Assigning a Call to a Attribute (line 257):
        
        # Call to read(...): (line 257)
        # Processing the call keyword arguments (line 257)
        kwargs_339 = {}
        # Getting the type of 'self' (line 257)
        self_336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 36), 'self', False)
        # Obtaining the member 'file_' of a type (line 257)
        file__337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 257, 36), self_336, 'file_')
        # Obtaining the member 'read' of a type (line 257)
        read_338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 257, 36), file__337, 'read')
        # Calling read(args, kwargs) (line 257)
        read_call_result_340 = invoke(stypy.reporting.localization.Localization(__file__, 257, 36), read_338, *[], **kwargs_339)
        
        # Getting the type of 'self' (line 257)
        self_341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 8), 'self')
        # Setting the type of the member 'original_program_src' of a type (line 257)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 257, 8), self_341, 'original_program_src', read_call_result_340)
        
        # ################# End of 'set_source_file_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_source_file_path' in the type store
        # Getting the type of 'stypy_return_type' (line 249)
        stypy_return_type_342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_342)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_source_file_path'
        return stypy_return_type_342


    @norecursion
    def get_original_source_file_ast(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_original_source_file_ast'
        module_type_store = module_type_store.open_function_context('get_original_source_file_ast', 261, 4, False)
        # Assigning a type to the variable 'self' (line 262)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 262, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.get_original_source_file_ast.__dict__.__setitem__('stypy_localization', localization)
        Stypy.get_original_source_file_ast.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.get_original_source_file_ast.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.get_original_source_file_ast.__dict__.__setitem__('stypy_function_name', 'Stypy.get_original_source_file_ast')
        Stypy.get_original_source_file_ast.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.get_original_source_file_ast.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.get_original_source_file_ast.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.get_original_source_file_ast.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.get_original_source_file_ast.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.get_original_source_file_ast.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.get_original_source_file_ast.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.get_original_source_file_ast', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_original_source_file_ast', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_original_source_file_ast(...)' code ##################

        str_343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 265, (-1)), 'str', '\n        Get the original source file AST tree optionally showing it\n        :return:\n        ')
        # Getting the type of 'self' (line 266)
        self_344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 11), 'self')
        # Obtaining the member 'verbose' of a type (line 266)
        verbose_345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 266, 11), self_344, 'verbose')
        # Testing if the type of an if condition is none (line 266)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 266, 8), verbose_345):
            pass
        else:
            
            # Testing the type of an if condition (line 266)
            if_condition_346 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 266, 8), verbose_345)
            # Assigning a type to the variable 'if_condition_346' (line 266)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 266, 8), 'if_condition_346', if_condition_346)
            # SSA begins for if statement (line 266)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to info(...): (line 267)
            # Processing the call arguments (line 267)
            str_348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 267, 17), 'str', '\nSTyPy: Calculating program AST...\n')
            # Processing the call keyword arguments (line 267)
            kwargs_349 = {}
            # Getting the type of 'info' (line 267)
            info_347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 12), 'info', False)
            # Calling info(args, kwargs) (line 267)
            info_call_result_350 = invoke(stypy.reporting.localization.Localization(__file__, 267, 12), info_347, *[str_348], **kwargs_349)
            
            # SSA join for if statement (line 266)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # Assigning a Call to a Name (line 268):
        
        # Call to __get_original_source_file_ast(...): (line 268)
        # Processing the call keyword arguments (line 268)
        kwargs_353 = {}
        # Getting the type of 'self' (line 268)
        self_351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 23), 'self', False)
        # Obtaining the member '__get_original_source_file_ast' of a type (line 268)
        get_original_source_file_ast_352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 23), self_351, '__get_original_source_file_ast')
        # Calling __get_original_source_file_ast(args, kwargs) (line 268)
        get_original_source_file_ast_call_result_354 = invoke(stypy.reporting.localization.Localization(__file__, 268, 23), get_original_source_file_ast_352, *[], **kwargs_353)
        
        # Assigning a type to the variable 'original_ast' (line 268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'original_ast', get_original_source_file_ast_call_result_354)
        # Getting the type of 'self' (line 269)
        self_355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 11), 'self')
        # Obtaining the member 'show_ast' of a type (line 269)
        show_ast_356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 269, 11), self_355, 'show_ast')
        # Testing if the type of an if condition is none (line 269)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 269, 8), show_ast_356):
            pass
        else:
            
            # Testing the type of an if condition (line 269)
            if_condition_357 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 269, 8), show_ast_356)
            # Assigning a type to the variable 'if_condition_357' (line 269)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 269, 8), 'if_condition_357', if_condition_357)
            # SSA begins for if statement (line 269)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to info(...): (line 270)
            # Processing the call arguments (line 270)
            
            # Call to dump_ast(...): (line 270)
            # Processing the call arguments (line 270)
            # Getting the type of 'original_ast' (line 270)
            original_ast_360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 26), 'original_ast', False)
            # Processing the call keyword arguments (line 270)
            kwargs_361 = {}
            # Getting the type of 'dump_ast' (line 270)
            dump_ast_359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 17), 'dump_ast', False)
            # Calling dump_ast(args, kwargs) (line 270)
            dump_ast_call_result_362 = invoke(stypy.reporting.localization.Localization(__file__, 270, 17), dump_ast_359, *[original_ast_360], **kwargs_361)
            
            # Processing the call keyword arguments (line 270)
            kwargs_363 = {}
            # Getting the type of 'info' (line 270)
            info_358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 12), 'info', False)
            # Calling info(args, kwargs) (line 270)
            info_call_result_364 = invoke(stypy.reporting.localization.Localization(__file__, 270, 12), info_358, *[dump_ast_call_result_362], **kwargs_363)
            
            # SSA join for if statement (line 269)
            module_type_store = module_type_store.join_ssa_context()
            

        # Getting the type of 'original_ast' (line 272)
        original_ast_365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 15), 'original_ast')
        # Assigning a type to the variable 'stypy_return_type' (line 272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 8), 'stypy_return_type', original_ast_365)
        
        # ################# End of 'get_original_source_file_ast(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_original_source_file_ast' in the type store
        # Getting the type of 'stypy_return_type' (line 261)
        stypy_return_type_366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_366)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_original_source_file_ast'
        return stypy_return_type_366


    @norecursion
    def get_type_data_autogeneration_ast(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_type_data_autogeneration_ast'
        module_type_store = module_type_store.open_function_context('get_type_data_autogeneration_ast', 276, 4, False)
        # Assigning a type to the variable 'self' (line 277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.get_type_data_autogeneration_ast.__dict__.__setitem__('stypy_localization', localization)
        Stypy.get_type_data_autogeneration_ast.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.get_type_data_autogeneration_ast.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.get_type_data_autogeneration_ast.__dict__.__setitem__('stypy_function_name', 'Stypy.get_type_data_autogeneration_ast')
        Stypy.get_type_data_autogeneration_ast.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.get_type_data_autogeneration_ast.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.get_type_data_autogeneration_ast.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.get_type_data_autogeneration_ast.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.get_type_data_autogeneration_ast.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.get_type_data_autogeneration_ast.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.get_type_data_autogeneration_ast.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.get_type_data_autogeneration_ast', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_type_data_autogeneration_ast', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_type_data_autogeneration_ast(...)' code ##################

        str_367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 280, (-1)), 'str', '\n        Get the AST of the optionally generated runtime type data calculation program\n        :return:\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 281)
        str_368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 281, 29), 'str', 'type_data_autogeneration_ast_tree')
        # Getting the type of 'self' (line 281)
        self_369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 23), 'self')
        
        (may_be_370, more_types_in_union_371) = may_not_provide_member(str_368, self_369)

        if may_be_370:

            if more_types_in_union_371:
                # Runtime conditional SSA (line 281)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 281)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 281, 8), 'self', remove_member_provider_from_union(self_369, 'type_data_autogeneration_ast_tree'))
            # Getting the type of 'None' (line 282)
            None_372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 19), 'None')
            # Assigning a type to the variable 'stypy_return_type' (line 282)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 282, 12), 'stypy_return_type', None_372)

            if more_types_in_union_371:
                # SSA join for if statement (line 281)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 283)
        self_373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 15), 'self')
        # Obtaining the member 'type_data_autogeneration_ast_tree' of a type (line 283)
        type_data_autogeneration_ast_tree_374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 283, 15), self_373, 'type_data_autogeneration_ast_tree')
        # Assigning a type to the variable 'stypy_return_type' (line 283)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 283, 8), 'stypy_return_type', type_data_autogeneration_ast_tree_374)
        
        # ################# End of 'get_type_data_autogeneration_ast(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_type_data_autogeneration_ast' in the type store
        # Getting the type of 'stypy_return_type' (line 276)
        stypy_return_type_375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_375)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_type_data_autogeneration_ast'
        return stypy_return_type_375


    @norecursion
    def get_type_data_autogeneration_program_source_code(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_type_data_autogeneration_program_source_code'
        module_type_store = module_type_store.open_function_context('get_type_data_autogeneration_program_source_code', 285, 4, False)
        # Assigning a type to the variable 'self' (line 286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.get_type_data_autogeneration_program_source_code.__dict__.__setitem__('stypy_localization', localization)
        Stypy.get_type_data_autogeneration_program_source_code.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.get_type_data_autogeneration_program_source_code.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.get_type_data_autogeneration_program_source_code.__dict__.__setitem__('stypy_function_name', 'Stypy.get_type_data_autogeneration_program_source_code')
        Stypy.get_type_data_autogeneration_program_source_code.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.get_type_data_autogeneration_program_source_code.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.get_type_data_autogeneration_program_source_code.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.get_type_data_autogeneration_program_source_code.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.get_type_data_autogeneration_program_source_code.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.get_type_data_autogeneration_program_source_code.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.get_type_data_autogeneration_program_source_code.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.get_type_data_autogeneration_program_source_code', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_type_data_autogeneration_program_source_code', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_type_data_autogeneration_program_source_code(...)' code ##################

        str_376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, (-1)), 'str', '\n        Get the source code of the optionally generated runtime type data calculation program\n        :return:\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 290)
        str_377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 290, 29), 'str', 'type_generation_source_code')
        # Getting the type of 'self' (line 290)
        self_378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 23), 'self')
        
        (may_be_379, more_types_in_union_380) = may_not_provide_member(str_377, self_378)

        if may_be_379:

            if more_types_in_union_380:
                # Runtime conditional SSA (line 290)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 290)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 290, 8), 'self', remove_member_provider_from_union(self_378, 'type_generation_source_code'))
            # Getting the type of 'None' (line 291)
            None_381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 19), 'None')
            # Assigning a type to the variable 'stypy_return_type' (line 291)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 291, 12), 'stypy_return_type', None_381)

            if more_types_in_union_380:
                # SSA join for if statement (line 290)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 293)
        # Getting the type of 'self' (line 293)
        self_382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 11), 'self')
        # Obtaining the member 'type_generation_source_code' of a type (line 293)
        type_generation_source_code_383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 11), self_382, 'type_generation_source_code')
        # Getting the type of 'None' (line 293)
        None_384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 47), 'None')
        
        (may_be_385, more_types_in_union_386) = may_be_none(type_generation_source_code_383, None_384)

        if may_be_385:

            if more_types_in_union_386:
                # Runtime conditional SSA (line 293)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 294):
            
            # Call to generate_code(...): (line 294)
            # Processing the call keyword arguments (line 294)
            kwargs_395 = {}
            
            # Call to PythonSrcGeneratorVisitor(...): (line 294)
            # Processing the call arguments (line 294)
            
            # Call to get_type_data_autogeneration_ast(...): (line 295)
            # Processing the call keyword arguments (line 295)
            kwargs_390 = {}
            # Getting the type of 'self' (line 295)
            self_388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 16), 'self', False)
            # Obtaining the member 'get_type_data_autogeneration_ast' of a type (line 295)
            get_type_data_autogeneration_ast_389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 16), self_388, 'get_type_data_autogeneration_ast')
            # Calling get_type_data_autogeneration_ast(args, kwargs) (line 295)
            get_type_data_autogeneration_ast_call_result_391 = invoke(stypy.reporting.localization.Localization(__file__, 295, 16), get_type_data_autogeneration_ast_389, *[], **kwargs_390)
            
            # Processing the call keyword arguments (line 294)
            kwargs_392 = {}
            # Getting the type of 'PythonSrcGeneratorVisitor' (line 294)
            PythonSrcGeneratorVisitor_387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 47), 'PythonSrcGeneratorVisitor', False)
            # Calling PythonSrcGeneratorVisitor(args, kwargs) (line 294)
            PythonSrcGeneratorVisitor_call_result_393 = invoke(stypy.reporting.localization.Localization(__file__, 294, 47), PythonSrcGeneratorVisitor_387, *[get_type_data_autogeneration_ast_call_result_391], **kwargs_392)
            
            # Obtaining the member 'generate_code' of a type (line 294)
            generate_code_394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 294, 47), PythonSrcGeneratorVisitor_call_result_393, 'generate_code')
            # Calling generate_code(args, kwargs) (line 294)
            generate_code_call_result_396 = invoke(stypy.reporting.localization.Localization(__file__, 294, 47), generate_code_394, *[], **kwargs_395)
            
            # Getting the type of 'self' (line 294)
            self_397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 12), 'self')
            # Setting the type of the member 'type_generation_source_code' of a type (line 294)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 294, 12), self_397, 'type_generation_source_code', generate_code_call_result_396)

            if more_types_in_union_386:
                # SSA join for if statement (line 293)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 297)
        self_398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 15), 'self')
        # Obtaining the member 'type_generation_source_code' of a type (line 297)
        type_generation_source_code_399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 15), self_398, 'type_generation_source_code')
        # Assigning a type to the variable 'stypy_return_type' (line 297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 8), 'stypy_return_type', type_generation_source_code_399)
        
        # ################# End of 'get_type_data_autogeneration_program_source_code(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_type_data_autogeneration_program_source_code' in the type store
        # Getting the type of 'stypy_return_type' (line 285)
        stypy_return_type_400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_400)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_type_data_autogeneration_program_source_code'
        return stypy_return_type_400


    @norecursion
    def create_automatic_type_data_autogenerator_program(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'create_automatic_type_data_autogenerator_program'
        module_type_store = module_type_store.open_function_context('create_automatic_type_data_autogenerator_program', 299, 4, False)
        # Assigning a type to the variable 'self' (line 300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 300, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.create_automatic_type_data_autogenerator_program.__dict__.__setitem__('stypy_localization', localization)
        Stypy.create_automatic_type_data_autogenerator_program.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.create_automatic_type_data_autogenerator_program.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.create_automatic_type_data_autogenerator_program.__dict__.__setitem__('stypy_function_name', 'Stypy.create_automatic_type_data_autogenerator_program')
        Stypy.create_automatic_type_data_autogenerator_program.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.create_automatic_type_data_autogenerator_program.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.create_automatic_type_data_autogenerator_program.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.create_automatic_type_data_autogenerator_program.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.create_automatic_type_data_autogenerator_program.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.create_automatic_type_data_autogenerator_program.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.create_automatic_type_data_autogenerator_program.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.create_automatic_type_data_autogenerator_program', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'create_automatic_type_data_autogenerator_program', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'create_automatic_type_data_autogenerator_program(...)' code ##################

        str_401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 303, (-1)), 'str', '\n        Creates a runtime type data calculation program derived from the original one, used for unit testing\n        :return:\n        ')
        
        # Call to exists(...): (line 304)
        # Processing the call arguments (line 304)
        
        # Call to get_stypy_type_data_file_path(...): (line 304)
        # Processing the call arguments (line 304)
        # Getting the type of 'self' (line 304)
        self_406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 56), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 304)
        source_file_path_407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 304, 56), self_406, 'source_file_path')
        # Processing the call keyword arguments (line 304)
        kwargs_408 = {}
        # Getting the type of 'get_stypy_type_data_file_path' (line 304)
        get_stypy_type_data_file_path_405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 26), 'get_stypy_type_data_file_path', False)
        # Calling get_stypy_type_data_file_path(args, kwargs) (line 304)
        get_stypy_type_data_file_path_call_result_409 = invoke(stypy.reporting.localization.Localization(__file__, 304, 26), get_stypy_type_data_file_path_405, *[source_file_path_407], **kwargs_408)
        
        # Processing the call keyword arguments (line 304)
        kwargs_410 = {}
        # Getting the type of 'os' (line 304)
        os_402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 11), 'os', False)
        # Obtaining the member 'path' of a type (line 304)
        path_403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 304, 11), os_402, 'path')
        # Obtaining the member 'exists' of a type (line 304)
        exists_404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 304, 11), path_403, 'exists')
        # Calling exists(args, kwargs) (line 304)
        exists_call_result_411 = invoke(stypy.reporting.localization.Localization(__file__, 304, 11), exists_404, *[get_stypy_type_data_file_path_call_result_409], **kwargs_410)
        
        # Testing if the type of an if condition is none (line 304)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 304, 8), exists_call_result_411):
            pass
        else:
            
            # Testing the type of an if condition (line 304)
            if_condition_412 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 304, 8), exists_call_result_411)
            # Assigning a type to the variable 'if_condition_412' (line 304)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 304, 8), 'if_condition_412', if_condition_412)
            # SSA begins for if statement (line 304)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            # Assigning a type to the variable 'stypy_return_type' (line 305)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 305, 12), 'stypy_return_type', types.NoneType)
            # SSA join for if statement (line 304)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # Call to info(...): (line 307)
        # Processing the call arguments (line 307)
        str_414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 307, 13), 'str', '\nSTyPy: Calculating automatic type information helper program AST...\n')
        # Processing the call keyword arguments (line 307)
        kwargs_415 = {}
        # Getting the type of 'info' (line 307)
        info_413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 8), 'info', False)
        # Calling info(args, kwargs) (line 307)
        info_call_result_416 = invoke(stypy.reporting.localization.Localization(__file__, 307, 8), info_413, *[str_414], **kwargs_415)
        
        
        # Assigning a Call to a Name (line 308):
        
        # Call to get_type_data_autogeneration_ast(...): (line 308)
        # Processing the call keyword arguments (line 308)
        kwargs_419 = {}
        # Getting the type of 'self' (line 308)
        self_417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 17), 'self', False)
        # Obtaining the member 'get_type_data_autogeneration_ast' of a type (line 308)
        get_type_data_autogeneration_ast_418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 308, 17), self_417, 'get_type_data_autogeneration_ast')
        # Calling get_type_data_autogeneration_ast(args, kwargs) (line 308)
        get_type_data_autogeneration_ast_call_result_420 = invoke(stypy.reporting.localization.Localization(__file__, 308, 17), get_type_data_autogeneration_ast_418, *[], **kwargs_419)
        
        # Assigning a type to the variable 'tt_ast' (line 308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 308, 8), 'tt_ast', get_type_data_autogeneration_ast_call_result_420)
        
        # Type idiom detected: calculating its left and rigth part (line 309)
        # Getting the type of 'tt_ast' (line 309)
        tt_ast_421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 11), 'tt_ast')
        # Getting the type of 'None' (line 309)
        None_422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 21), 'None')
        
        (may_be_423, more_types_in_union_424) = may_be_none(tt_ast_421, None_422)

        if may_be_423:

            if more_types_in_union_424:
                # Runtime conditional SSA (line 309)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 310)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 310, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_424:
                # SSA join for if statement (line 309)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'tt_ast' (line 309)
        tt_ast_425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 8), 'tt_ast')
        # Assigning a type to the variable 'tt_ast' (line 309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 309, 8), 'tt_ast', remove_type_from_union(tt_ast_425, types.NoneType))
        # Getting the type of 'self' (line 311)
        self_426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 11), 'self')
        # Obtaining the member 'show_ast' of a type (line 311)
        show_ast_427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 311, 11), self_426, 'show_ast')
        # Testing if the type of an if condition is none (line 311)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 311, 8), show_ast_427):
            pass
        else:
            
            # Testing the type of an if condition (line 311)
            if_condition_428 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 311, 8), show_ast_427)
            # Assigning a type to the variable 'if_condition_428' (line 311)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 311, 8), 'if_condition_428', if_condition_428)
            # SSA begins for if statement (line 311)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to info(...): (line 312)
            # Processing the call arguments (line 312)
            
            # Call to dump_ast(...): (line 312)
            # Processing the call arguments (line 312)
            # Getting the type of 'tt_ast' (line 312)
            tt_ast_431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 26), 'tt_ast', False)
            # Processing the call keyword arguments (line 312)
            kwargs_432 = {}
            # Getting the type of 'dump_ast' (line 312)
            dump_ast_430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 17), 'dump_ast', False)
            # Calling dump_ast(args, kwargs) (line 312)
            dump_ast_call_result_433 = invoke(stypy.reporting.localization.Localization(__file__, 312, 17), dump_ast_430, *[tt_ast_431], **kwargs_432)
            
            # Processing the call keyword arguments (line 312)
            kwargs_434 = {}
            # Getting the type of 'info' (line 312)
            info_429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 12), 'info', False)
            # Calling info(args, kwargs) (line 312)
            info_call_result_435 = invoke(stypy.reporting.localization.Localization(__file__, 312, 12), info_429, *[dump_ast_call_result_433], **kwargs_434)
            
            # SSA join for if statement (line 311)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # Call to info(...): (line 314)
        # Processing the call arguments (line 314)
        str_437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 314, 13), 'str', '\n\n')
        # Processing the call keyword arguments (line 314)
        kwargs_438 = {}
        # Getting the type of 'info' (line 314)
        info_436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 8), 'info', False)
        # Calling info(args, kwargs) (line 314)
        info_call_result_439 = invoke(stypy.reporting.localization.Localization(__file__, 314, 8), info_436, *[str_437], **kwargs_438)
        
        
        # Call to info(...): (line 316)
        # Processing the call arguments (line 316)
        str_441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 316, 13), 'str', '\nSTyPy: Automatic type information helper program code:\n')
        # Processing the call keyword arguments (line 316)
        kwargs_442 = {}
        # Getting the type of 'info' (line 316)
        info_440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 8), 'info', False)
        # Calling info(args, kwargs) (line 316)
        info_call_result_443 = invoke(stypy.reporting.localization.Localization(__file__, 316, 8), info_440, *[str_441], **kwargs_442)
        
        
        # Assigning a Call to a Name (line 317):
        
        # Call to get_type_data_autogeneration_program_source_code(...): (line 317)
        # Processing the call keyword arguments (line 317)
        kwargs_446 = {}
        # Getting the type of 'self' (line 317)
        self_444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 22), 'self', False)
        # Obtaining the member 'get_type_data_autogeneration_program_source_code' of a type (line 317)
        get_type_data_autogeneration_program_source_code_445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 317, 22), self_444, 'get_type_data_autogeneration_program_source_code')
        # Calling get_type_data_autogeneration_program_source_code(args, kwargs) (line 317)
        get_type_data_autogeneration_program_source_code_call_result_447 = invoke(stypy.reporting.localization.Localization(__file__, 317, 22), get_type_data_autogeneration_program_source_code_445, *[], **kwargs_446)
        
        # Assigning a type to the variable 'tgen_source' (line 317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 317, 8), 'tgen_source', get_type_data_autogeneration_program_source_code_call_result_447)
        
        # Call to info(...): (line 318)
        # Processing the call arguments (line 318)
        # Getting the type of 'tgen_source' (line 318)
        tgen_source_449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 13), 'tgen_source', False)
        # Processing the call keyword arguments (line 318)
        kwargs_450 = {}
        # Getting the type of 'info' (line 318)
        info_448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 8), 'info', False)
        # Calling info(args, kwargs) (line 318)
        info_call_result_451 = invoke(stypy.reporting.localization.Localization(__file__, 318, 8), info_448, *[tgen_source_449], **kwargs_450)
        
        
        # Call to write_python_source_code(...): (line 319)
        # Processing the call arguments (line 319)
        
        # Call to get_stypy_type_data_autogenerator_program_file_path(...): (line 319)
        # Processing the call arguments (line 319)
        # Getting the type of 'self' (line 319)
        self_454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 85), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 319)
        source_file_path_455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 319, 85), self_454, 'source_file_path')
        # Processing the call keyword arguments (line 319)
        kwargs_456 = {}
        # Getting the type of 'get_stypy_type_data_autogenerator_program_file_path' (line 319)
        get_stypy_type_data_autogenerator_program_file_path_453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 33), 'get_stypy_type_data_autogenerator_program_file_path', False)
        # Calling get_stypy_type_data_autogenerator_program_file_path(args, kwargs) (line 319)
        get_stypy_type_data_autogenerator_program_file_path_call_result_457 = invoke(stypy.reporting.localization.Localization(__file__, 319, 33), get_stypy_type_data_autogenerator_program_file_path_453, *[source_file_path_455], **kwargs_456)
        
        # Getting the type of 'tgen_source' (line 320)
        tgen_source_458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 33), 'tgen_source', False)
        # Processing the call keyword arguments (line 319)
        kwargs_459 = {}
        # Getting the type of 'write_python_source_code' (line 319)
        write_python_source_code_452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 8), 'write_python_source_code', False)
        # Calling write_python_source_code(args, kwargs) (line 319)
        write_python_source_code_call_result_460 = invoke(stypy.reporting.localization.Localization(__file__, 319, 8), write_python_source_code_452, *[get_stypy_type_data_autogenerator_program_file_path_call_result_457, tgen_source_458], **kwargs_459)
        
        
        
        # Call to exists(...): (line 322)
        # Processing the call arguments (line 322)
        
        # Call to get_stypy_type_data_file_path(...): (line 322)
        # Processing the call arguments (line 322)
        # Getting the type of 'self' (line 322)
        self_465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 60), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 322)
        source_file_path_466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 60), self_465, 'source_file_path')
        # Processing the call keyword arguments (line 322)
        kwargs_467 = {}
        # Getting the type of 'get_stypy_type_data_file_path' (line 322)
        get_stypy_type_data_file_path_464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 30), 'get_stypy_type_data_file_path', False)
        # Calling get_stypy_type_data_file_path(args, kwargs) (line 322)
        get_stypy_type_data_file_path_call_result_468 = invoke(stypy.reporting.localization.Localization(__file__, 322, 30), get_stypy_type_data_file_path_464, *[source_file_path_466], **kwargs_467)
        
        # Processing the call keyword arguments (line 322)
        kwargs_469 = {}
        # Getting the type of 'os' (line 322)
        os_461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 15), 'os', False)
        # Obtaining the member 'path' of a type (line 322)
        path_462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 15), os_461, 'path')
        # Obtaining the member 'exists' of a type (line 322)
        exists_463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 15), path_462, 'exists')
        # Calling exists(args, kwargs) (line 322)
        exists_call_result_470 = invoke(stypy.reporting.localization.Localization(__file__, 322, 15), exists_463, *[get_stypy_type_data_file_path_call_result_468], **kwargs_469)
        
        # Applying the 'not' unary operator (line 322)
        result_not__471 = python_operator(stypy.reporting.localization.Localization(__file__, 322, 11), 'not', exists_call_result_470)
        
        # Testing if the type of an if condition is none (line 322)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 322, 8), result_not__471):
            pass
        else:
            
            # Testing the type of an if condition (line 322)
            if_condition_472 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 322, 8), result_not__471)
            # Assigning a type to the variable 'if_condition_472' (line 322)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 8), 'if_condition_472', if_condition_472)
            # SSA begins for if statement (line 322)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to __run_program(...): (line 323)
            # Processing the call arguments (line 323)
            
            # Call to get_stypy_type_data_autogenerator_program_file_path(...): (line 323)
            # Processing the call arguments (line 323)
            # Getting the type of 'self' (line 323)
            self_476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 83), 'self', False)
            # Obtaining the member 'source_file_path' of a type (line 323)
            source_file_path_477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 83), self_476, 'source_file_path')
            # Processing the call keyword arguments (line 323)
            kwargs_478 = {}
            # Getting the type of 'get_stypy_type_data_autogenerator_program_file_path' (line 323)
            get_stypy_type_data_autogenerator_program_file_path_475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 31), 'get_stypy_type_data_autogenerator_program_file_path', False)
            # Calling get_stypy_type_data_autogenerator_program_file_path(args, kwargs) (line 323)
            get_stypy_type_data_autogenerator_program_file_path_call_result_479 = invoke(stypy.reporting.localization.Localization(__file__, 323, 31), get_stypy_type_data_autogenerator_program_file_path_475, *[source_file_path_477], **kwargs_478)
            
            # Processing the call keyword arguments (line 323)
            kwargs_480 = {}
            # Getting the type of 'self' (line 323)
            self_473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 12), 'self', False)
            # Obtaining the member '__run_program' of a type (line 323)
            run_program_474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 12), self_473, '__run_program')
            # Calling __run_program(args, kwargs) (line 323)
            run_program_call_result_481 = invoke(stypy.reporting.localization.Localization(__file__, 323, 12), run_program_474, *[get_stypy_type_data_autogenerator_program_file_path_call_result_479], **kwargs_480)
            
            # SSA join for if statement (line 322)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # ################# End of 'create_automatic_type_data_autogenerator_program(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'create_automatic_type_data_autogenerator_program' in the type store
        # Getting the type of 'stypy_return_type' (line 299)
        stypy_return_type_482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_482)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'create_automatic_type_data_autogenerator_program'
        return stypy_return_type_482


    @norecursion
    def get_type_inference_program_ast(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_type_inference_program_ast'
        module_type_store = module_type_store.open_function_context('get_type_inference_program_ast', 327, 4, False)
        # Assigning a type to the variable 'self' (line 328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 328, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.get_type_inference_program_ast.__dict__.__setitem__('stypy_localization', localization)
        Stypy.get_type_inference_program_ast.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.get_type_inference_program_ast.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.get_type_inference_program_ast.__dict__.__setitem__('stypy_function_name', 'Stypy.get_type_inference_program_ast')
        Stypy.get_type_inference_program_ast.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.get_type_inference_program_ast.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.get_type_inference_program_ast.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.get_type_inference_program_ast.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.get_type_inference_program_ast.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.get_type_inference_program_ast.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.get_type_inference_program_ast.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.get_type_inference_program_ast', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_type_inference_program_ast', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_type_inference_program_ast(...)' code ##################

        str_483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 331, (-1)), 'str', '\n        Get the generated type inference program AST\n        :return:\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 332)
        # Getting the type of 'self' (line 332)
        self_484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 11), 'self')
        # Obtaining the member 'type_inference_ast_tree' of a type (line 332)
        type_inference_ast_tree_485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 11), self_484, 'type_inference_ast_tree')
        # Getting the type of 'None' (line 332)
        None_486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 43), 'None')
        
        (may_be_487, more_types_in_union_488) = may_be_none(type_inference_ast_tree_485, None_486)

        if may_be_487:

            if more_types_in_union_488:
                # Runtime conditional SSA (line 332)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Attribute (line 333):
            # Getting the type of 'self' (line 333)
            self_489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 43), 'self')
            # Obtaining the member 'original_ast_tree' of a type (line 333)
            original_ast_tree_490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 333, 43), self_489, 'original_ast_tree')
            # Getting the type of 'self' (line 333)
            self_491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 12), 'self')
            # Setting the type of the member 'type_inference_ast_tree' of a type (line 333)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 333, 12), self_491, 'type_inference_ast_tree', original_ast_tree_490)
            
            # Getting the type of 'self' (line 336)
            self_492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 27), 'self')
            # Obtaining the member 'visitors' of a type (line 336)
            visitors_493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 336, 27), self_492, 'visitors')
            # Assigning a type to the variable 'visitors_493' (line 336)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 336, 12), 'visitors_493', visitors_493)
            # Testing if the for loop is going to be iterated (line 336)
            # Testing the type of a for loop iterable (line 336)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 336, 12), visitors_493)

            if will_iterate_loop(stypy.reporting.localization.Localization(__file__, 336, 12), visitors_493):
                # Getting the type of the for loop variable (line 336)
                for_loop_var_494 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 336, 12), visitors_493)
                # Assigning a type to the variable 'visitor' (line 336)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 336, 12), 'visitor', for_loop_var_494)
                # SSA begins for a for statement (line 336)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
                # Getting the type of 'self' (line 337)
                self_495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 19), 'self')
                # Obtaining the member 'verbose' of a type (line 337)
                verbose_496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 337, 19), self_495, 'verbose')
                # Testing if the type of an if condition is none (line 337)

                if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 337, 16), verbose_496):
                    pass
                else:
                    
                    # Testing the type of an if condition (line 337)
                    if_condition_497 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 337, 16), verbose_496)
                    # Assigning a type to the variable 'if_condition_497' (line 337)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 337, 16), 'if_condition_497', if_condition_497)
                    # SSA begins for if statement (line 337)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                    
                    # Call to info(...): (line 338)
                    # Processing the call arguments (line 338)
                    
                    # Call to format(...): (line 338)
                    # Processing the call arguments (line 338)
                    
                    # Call to type(...): (line 338)
                    # Processing the call arguments (line 338)
                    # Getting the type of 'visitor' (line 338)
                    visitor_502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 61), 'visitor', False)
                    # Processing the call keyword arguments (line 338)
                    kwargs_503 = {}
                    # Getting the type of 'type' (line 338)
                    type_501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 56), 'type', False)
                    # Calling type(args, kwargs) (line 338)
                    type_call_result_504 = invoke(stypy.reporting.localization.Localization(__file__, 338, 56), type_501, *[visitor_502], **kwargs_503)
                    
                    # Obtaining the member '__name__' of a type (line 338)
                    name___505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 338, 56), type_call_result_504, '__name__')
                    # Processing the call keyword arguments (line 338)
                    kwargs_506 = {}
                    str_499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 338, 25), 'str', "USING '{0}' VISITOR\n")
                    # Obtaining the member 'format' of a type (line 338)
                    format_500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 338, 25), str_499, 'format')
                    # Calling format(args, kwargs) (line 338)
                    format_call_result_507 = invoke(stypy.reporting.localization.Localization(__file__, 338, 25), format_500, *[name___505], **kwargs_506)
                    
                    # Processing the call keyword arguments (line 338)
                    kwargs_508 = {}
                    # Getting the type of 'info' (line 338)
                    info_498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 20), 'info', False)
                    # Calling info(args, kwargs) (line 338)
                    info_call_result_509 = invoke(stypy.reporting.localization.Localization(__file__, 338, 20), info_498, *[format_call_result_507], **kwargs_508)
                    
                    # SSA join for if statement (line 337)
                    module_type_store = module_type_store.join_ssa_context()
                    

                
                # Call to isinstance(...): (line 342)
                # Processing the call arguments (line 342)
                # Getting the type of 'visitor' (line 342)
                visitor_511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 30), 'visitor', False)
                # Getting the type of 'ast' (line 342)
                ast_512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 39), 'ast', False)
                # Obtaining the member 'NodeVisitor' of a type (line 342)
                NodeVisitor_513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 342, 39), ast_512, 'NodeVisitor')
                # Processing the call keyword arguments (line 342)
                kwargs_514 = {}
                # Getting the type of 'isinstance' (line 342)
                isinstance_510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 19), 'isinstance', False)
                # Calling isinstance(args, kwargs) (line 342)
                isinstance_call_result_515 = invoke(stypy.reporting.localization.Localization(__file__, 342, 19), isinstance_510, *[visitor_511, NodeVisitor_513], **kwargs_514)
                
                # Testing if the type of an if condition is none (line 342)

                if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 342, 16), isinstance_call_result_515):
                    
                    # Call to visit(...): (line 347)
                    # Processing the call arguments (line 347)
                    # Getting the type of 'self' (line 347)
                    self_527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 34), 'self', False)
                    # Obtaining the member 'type_inference_ast_tree' of a type (line 347)
                    type_inference_ast_tree_528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 347, 34), self_527, 'type_inference_ast_tree')
                    # Processing the call keyword arguments (line 347)
                    kwargs_529 = {}
                    # Getting the type of 'visitor' (line 347)
                    visitor_525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 20), 'visitor', False)
                    # Obtaining the member 'visit' of a type (line 347)
                    visit_526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 347, 20), visitor_525, 'visit')
                    # Calling visit(args, kwargs) (line 347)
                    visit_call_result_530 = invoke(stypy.reporting.localization.Localization(__file__, 347, 20), visit_526, *[type_inference_ast_tree_528], **kwargs_529)
                    
                else:
                    
                    # Testing the type of an if condition (line 342)
                    if_condition_516 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 342, 16), isinstance_call_result_515)
                    # Assigning a type to the variable 'if_condition_516' (line 342)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 342, 16), 'if_condition_516', if_condition_516)
                    # SSA begins for if statement (line 342)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                    
                    # Assigning a Call to a Name (line 343):
                    
                    # Call to visit(...): (line 343)
                    # Processing the call arguments (line 343)
                    # Getting the type of 'self' (line 343)
                    self_519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 46), 'self', False)
                    # Obtaining the member 'type_inference_ast_tree' of a type (line 343)
                    type_inference_ast_tree_520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 46), self_519, 'type_inference_ast_tree')
                    # Processing the call keyword arguments (line 343)
                    kwargs_521 = {}
                    # Getting the type of 'visitor' (line 343)
                    visitor_517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 32), 'visitor', False)
                    # Obtaining the member 'visit' of a type (line 343)
                    visit_518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 32), visitor_517, 'visit')
                    # Calling visit(args, kwargs) (line 343)
                    visit_call_result_522 = invoke(stypy.reporting.localization.Localization(__file__, 343, 32), visit_518, *[type_inference_ast_tree_520], **kwargs_521)
                    
                    # Assigning a type to the variable 'temp_tree' (line 343)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 20), 'temp_tree', visit_call_result_522)
                    
                    # Assigning a Name to a Attribute (line 344):
                    # Getting the type of 'temp_tree' (line 344)
                    temp_tree_523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 51), 'temp_tree')
                    # Getting the type of 'self' (line 344)
                    self_524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 20), 'self')
                    # Setting the type of the member 'type_inference_ast_tree' of a type (line 344)
                    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 344, 20), self_524, 'type_inference_ast_tree', temp_tree_523)
                    # SSA branch for the else part of an if statement (line 342)
                    module_type_store.open_ssa_branch('else')
                    
                    # Call to visit(...): (line 347)
                    # Processing the call arguments (line 347)
                    # Getting the type of 'self' (line 347)
                    self_527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 34), 'self', False)
                    # Obtaining the member 'type_inference_ast_tree' of a type (line 347)
                    type_inference_ast_tree_528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 347, 34), self_527, 'type_inference_ast_tree')
                    # Processing the call keyword arguments (line 347)
                    kwargs_529 = {}
                    # Getting the type of 'visitor' (line 347)
                    visitor_525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 20), 'visitor', False)
                    # Obtaining the member 'visit' of a type (line 347)
                    visit_526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 347, 20), visitor_525, 'visit')
                    # Calling visit(args, kwargs) (line 347)
                    visit_call_result_530 = invoke(stypy.reporting.localization.Localization(__file__, 347, 20), visit_526, *[type_inference_ast_tree_528], **kwargs_529)
                    
                    # SSA join for if statement (line 342)
                    module_type_store = module_type_store.join_ssa_context()
                    

                # Getting the type of 'self' (line 349)
                self_531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 19), 'self')
                # Obtaining the member 'show_ast' of a type (line 349)
                show_ast_532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 19), self_531, 'show_ast')
                # Testing if the type of an if condition is none (line 349)

                if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 349, 16), show_ast_532):
                    pass
                else:
                    
                    # Testing the type of an if condition (line 349)
                    if_condition_533 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 349, 16), show_ast_532)
                    # Assigning a type to the variable 'if_condition_533' (line 349)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 349, 16), 'if_condition_533', if_condition_533)
                    # SSA begins for if statement (line 349)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                    
                    # Call to info(...): (line 350)
                    # Processing the call arguments (line 350)
                    
                    # Call to dump_ast(...): (line 350)
                    # Processing the call arguments (line 350)
                    # Getting the type of 'self' (line 350)
                    self_536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 34), 'self', False)
                    # Obtaining the member 'type_inference_ast_tree' of a type (line 350)
                    type_inference_ast_tree_537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 350, 34), self_536, 'type_inference_ast_tree')
                    # Processing the call keyword arguments (line 350)
                    kwargs_538 = {}
                    # Getting the type of 'dump_ast' (line 350)
                    dump_ast_535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 25), 'dump_ast', False)
                    # Calling dump_ast(args, kwargs) (line 350)
                    dump_ast_call_result_539 = invoke(stypy.reporting.localization.Localization(__file__, 350, 25), dump_ast_535, *[type_inference_ast_tree_537], **kwargs_538)
                    
                    # Processing the call keyword arguments (line 350)
                    kwargs_540 = {}
                    # Getting the type of 'info' (line 350)
                    info_534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 20), 'info', False)
                    # Calling info(args, kwargs) (line 350)
                    info_call_result_541 = invoke(stypy.reporting.localization.Localization(__file__, 350, 20), info_534, *[dump_ast_call_result_539], **kwargs_540)
                    
                    # SSA join for if statement (line 349)
                    module_type_store = module_type_store.join_ssa_context()
                    

                # SSA join for a for statement
                module_type_store = module_type_store.join_ssa_context()

            
            
            
            # SSA begins for try-except statement (line 351)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Call to fix_missing_locations(...): (line 353)
            # Processing the call arguments (line 353)
            # Getting the type of 'self' (line 353)
            self_544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 42), 'self', False)
            # Obtaining the member 'type_inference_ast_tree' of a type (line 353)
            type_inference_ast_tree_545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 353, 42), self_544, 'type_inference_ast_tree')
            # Processing the call keyword arguments (line 353)
            kwargs_546 = {}
            # Getting the type of 'ast' (line 353)
            ast_542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 16), 'ast', False)
            # Obtaining the member 'fix_missing_locations' of a type (line 353)
            fix_missing_locations_543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 353, 16), ast_542, 'fix_missing_locations')
            # Calling fix_missing_locations(args, kwargs) (line 353)
            fix_missing_locations_call_result_547 = invoke(stypy.reporting.localization.Localization(__file__, 353, 16), fix_missing_locations_543, *[type_inference_ast_tree_545], **kwargs_546)
            
            # SSA branch for the except part of a try statement (line 351)
            # SSA branch for the except '<any exception>' branch of a try statement (line 351)
            module_type_store.open_ssa_branch('except')
            pass
            # SSA join for try-except statement (line 351)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_488:
                # SSA join for if statement (line 332)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 357)
        self_548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 15), 'self')
        # Obtaining the member 'type_inference_ast_tree' of a type (line 357)
        type_inference_ast_tree_549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 357, 15), self_548, 'type_inference_ast_tree')
        # Assigning a type to the variable 'stypy_return_type' (line 357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 357, 8), 'stypy_return_type', type_inference_ast_tree_549)
        
        # ################# End of 'get_type_inference_program_ast(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_type_inference_program_ast' in the type store
        # Getting the type of 'stypy_return_type' (line 327)
        stypy_return_type_550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_550)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_type_inference_program_ast'
        return stypy_return_type_550


    @norecursion
    def get_type_inference_program_source_code(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_type_inference_program_source_code'
        module_type_store = module_type_store.open_function_context('get_type_inference_program_source_code', 359, 4, False)
        # Assigning a type to the variable 'self' (line 360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.get_type_inference_program_source_code.__dict__.__setitem__('stypy_localization', localization)
        Stypy.get_type_inference_program_source_code.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.get_type_inference_program_source_code.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.get_type_inference_program_source_code.__dict__.__setitem__('stypy_function_name', 'Stypy.get_type_inference_program_source_code')
        Stypy.get_type_inference_program_source_code.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.get_type_inference_program_source_code.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.get_type_inference_program_source_code.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.get_type_inference_program_source_code.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.get_type_inference_program_source_code.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.get_type_inference_program_source_code.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.get_type_inference_program_source_code.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.get_type_inference_program_source_code', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_type_inference_program_source_code', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_type_inference_program_source_code(...)' code ##################

        str_551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 363, (-1)), 'str', '\n        Generates the source code for the type inference program, once its AST has been calculated\n        :return:\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 364)
        # Getting the type of 'self' (line 364)
        self_552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 11), 'self')
        # Obtaining the member 'type_inference_source_code' of a type (line 364)
        type_inference_source_code_553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 364, 11), self_552, 'type_inference_source_code')
        # Getting the type of 'None' (line 364)
        None_554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 46), 'None')
        
        (may_be_555, more_types_in_union_556) = may_be_none(type_inference_source_code_553, None_554)

        if may_be_555:

            if more_types_in_union_556:
                # Runtime conditional SSA (line 364)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 365):
            
            # Call to generate_code(...): (line 365)
            # Processing the call keyword arguments (line 365)
            kwargs_565 = {}
            
            # Call to PythonSrcGeneratorVisitor(...): (line 365)
            # Processing the call arguments (line 365)
            
            # Call to get_type_inference_program_ast(...): (line 366)
            # Processing the call keyword arguments (line 366)
            kwargs_560 = {}
            # Getting the type of 'self' (line 366)
            self_558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 16), 'self', False)
            # Obtaining the member 'get_type_inference_program_ast' of a type (line 366)
            get_type_inference_program_ast_559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 366, 16), self_558, 'get_type_inference_program_ast')
            # Calling get_type_inference_program_ast(args, kwargs) (line 366)
            get_type_inference_program_ast_call_result_561 = invoke(stypy.reporting.localization.Localization(__file__, 366, 16), get_type_inference_program_ast_559, *[], **kwargs_560)
            
            # Processing the call keyword arguments (line 365)
            kwargs_562 = {}
            # Getting the type of 'PythonSrcGeneratorVisitor' (line 365)
            PythonSrcGeneratorVisitor_557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 46), 'PythonSrcGeneratorVisitor', False)
            # Calling PythonSrcGeneratorVisitor(args, kwargs) (line 365)
            PythonSrcGeneratorVisitor_call_result_563 = invoke(stypy.reporting.localization.Localization(__file__, 365, 46), PythonSrcGeneratorVisitor_557, *[get_type_inference_program_ast_call_result_561], **kwargs_562)
            
            # Obtaining the member 'generate_code' of a type (line 365)
            generate_code_564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 46), PythonSrcGeneratorVisitor_call_result_563, 'generate_code')
            # Calling generate_code(args, kwargs) (line 365)
            generate_code_call_result_566 = invoke(stypy.reporting.localization.Localization(__file__, 365, 46), generate_code_564, *[], **kwargs_565)
            
            # Getting the type of 'self' (line 365)
            self_567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 12), 'self')
            # Setting the type of the member 'type_inference_source_code' of a type (line 365)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 12), self_567, 'type_inference_source_code', generate_code_call_result_566)
            
            # Getting the type of 'self' (line 368)
            self_568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 27), 'self')
            # Obtaining the member 'visitors' of a type (line 368)
            visitors_569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 368, 27), self_568, 'visitors')
            # Assigning a type to the variable 'visitors_569' (line 368)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 368, 12), 'visitors_569', visitors_569)
            # Testing if the for loop is going to be iterated (line 368)
            # Testing the type of a for loop iterable (line 368)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 368, 12), visitors_569)

            if will_iterate_loop(stypy.reporting.localization.Localization(__file__, 368, 12), visitors_569):
                # Getting the type of the for loop variable (line 368)
                for_loop_var_570 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 368, 12), visitors_569)
                # Assigning a type to the variable 'visitor' (line 368)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 368, 12), 'visitor', for_loop_var_570)
                # SSA begins for a for statement (line 368)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
                
                # Call to isinstance(...): (line 369)
                # Processing the call arguments (line 369)
                # Getting the type of 'visitor' (line 369)
                visitor_572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 30), 'visitor', False)
                # Getting the type of 'type_inference_visitor_copy' (line 369)
                type_inference_visitor_copy_573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 39), 'type_inference_visitor_copy', False)
                # Obtaining the member 'TypeInferenceGeneratorVisitor' of a type (line 369)
                TypeInferenceGeneratorVisitor_574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 369, 39), type_inference_visitor_copy_573, 'TypeInferenceGeneratorVisitor')
                # Processing the call keyword arguments (line 369)
                kwargs_575 = {}
                # Getting the type of 'isinstance' (line 369)
                isinstance_571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 19), 'isinstance', False)
                # Calling isinstance(args, kwargs) (line 369)
                isinstance_call_result_576 = invoke(stypy.reporting.localization.Localization(__file__, 369, 19), isinstance_571, *[visitor_572, TypeInferenceGeneratorVisitor_574], **kwargs_575)
                
                # Testing if the type of an if condition is none (line 369)

                if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 369, 16), isinstance_call_result_576):
                    pass
                else:
                    
                    # Testing the type of an if condition (line 369)
                    if_condition_577 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 369, 16), isinstance_call_result_576)
                    # Assigning a type to the variable 'if_condition_577' (line 369)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 369, 16), 'if_condition_577', if_condition_577)
                    # SSA begins for if statement (line 369)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                    
                    # Getting the type of 'self' (line 370)
                    self_578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 20), 'self')
                    # Obtaining the member 'type_inference_source_code' of a type (line 370)
                    type_inference_source_code_579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 20), self_578, 'type_inference_source_code')
                    
                    # Call to get_postfix_src_code(...): (line 370)
                    # Processing the call keyword arguments (line 370)
                    kwargs_583 = {}
                    # Getting the type of 'type_inference_visitor_copy' (line 370)
                    type_inference_visitor_copy_580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 55), 'type_inference_visitor_copy', False)
                    # Obtaining the member 'TypeInferenceGeneratorVisitor' of a type (line 370)
                    TypeInferenceGeneratorVisitor_581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 55), type_inference_visitor_copy_580, 'TypeInferenceGeneratorVisitor')
                    # Obtaining the member 'get_postfix_src_code' of a type (line 370)
                    get_postfix_src_code_582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 55), TypeInferenceGeneratorVisitor_581, 'get_postfix_src_code')
                    # Calling get_postfix_src_code(args, kwargs) (line 370)
                    get_postfix_src_code_call_result_584 = invoke(stypy.reporting.localization.Localization(__file__, 370, 55), get_postfix_src_code_582, *[], **kwargs_583)
                    
                    # Applying the binary operator '+=' (line 370)
                    result_iadd_585 = python_operator(stypy.reporting.localization.Localization(__file__, 370, 20), '+=', type_inference_source_code_579, get_postfix_src_code_call_result_584)
                    # Getting the type of 'self' (line 370)
                    self_586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 20), 'self')
                    # Setting the type of the member 'type_inference_source_code' of a type (line 370)
                    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 20), self_586, 'type_inference_source_code', result_iadd_585)
                    
                    # SSA join for if statement (line 369)
                    module_type_store = module_type_store.join_ssa_context()
                    

                # SSA join for a for statement
                module_type_store = module_type_store.join_ssa_context()

            

            if more_types_in_union_556:
                # SSA join for if statement (line 364)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 373)
        self_587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 15), 'self')
        # Obtaining the member 'type_inference_source_code' of a type (line 373)
        type_inference_source_code_588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 373, 15), self_587, 'type_inference_source_code')
        # Assigning a type to the variable 'stypy_return_type' (line 373)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 373, 8), 'stypy_return_type', type_inference_source_code_588)
        
        # ################# End of 'get_type_inference_program_source_code(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_type_inference_program_source_code' in the type store
        # Getting the type of 'stypy_return_type' (line 359)
        stypy_return_type_589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_589)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_type_inference_program_source_code'
        return stypy_return_type_589


    @norecursion
    def create_type_inference_program(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'create_type_inference_program'
        module_type_store = module_type_store.open_function_context('create_type_inference_program', 375, 4, False)
        # Assigning a type to the variable 'self' (line 376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.create_type_inference_program.__dict__.__setitem__('stypy_localization', localization)
        Stypy.create_type_inference_program.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.create_type_inference_program.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.create_type_inference_program.__dict__.__setitem__('stypy_function_name', 'Stypy.create_type_inference_program')
        Stypy.create_type_inference_program.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.create_type_inference_program.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.create_type_inference_program.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.create_type_inference_program.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.create_type_inference_program.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.create_type_inference_program.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.create_type_inference_program.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.create_type_inference_program', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'create_type_inference_program', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'create_type_inference_program(...)' code ##################

        str_590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 382, (-1)), 'str', '\n        Perform the full cycle of generating the type inference program AST (get_type_inference_program_ast) -\n        generate the source code from this AST (get_type_inference_program_source_code) - write this source code to a\n        file (write_python_source_code). This method should be called when generating the type inference program from\n        a Python source file, instead of the individual ones, provided in a public fashion just for logging purposes.\n        :return:\n        ')
        # Getting the type of 'self' (line 387)
        self_591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 11), 'self')
        # Obtaining the member 'verbose' of a type (line 387)
        verbose_592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 387, 11), self_591, 'verbose')
        # Testing if the type of an if condition is none (line 387)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 387, 8), verbose_592):
            pass
        else:
            
            # Testing the type of an if condition (line 387)
            if_condition_593 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 387, 8), verbose_592)
            # Assigning a type to the variable 'if_condition_593' (line 387)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 387, 8), 'if_condition_593', if_condition_593)
            # SSA begins for if statement (line 387)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to info(...): (line 388)
            # Processing the call arguments (line 388)
            str_595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 388, 17), 'str', '\nSTyPy: Calculating type inference program AST...\n')
            # Processing the call keyword arguments (line 388)
            kwargs_596 = {}
            # Getting the type of 'info' (line 388)
            info_594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 12), 'info', False)
            # Calling info(args, kwargs) (line 388)
            info_call_result_597 = invoke(stypy.reporting.localization.Localization(__file__, 388, 12), info_594, *[str_595], **kwargs_596)
            
            # SSA join for if statement (line 387)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # Assigning a Call to a Name (line 389):
        
        # Call to get_type_inference_program_ast(...): (line 389)
        # Processing the call keyword arguments (line 389)
        kwargs_600 = {}
        # Getting the type of 'self' (line 389)
        self_598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 17), 'self', False)
        # Obtaining the member 'get_type_inference_program_ast' of a type (line 389)
        get_type_inference_program_ast_599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 17), self_598, 'get_type_inference_program_ast')
        # Calling get_type_inference_program_ast(args, kwargs) (line 389)
        get_type_inference_program_ast_call_result_601 = invoke(stypy.reporting.localization.Localization(__file__, 389, 17), get_type_inference_program_ast_599, *[], **kwargs_600)
        
        # Assigning a type to the variable 'ti_ast' (line 389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'ti_ast', get_type_inference_program_ast_call_result_601)
        # Getting the type of 'self' (line 391)
        self_602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 11), 'self')
        # Obtaining the member 'show_ast' of a type (line 391)
        show_ast_603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 11), self_602, 'show_ast')
        # Testing if the type of an if condition is none (line 391)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 391, 8), show_ast_603):
            pass
        else:
            
            # Testing the type of an if condition (line 391)
            if_condition_604 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 391, 8), show_ast_603)
            # Assigning a type to the variable 'if_condition_604' (line 391)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 8), 'if_condition_604', if_condition_604)
            # SSA begins for if statement (line 391)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to info(...): (line 392)
            # Processing the call arguments (line 392)
            
            # Call to dump_ast(...): (line 392)
            # Processing the call arguments (line 392)
            # Getting the type of 'ti_ast' (line 392)
            ti_ast_607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 26), 'ti_ast', False)
            # Processing the call keyword arguments (line 392)
            kwargs_608 = {}
            # Getting the type of 'dump_ast' (line 392)
            dump_ast_606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 17), 'dump_ast', False)
            # Calling dump_ast(args, kwargs) (line 392)
            dump_ast_call_result_609 = invoke(stypy.reporting.localization.Localization(__file__, 392, 17), dump_ast_606, *[ti_ast_607], **kwargs_608)
            
            # Processing the call keyword arguments (line 392)
            kwargs_610 = {}
            # Getting the type of 'info' (line 392)
            info_605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 12), 'info', False)
            # Calling info(args, kwargs) (line 392)
            info_call_result_611 = invoke(stypy.reporting.localization.Localization(__file__, 392, 12), info_605, *[dump_ast_call_result_609], **kwargs_610)
            
            # SSA join for if statement (line 391)
            module_type_store = module_type_store.join_ssa_context()
            

        # Getting the type of 'self' (line 394)
        self_612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 11), 'self')
        # Obtaining the member 'verbose' of a type (line 394)
        verbose_613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 11), self_612, 'verbose')
        # Testing if the type of an if condition is none (line 394)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 394, 8), verbose_613):
            pass
        else:
            
            # Testing the type of an if condition (line 394)
            if_condition_614 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 394, 8), verbose_613)
            # Assigning a type to the variable 'if_condition_614' (line 394)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 394, 8), 'if_condition_614', if_condition_614)
            # SSA begins for if statement (line 394)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to info(...): (line 395)
            # Processing the call arguments (line 395)
            str_616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 395, 17), 'str', '\n\n')
            # Processing the call keyword arguments (line 395)
            kwargs_617 = {}
            # Getting the type of 'info' (line 395)
            info_615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 12), 'info', False)
            # Calling info(args, kwargs) (line 395)
            info_call_result_618 = invoke(stypy.reporting.localization.Localization(__file__, 395, 12), info_615, *[str_616], **kwargs_617)
            
            
            # Call to info(...): (line 396)
            # Processing the call arguments (line 396)
            str_620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 396, 17), 'str', '\nSTyPy: Type inference program source code:\n')
            # Processing the call keyword arguments (line 396)
            kwargs_621 = {}
            # Getting the type of 'info' (line 396)
            info_619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 12), 'info', False)
            # Calling info(args, kwargs) (line 396)
            info_call_result_622 = invoke(stypy.reporting.localization.Localization(__file__, 396, 12), info_619, *[str_620], **kwargs_621)
            
            # SSA join for if statement (line 394)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # Assigning a Call to a Name (line 398):
        
        # Call to get_type_inference_program_source_code(...): (line 398)
        # Processing the call keyword arguments (line 398)
        kwargs_625 = {}
        # Getting the type of 'self' (line 398)
        self_623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 22), 'self', False)
        # Obtaining the member 'get_type_inference_program_source_code' of a type (line 398)
        get_type_inference_program_source_code_624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 398, 22), self_623, 'get_type_inference_program_source_code')
        # Calling get_type_inference_program_source_code(args, kwargs) (line 398)
        get_type_inference_program_source_code_call_result_626 = invoke(stypy.reporting.localization.Localization(__file__, 398, 22), get_type_inference_program_source_code_624, *[], **kwargs_625)
        
        # Assigning a type to the variable 'tinf_source' (line 398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 398, 8), 'tinf_source', get_type_inference_program_source_code_call_result_626)
        
        # Call to info(...): (line 399)
        # Processing the call arguments (line 399)
        # Getting the type of 'tinf_source' (line 399)
        tinf_source_628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 13), 'tinf_source', False)
        # Processing the call keyword arguments (line 399)
        kwargs_629 = {}
        # Getting the type of 'info' (line 399)
        info_627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 8), 'info', False)
        # Calling info(args, kwargs) (line 399)
        info_call_result_630 = invoke(stypy.reporting.localization.Localization(__file__, 399, 8), info_627, *[tinf_source_628], **kwargs_629)
        
        
        # Call to write_python_source_code(...): (line 401)
        # Processing the call arguments (line 401)
        
        # Call to get_stypy_type_inference_program_file_path(...): (line 401)
        # Processing the call arguments (line 401)
        # Getting the type of 'self' (line 401)
        self_633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 76), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 401)
        source_file_path_634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 401, 76), self_633, 'source_file_path')
        # Processing the call keyword arguments (line 401)
        kwargs_635 = {}
        # Getting the type of 'get_stypy_type_inference_program_file_path' (line 401)
        get_stypy_type_inference_program_file_path_632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 33), 'get_stypy_type_inference_program_file_path', False)
        # Calling get_stypy_type_inference_program_file_path(args, kwargs) (line 401)
        get_stypy_type_inference_program_file_path_call_result_636 = invoke(stypy.reporting.localization.Localization(__file__, 401, 33), get_stypy_type_inference_program_file_path_632, *[source_file_path_634], **kwargs_635)
        
        # Getting the type of 'tinf_source' (line 401)
        tinf_source_637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 100), 'tinf_source', False)
        # Processing the call keyword arguments (line 401)
        kwargs_638 = {}
        # Getting the type of 'write_python_source_code' (line 401)
        write_python_source_code_631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 8), 'write_python_source_code', False)
        # Calling write_python_source_code(args, kwargs) (line 401)
        write_python_source_code_call_result_639 = invoke(stypy.reporting.localization.Localization(__file__, 401, 8), write_python_source_code_631, *[get_stypy_type_inference_program_file_path_call_result_636, tinf_source_637], **kwargs_638)
        
        
        # ################# End of 'create_type_inference_program(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'create_type_inference_program' in the type store
        # Getting the type of 'stypy_return_type' (line 375)
        stypy_return_type_640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_640)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'create_type_inference_program'
        return stypy_return_type_640


    @norecursion
    def __run_type_inference(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__run_type_inference'
        module_type_store = module_type_store.open_function_context('__run_type_inference', 405, 4, False)
        # Assigning a type to the variable 'self' (line 406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 406, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.__run_type_inference.__dict__.__setitem__('stypy_localization', localization)
        Stypy.__run_type_inference.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.__run_type_inference.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.__run_type_inference.__dict__.__setitem__('stypy_function_name', 'Stypy.__run_type_inference')
        Stypy.__run_type_inference.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.__run_type_inference.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.__run_type_inference.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.__run_type_inference.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.__run_type_inference.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.__run_type_inference.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.__run_type_inference.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.__run_type_inference', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__run_type_inference', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__run_type_inference(...)' code ##################

        str_641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 411, (-1)), 'str', '\n        Runs the type inference program of the source represented by this Stypy object, generating a type data file\n        (if it does not exist) in order to test the type inference results against these data, provided this option\n        is enabled. Finally, it generates the equivalent type annotated program, if this option is enabled.\n        :return:\n        ')
        # Getting the type of 'self' (line 412)
        self_642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 11), 'self')
        # Obtaining the member 'verbose' of a type (line 412)
        verbose_643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 412, 11), self_642, 'verbose')
        # Testing if the type of an if condition is none (line 412)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 412, 8), verbose_643):
            pass
        else:
            
            # Testing the type of an if condition (line 412)
            if_condition_644 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 412, 8), verbose_643)
            # Assigning a type to the variable 'if_condition_644' (line 412)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 8), 'if_condition_644', if_condition_644)
            # SSA begins for if statement (line 412)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to info(...): (line 413)
            # Processing the call arguments (line 413)
            str_646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 413, 17), 'str', '\nSTyPy: Running type inference program...\n')
            # Processing the call keyword arguments (line 413)
            kwargs_647 = {}
            # Getting the type of 'info' (line 413)
            info_645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 12), 'info', False)
            # Calling info(args, kwargs) (line 413)
            info_call_result_648 = invoke(stypy.reporting.localization.Localization(__file__, 413, 12), info_645, *[str_646], **kwargs_647)
            
            # SSA join for if statement (line 412)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # Call to __run_type_inference_program(...): (line 428)
        # Processing the call arguments (line 428)
        
        # Call to get_stypy_type_inference_program_file_path(...): (line 428)
        # Processing the call arguments (line 428)
        # Getting the type of 'self' (line 428)
        self_652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 85), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 428)
        source_file_path_653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 85), self_652, 'source_file_path')
        # Processing the call keyword arguments (line 428)
        kwargs_654 = {}
        # Getting the type of 'get_stypy_type_inference_program_file_path' (line 428)
        get_stypy_type_inference_program_file_path_651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 42), 'get_stypy_type_inference_program_file_path', False)
        # Calling get_stypy_type_inference_program_file_path(args, kwargs) (line 428)
        get_stypy_type_inference_program_file_path_call_result_655 = invoke(stypy.reporting.localization.Localization(__file__, 428, 42), get_stypy_type_inference_program_file_path_651, *[source_file_path_653], **kwargs_654)
        
        # Processing the call keyword arguments (line 428)
        kwargs_656 = {}
        # Getting the type of 'self' (line 428)
        self_649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 8), 'self', False)
        # Obtaining the member '__run_type_inference_program' of a type (line 428)
        run_type_inference_program_650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 8), self_649, '__run_type_inference_program')
        # Calling __run_type_inference_program(args, kwargs) (line 428)
        run_type_inference_program_call_result_657 = invoke(stypy.reporting.localization.Localization(__file__, 428, 8), run_type_inference_program_650, *[get_stypy_type_inference_program_file_path_call_result_655], **kwargs_656)
        
        # Getting the type of 'self' (line 431)
        self_658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 11), 'self')
        # Obtaining the member 'generate_type_annotated_program' of a type (line 431)
        generate_type_annotated_program_659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 431, 11), self_658, 'generate_type_annotated_program')
        # Testing if the type of an if condition is none (line 431)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 431, 8), generate_type_annotated_program_659):
            pass
        else:
            
            # Testing the type of an if condition (line 431)
            if_condition_660 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 431, 8), generate_type_annotated_program_659)
            # Assigning a type to the variable 'if_condition_660' (line 431)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 431, 8), 'if_condition_660', if_condition_660)
            # SSA begins for if statement (line 431)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to create_type_annotated_program(...): (line 432)
            # Processing the call keyword arguments (line 432)
            kwargs_663 = {}
            # Getting the type of 'self' (line 432)
            self_661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 12), 'self', False)
            # Obtaining the member 'create_type_annotated_program' of a type (line 432)
            create_type_annotated_program_662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 432, 12), self_661, 'create_type_annotated_program')
            # Calling create_type_annotated_program(args, kwargs) (line 432)
            create_type_annotated_program_call_result_664 = invoke(stypy.reporting.localization.Localization(__file__, 432, 12), create_type_annotated_program_662, *[], **kwargs_663)
            
            # SSA join for if statement (line 431)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # ################# End of '__run_type_inference(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__run_type_inference' in the type store
        # Getting the type of 'stypy_return_type' (line 405)
        stypy_return_type_665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_665)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__run_type_inference'
        return stypy_return_type_665


    @norecursion
    def create_type_annotated_program(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'create_type_annotated_program'
        module_type_store = module_type_store.open_function_context('create_type_annotated_program', 434, 4, False)
        # Assigning a type to the variable 'self' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.create_type_annotated_program.__dict__.__setitem__('stypy_localization', localization)
        Stypy.create_type_annotated_program.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.create_type_annotated_program.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.create_type_annotated_program.__dict__.__setitem__('stypy_function_name', 'Stypy.create_type_annotated_program')
        Stypy.create_type_annotated_program.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.create_type_annotated_program.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.create_type_annotated_program.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.create_type_annotated_program.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.create_type_annotated_program.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.create_type_annotated_program.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.create_type_annotated_program.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.create_type_annotated_program', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'create_type_annotated_program', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'create_type_annotated_program(...)' code ##################

        str_666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 438, (-1)), 'str', '\n        Creates a type-annotated version of the analyzed Python program.\n        :return:\n        ')
        
        # Assigning a Call to a Name (line 439):
        
        # Call to get_analyzed_program_type_store(...): (line 439)
        # Processing the call keyword arguments (line 439)
        kwargs_669 = {}
        # Getting the type of 'self' (line 439)
        self_667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 24), 'self', False)
        # Obtaining the member 'get_analyzed_program_type_store' of a type (line 439)
        get_analyzed_program_type_store_668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 439, 24), self_667, 'get_analyzed_program_type_store')
        # Calling get_analyzed_program_type_store(args, kwargs) (line 439)
        get_analyzed_program_type_store_call_result_670 = invoke(stypy.reporting.localization.Localization(__file__, 439, 24), get_analyzed_program_type_store_668, *[], **kwargs_669)
        
        # Assigning a type to the variable 'my_type_store' (line 439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 439, 8), 'my_type_store', get_analyzed_program_type_store_call_result_670)
        
        # Assigning a Call to a Name (line 442):
        
        # Call to TypeAnnotationVisitor(...): (line 442)
        # Processing the call arguments (line 442)
        # Getting the type of 'self' (line 442)
        self_672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 50), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 442)
        source_file_path_673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 442, 50), self_672, 'source_file_path')
        # Getting the type of 'my_type_store' (line 442)
        my_type_store_674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 73), 'my_type_store', False)
        # Processing the call keyword arguments (line 442)
        kwargs_675 = {}
        # Getting the type of 'TypeAnnotationVisitor' (line 442)
        TypeAnnotationVisitor_671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 28), 'TypeAnnotationVisitor', False)
        # Calling TypeAnnotationVisitor(args, kwargs) (line 442)
        TypeAnnotationVisitor_call_result_676 = invoke(stypy.reporting.localization.Localization(__file__, 442, 28), TypeAnnotationVisitor_671, *[source_file_path_673, my_type_store_674], **kwargs_675)
        
        # Assigning a type to the variable 'annotator_visitor' (line 442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 442, 8), 'annotator_visitor', TypeAnnotationVisitor_call_result_676)
        
        # Assigning a Call to a Name (line 444):
        
        # Call to visit(...): (line 444)
        # Processing the call arguments (line 444)
        
        # Call to __read_new_ast_from_file(...): (line 444)
        # Processing the call keyword arguments (line 444)
        kwargs_681 = {}
        # Getting the type of 'self' (line 444)
        self_679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 49), 'self', False)
        # Obtaining the member '__read_new_ast_from_file' of a type (line 444)
        read_new_ast_from_file_680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 49), self_679, '__read_new_ast_from_file')
        # Calling __read_new_ast_from_file(args, kwargs) (line 444)
        read_new_ast_from_file_call_result_682 = invoke(stypy.reporting.localization.Localization(__file__, 444, 49), read_new_ast_from_file_680, *[], **kwargs_681)
        
        # Processing the call keyword arguments (line 444)
        kwargs_683 = {}
        # Getting the type of 'annotator_visitor' (line 444)
        annotator_visitor_677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 25), 'annotator_visitor', False)
        # Obtaining the member 'visit' of a type (line 444)
        visit_678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 25), annotator_visitor_677, 'visit')
        # Calling visit(args, kwargs) (line 444)
        visit_call_result_684 = invoke(stypy.reporting.localization.Localization(__file__, 444, 25), visit_678, *[read_new_ast_from_file_call_result_682], **kwargs_683)
        
        # Assigning a type to the variable 'annotated_tree' (line 444)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 444, 8), 'annotated_tree', visit_call_result_684)
        # Getting the type of 'self' (line 445)
        self_685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 11), 'self')
        # Obtaining the member 'show_ast' of a type (line 445)
        show_ast_686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 11), self_685, 'show_ast')
        # Testing if the type of an if condition is none (line 445)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 445, 8), show_ast_686):
            pass
        else:
            
            # Testing the type of an if condition (line 445)
            if_condition_687 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 445, 8), show_ast_686)
            # Assigning a type to the variable 'if_condition_687' (line 445)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 445, 8), 'if_condition_687', if_condition_687)
            # SSA begins for if statement (line 445)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to info(...): (line 446)
            # Processing the call arguments (line 446)
            str_689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 446, 17), 'str', 'Type annotated program AST: ')
            # Processing the call keyword arguments (line 446)
            kwargs_690 = {}
            # Getting the type of 'info' (line 446)
            info_688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 12), 'info', False)
            # Calling info(args, kwargs) (line 446)
            info_call_result_691 = invoke(stypy.reporting.localization.Localization(__file__, 446, 12), info_688, *[str_689], **kwargs_690)
            
            
            # Call to info(...): (line 447)
            # Processing the call arguments (line 447)
            
            # Call to dump_ast(...): (line 447)
            # Processing the call arguments (line 447)
            # Getting the type of 'annotated_tree' (line 447)
            annotated_tree_694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 26), 'annotated_tree', False)
            # Processing the call keyword arguments (line 447)
            kwargs_695 = {}
            # Getting the type of 'dump_ast' (line 447)
            dump_ast_693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 17), 'dump_ast', False)
            # Calling dump_ast(args, kwargs) (line 447)
            dump_ast_call_result_696 = invoke(stypy.reporting.localization.Localization(__file__, 447, 17), dump_ast_693, *[annotated_tree_694], **kwargs_695)
            
            # Processing the call keyword arguments (line 447)
            kwargs_697 = {}
            # Getting the type of 'info' (line 447)
            info_692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 12), 'info', False)
            # Calling info(args, kwargs) (line 447)
            info_call_result_698 = invoke(stypy.reporting.localization.Localization(__file__, 447, 12), info_692, *[dump_ast_call_result_696], **kwargs_697)
            
            # SSA join for if statement (line 445)
            module_type_store = module_type_store.join_ssa_context()
            

        
        
        # SSA begins for try-except statement (line 449)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to fix_missing_locations(...): (line 450)
        # Processing the call arguments (line 450)
        # Getting the type of 'annotated_tree' (line 450)
        annotated_tree_701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 38), 'annotated_tree', False)
        # Processing the call keyword arguments (line 450)
        kwargs_702 = {}
        # Getting the type of 'ast' (line 450)
        ast_699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 12), 'ast', False)
        # Obtaining the member 'fix_missing_locations' of a type (line 450)
        fix_missing_locations_700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 450, 12), ast_699, 'fix_missing_locations')
        # Calling fix_missing_locations(args, kwargs) (line 450)
        fix_missing_locations_call_result_703 = invoke(stypy.reporting.localization.Localization(__file__, 450, 12), fix_missing_locations_700, *[annotated_tree_701], **kwargs_702)
        
        # SSA branch for the except part of a try statement (line 449)
        # SSA branch for the except '<any exception>' branch of a try statement (line 449)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 449)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 454):
        
        # Call to generate_code(...): (line 454)
        # Processing the call keyword arguments (line 454)
        kwargs_709 = {}
        
        # Call to PythonSrcGeneratorVisitor(...): (line 454)
        # Processing the call arguments (line 454)
        # Getting the type of 'annotated_tree' (line 454)
        annotated_tree_705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 63), 'annotated_tree', False)
        # Processing the call keyword arguments (line 454)
        kwargs_706 = {}
        # Getting the type of 'PythonSrcGeneratorVisitor' (line 454)
        PythonSrcGeneratorVisitor_704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 37), 'PythonSrcGeneratorVisitor', False)
        # Calling PythonSrcGeneratorVisitor(args, kwargs) (line 454)
        PythonSrcGeneratorVisitor_call_result_707 = invoke(stypy.reporting.localization.Localization(__file__, 454, 37), PythonSrcGeneratorVisitor_704, *[annotated_tree_705], **kwargs_706)
        
        # Obtaining the member 'generate_code' of a type (line 454)
        generate_code_708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 454, 37), PythonSrcGeneratorVisitor_call_result_707, 'generate_code')
        # Calling generate_code(args, kwargs) (line 454)
        generate_code_call_result_710 = invoke(stypy.reporting.localization.Localization(__file__, 454, 37), generate_code_708, *[], **kwargs_709)
        
        # Assigning a type to the variable 'annotated_type_source_code' (line 454)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 454, 8), 'annotated_type_source_code', generate_code_call_result_710)
        
        # Call to write_python_source_code(...): (line 455)
        # Processing the call arguments (line 455)
        
        # Call to get_stypy_type_annotation_file_path(...): (line 455)
        # Processing the call arguments (line 455)
        # Getting the type of 'self' (line 455)
        self_713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 69), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 455)
        source_file_path_714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 455, 69), self_713, 'source_file_path')
        # Processing the call keyword arguments (line 455)
        kwargs_715 = {}
        # Getting the type of 'get_stypy_type_annotation_file_path' (line 455)
        get_stypy_type_annotation_file_path_712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 33), 'get_stypy_type_annotation_file_path', False)
        # Calling get_stypy_type_annotation_file_path(args, kwargs) (line 455)
        get_stypy_type_annotation_file_path_call_result_716 = invoke(stypy.reporting.localization.Localization(__file__, 455, 33), get_stypy_type_annotation_file_path_712, *[source_file_path_714], **kwargs_715)
        
        # Getting the type of 'annotated_type_source_code' (line 456)
        annotated_type_source_code_717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 33), 'annotated_type_source_code', False)
        # Processing the call keyword arguments (line 455)
        kwargs_718 = {}
        # Getting the type of 'write_python_source_code' (line 455)
        write_python_source_code_711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 8), 'write_python_source_code', False)
        # Calling write_python_source_code(args, kwargs) (line 455)
        write_python_source_code_call_result_719 = invoke(stypy.reporting.localization.Localization(__file__, 455, 8), write_python_source_code_711, *[get_stypy_type_annotation_file_path_call_result_716, annotated_type_source_code_717], **kwargs_718)
        
        
        # Getting the type of 'my_type_store' (line 459)
        my_type_store_720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 28), 'my_type_store')
        # Obtaining the member 'external_modules' of a type (line 459)
        external_modules_721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 459, 28), my_type_store_720, 'external_modules')
        # Assigning a type to the variable 'external_modules_721' (line 459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 459, 8), 'external_modules_721', external_modules_721)
        # Testing if the for loop is going to be iterated (line 459)
        # Testing the type of a for loop iterable (line 459)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 459, 8), external_modules_721)

        if will_iterate_loop(stypy.reporting.localization.Localization(__file__, 459, 8), external_modules_721):
            # Getting the type of the for loop variable (line 459)
            for_loop_var_722 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 459, 8), external_modules_721)
            # Assigning a type to the variable 'stypy_object' (line 459)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 459, 8), 'stypy_object', for_loop_var_722)
            # SSA begins for a for statement (line 459)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Call to create_type_annotated_program(...): (line 460)
            # Processing the call keyword arguments (line 460)
            kwargs_725 = {}
            # Getting the type of 'stypy_object' (line 460)
            stypy_object_723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 12), 'stypy_object', False)
            # Obtaining the member 'create_type_annotated_program' of a type (line 460)
            create_type_annotated_program_724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 12), stypy_object_723, 'create_type_annotated_program')
            # Calling create_type_annotated_program(args, kwargs) (line 460)
            create_type_annotated_program_call_result_726 = invoke(stypy.reporting.localization.Localization(__file__, 460, 12), create_type_annotated_program_724, *[], **kwargs_725)
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()

        
        
        # ################# End of 'create_type_annotated_program(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'create_type_annotated_program' in the type store
        # Getting the type of 'stypy_return_type' (line 434)
        stypy_return_type_727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_727)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'create_type_annotated_program'
        return stypy_return_type_727


    @norecursion
    def analyze(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'analyze'
        module_type_store = module_type_store.open_function_context('analyze', 462, 4, False)
        # Assigning a type to the variable 'self' (line 463)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 463, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.analyze.__dict__.__setitem__('stypy_localization', localization)
        Stypy.analyze.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.analyze.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.analyze.__dict__.__setitem__('stypy_function_name', 'Stypy.analyze')
        Stypy.analyze.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.analyze.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.analyze.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.analyze.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.analyze.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.analyze.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.analyze.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.analyze', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'analyze', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'analyze(...)' code ##################

        str_728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 465, (-1)), 'str', '\n        Main stypy function. Performs all the step to analyze the source file types in order\n        ')
        # Getting the type of 'self' (line 466)
        self_729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 11), 'self')
        # Obtaining the member 'verbose' of a type (line 466)
        verbose_730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 11), self_729, 'verbose')
        # Testing if the type of an if condition is none (line 466)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 466, 8), verbose_730):
            pass
        else:
            
            # Testing the type of an if condition (line 466)
            if_condition_731 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 466, 8), verbose_730)
            # Assigning a type to the variable 'if_condition_731' (line 466)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 466, 8), 'if_condition_731', if_condition_731)
            # SSA begins for if statement (line 466)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to info(...): (line 467)
            # Processing the call arguments (line 467)
            str_733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 467, 17), 'str', "Parsing file '")
            # Getting the type of 'self' (line 467)
            self_734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 36), 'self', False)
            # Obtaining the member 'source_file_path' of a type (line 467)
            source_file_path_735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 467, 36), self_734, 'source_file_path')
            # Applying the binary operator '+' (line 467)
            result_add_736 = python_operator(stypy.reporting.localization.Localization(__file__, 467, 17), '+', str_733, source_file_path_735)
            
            str_737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 467, 60), 'str', "'\n")
            # Applying the binary operator '+' (line 467)
            result_add_738 = python_operator(stypy.reporting.localization.Localization(__file__, 467, 58), '+', result_add_736, str_737)
            
            # Processing the call keyword arguments (line 467)
            kwargs_739 = {}
            # Getting the type of 'info' (line 467)
            info_732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 12), 'info', False)
            # Calling info(args, kwargs) (line 467)
            info_call_result_740 = invoke(stypy.reporting.localization.Localization(__file__, 467, 12), info_732, *[result_add_738], **kwargs_739)
            
            # SSA join for if statement (line 466)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # Assigning a Call to a Name (line 469):
        
        # Call to get_type_store_of_module(...): (line 469)
        # Processing the call arguments (line 469)
        # Getting the type of 'self' (line 469)
        self_743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 57), 'self', False)
        # Obtaining the member 'source_file_path' of a type (line 469)
        source_file_path_744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 469, 57), self_743, 'source_file_path')
        # Processing the call keyword arguments (line 469)
        kwargs_745 = {}
        # Getting the type of 'TypeStore' (line 469)
        TypeStore_741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 22), 'TypeStore', False)
        # Obtaining the member 'get_type_store_of_module' of a type (line 469)
        get_type_store_of_module_742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 469, 22), TypeStore_741, 'get_type_store_of_module')
        # Calling get_type_store_of_module(args, kwargs) (line 469)
        get_type_store_of_module_call_result_746 = invoke(stypy.reporting.localization.Localization(__file__, 469, 22), get_type_store_of_module_742, *[source_file_path_744], **kwargs_745)
        
        # Assigning a type to the variable 'existing_ts' (line 469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 469, 8), 'existing_ts', get_type_store_of_module_call_result_746)
        
        # Type idiom detected: calculating its left and rigth part (line 470)
        # Getting the type of 'existing_ts' (line 470)
        existing_ts_747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 8), 'existing_ts')
        # Getting the type of 'None' (line 470)
        None_748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 30), 'None')
        
        (may_be_749, more_types_in_union_750) = may_not_be_none(existing_ts_747, None_748)

        if may_be_749:

            if more_types_in_union_750:
                # Runtime conditional SSA (line 470)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 471):
            # Getting the type of 'existing_ts' (line 471)
            existing_ts_751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 47), 'existing_ts')
            # Getting the type of 'self' (line 471)
            self_752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 12), 'self')
            # Setting the type of the member 'analyzed_program_type_store' of a type (line 471)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 471, 12), self_752, 'analyzed_program_type_store', existing_ts_751)
            # Getting the type of 'existing_ts' (line 472)
            existing_ts_753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 19), 'existing_ts')
            # Assigning a type to the variable 'stypy_return_type' (line 472)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 472, 12), 'stypy_return_type', existing_ts_753)

            if more_types_in_union_750:
                # SSA join for if statement (line 470)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to get_original_source_file_ast(...): (line 475)
        # Processing the call keyword arguments (line 475)
        kwargs_756 = {}
        # Getting the type of 'self' (line 475)
        self_754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'self', False)
        # Obtaining the member 'get_original_source_file_ast' of a type (line 475)
        get_original_source_file_ast_755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 8), self_754, 'get_original_source_file_ast')
        # Calling get_original_source_file_ast(args, kwargs) (line 475)
        get_original_source_file_ast_call_result_757 = invoke(stypy.reporting.localization.Localization(__file__, 475, 8), get_original_source_file_ast_755, *[], **kwargs_756)
        
        # Getting the type of 'self' (line 478)
        self_758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 11), 'self')
        # Obtaining the member 'generate_type_data_file' of a type (line 478)
        generate_type_data_file_759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 478, 11), self_758, 'generate_type_data_file')
        # Testing if the type of an if condition is none (line 478)

        if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 478, 8), generate_type_data_file_759):
            pass
        else:
            
            # Testing the type of an if condition (line 478)
            if_condition_760 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 478, 8), generate_type_data_file_759)
            # Assigning a type to the variable 'if_condition_760' (line 478)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 8), 'if_condition_760', if_condition_760)
            # SSA begins for if statement (line 478)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to __is_file_suitable_for_autocalculate_types(...): (line 479)
            # Processing the call arguments (line 479)
            # Getting the type of 'self' (line 479)
            self_763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 64), 'self', False)
            # Obtaining the member 'source_file_path' of a type (line 479)
            source_file_path_764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 479, 64), self_763, 'source_file_path')
            # Processing the call keyword arguments (line 479)
            kwargs_765 = {}
            # Getting the type of 'Stypy' (line 479)
            Stypy_761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 15), 'Stypy', False)
            # Obtaining the member '__is_file_suitable_for_autocalculate_types' of a type (line 479)
            is_file_suitable_for_autocalculate_types_762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 479, 15), Stypy_761, '__is_file_suitable_for_autocalculate_types')
            # Calling __is_file_suitable_for_autocalculate_types(args, kwargs) (line 479)
            is_file_suitable_for_autocalculate_types_call_result_766 = invoke(stypy.reporting.localization.Localization(__file__, 479, 15), is_file_suitable_for_autocalculate_types_762, *[source_file_path_764], **kwargs_765)
            
            # Testing if the type of an if condition is none (line 479)

            if evaluates_to_none(stypy.reporting.localization.Localization(__file__, 479, 12), is_file_suitable_for_autocalculate_types_call_result_766):
                pass
            else:
                
                # Testing the type of an if condition (line 479)
                if_condition_767 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 479, 12), is_file_suitable_for_autocalculate_types_call_result_766)
                # Assigning a type to the variable 'if_condition_767' (line 479)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 479, 12), 'if_condition_767', if_condition_767)
                # SSA begins for if statement (line 479)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Call to create_automatic_type_data_autogenerator_program(...): (line 480)
                # Processing the call keyword arguments (line 480)
                kwargs_770 = {}
                # Getting the type of 'self' (line 480)
                self_768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 16), 'self', False)
                # Obtaining the member 'create_automatic_type_data_autogenerator_program' of a type (line 480)
                create_automatic_type_data_autogenerator_program_769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 16), self_768, 'create_automatic_type_data_autogenerator_program')
                # Calling create_automatic_type_data_autogenerator_program(args, kwargs) (line 480)
                create_automatic_type_data_autogenerator_program_call_result_771 = invoke(stypy.reporting.localization.Localization(__file__, 480, 16), create_automatic_type_data_autogenerator_program_769, *[], **kwargs_770)
                
                # SSA join for if statement (line 479)
                module_type_store = module_type_store.join_ssa_context()
                

            # SSA join for if statement (line 478)
            module_type_store = module_type_store.join_ssa_context()
            

        
        # Call to create_type_inference_program(...): (line 483)
        # Processing the call keyword arguments (line 483)
        kwargs_774 = {}
        # Getting the type of 'self' (line 483)
        self_772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 8), 'self', False)
        # Obtaining the member 'create_type_inference_program' of a type (line 483)
        create_type_inference_program_773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 8), self_772, 'create_type_inference_program')
        # Calling create_type_inference_program(args, kwargs) (line 483)
        create_type_inference_program_call_result_775 = invoke(stypy.reporting.localization.Localization(__file__, 483, 8), create_type_inference_program_773, *[], **kwargs_774)
        
        
        # Call to __run_type_inference(...): (line 485)
        # Processing the call keyword arguments (line 485)
        kwargs_778 = {}
        # Getting the type of 'self' (line 485)
        self_776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 15), 'self', False)
        # Obtaining the member '__run_type_inference' of a type (line 485)
        run_type_inference_777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 15), self_776, '__run_type_inference')
        # Calling __run_type_inference(args, kwargs) (line 485)
        run_type_inference_call_result_779 = invoke(stypy.reporting.localization.Localization(__file__, 485, 15), run_type_inference_777, *[], **kwargs_778)
        
        # Assigning a type to the variable 'stypy_return_type' (line 485)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 485, 8), 'stypy_return_type', run_type_inference_call_result_779)
        
        # ################# End of 'analyze(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'analyze' in the type store
        # Getting the type of 'stypy_return_type' (line 462)
        stypy_return_type_780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_780)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'analyze'
        return stypy_return_type_780


    @norecursion
    def get_analyzed_program_type_store(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_analyzed_program_type_store'
        module_type_store = module_type_store.open_function_context('get_analyzed_program_type_store', 489, 4, False)
        # Assigning a type to the variable 'self' (line 490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 490, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.get_analyzed_program_type_store.__dict__.__setitem__('stypy_localization', localization)
        Stypy.get_analyzed_program_type_store.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.get_analyzed_program_type_store.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.get_analyzed_program_type_store.__dict__.__setitem__('stypy_function_name', 'Stypy.get_analyzed_program_type_store')
        Stypy.get_analyzed_program_type_store.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.get_analyzed_program_type_store.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.get_analyzed_program_type_store.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.get_analyzed_program_type_store.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.get_analyzed_program_type_store.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.get_analyzed_program_type_store.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.get_analyzed_program_type_store.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.get_analyzed_program_type_store', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_analyzed_program_type_store', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_analyzed_program_type_store(...)' code ##################

        str_781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 493, (-1)), 'str', '\n        Get the type store of the analyzed Python source file\n        :return:\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 494)
        # Getting the type of 'self' (line 494)
        self_782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 11), 'self')
        # Obtaining the member 'analyzed_program_type_store' of a type (line 494)
        analyzed_program_type_store_783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 11), self_782, 'analyzed_program_type_store')
        # Getting the type of 'None' (line 494)
        None_784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 47), 'None')
        
        (may_be_785, more_types_in_union_786) = may_be_none(analyzed_program_type_store_783, None_784)

        if may_be_785:

            if more_types_in_union_786:
                # Runtime conditional SSA (line 494)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to analyze(...): (line 495)
            # Processing the call keyword arguments (line 495)
            kwargs_789 = {}
            # Getting the type of 'self' (line 495)
            self_787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 12), 'self', False)
            # Obtaining the member 'analyze' of a type (line 495)
            analyze_788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 495, 12), self_787, 'analyze')
            # Calling analyze(args, kwargs) (line 495)
            analyze_call_result_790 = invoke(stypy.reporting.localization.Localization(__file__, 495, 12), analyze_788, *[], **kwargs_789)
            

            if more_types_in_union_786:
                # SSA join for if statement (line 494)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 497)
        self_791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 15), 'self')
        # Obtaining the member 'analyzed_program_type_store' of a type (line 497)
        analyzed_program_type_store_792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 15), self_791, 'analyzed_program_type_store')
        # Assigning a type to the variable 'stypy_return_type' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 8), 'stypy_return_type', analyzed_program_type_store_792)
        
        # ################# End of 'get_analyzed_program_type_store(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_analyzed_program_type_store' in the type store
        # Getting the type of 'stypy_return_type' (line 489)
        stypy_return_type_793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_793)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_analyzed_program_type_store'
        return stypy_return_type_793


    @norecursion
    def get_analyzed_program_errors(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_analyzed_program_errors'
        module_type_store = module_type_store.open_function_context('get_analyzed_program_errors', 499, 4, False)
        # Assigning a type to the variable 'self' (line 500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.get_analyzed_program_errors.__dict__.__setitem__('stypy_localization', localization)
        Stypy.get_analyzed_program_errors.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.get_analyzed_program_errors.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.get_analyzed_program_errors.__dict__.__setitem__('stypy_function_name', 'Stypy.get_analyzed_program_errors')
        Stypy.get_analyzed_program_errors.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.get_analyzed_program_errors.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.get_analyzed_program_errors.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.get_analyzed_program_errors.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.get_analyzed_program_errors.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.get_analyzed_program_errors.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.get_analyzed_program_errors.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.get_analyzed_program_errors', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_analyzed_program_errors', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_analyzed_program_errors(...)' code ##################

        str_794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 503, (-1)), 'str', '\n        Get the type errors of the analyzed Python source file\n        :return:\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 504)
        # Getting the type of 'self' (line 504)
        self_795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 11), 'self')
        # Obtaining the member 'analyzed_program_errors' of a type (line 504)
        analyzed_program_errors_796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 504, 11), self_795, 'analyzed_program_errors')
        # Getting the type of 'None' (line 504)
        None_797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 43), 'None')
        
        (may_be_798, more_types_in_union_799) = may_be_none(analyzed_program_errors_796, None_797)

        if may_be_798:

            if more_types_in_union_799:
                # Runtime conditional SSA (line 504)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to analyze(...): (line 505)
            # Processing the call keyword arguments (line 505)
            kwargs_802 = {}
            # Getting the type of 'self' (line 505)
            self_800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 12), 'self', False)
            # Obtaining the member 'analyze' of a type (line 505)
            analyze_801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 505, 12), self_800, 'analyze')
            # Calling analyze(args, kwargs) (line 505)
            analyze_call_result_803 = invoke(stypy.reporting.localization.Localization(__file__, 505, 12), analyze_801, *[], **kwargs_802)
            

            if more_types_in_union_799:
                # SSA join for if statement (line 504)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 507)
        self_804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 15), 'self')
        # Obtaining the member 'analyzed_program_errors' of a type (line 507)
        analyzed_program_errors_805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 507, 15), self_804, 'analyzed_program_errors')
        # Assigning a type to the variable 'stypy_return_type' (line 507)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 507, 8), 'stypy_return_type', analyzed_program_errors_805)
        
        # ################# End of 'get_analyzed_program_errors(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_analyzed_program_errors' in the type store
        # Getting the type of 'stypy_return_type' (line 499)
        stypy_return_type_806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_806)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_analyzed_program_errors'
        return stypy_return_type_806


    @norecursion
    def get_analyzed_program_warnings(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_analyzed_program_warnings'
        module_type_store = module_type_store.open_function_context('get_analyzed_program_warnings', 509, 4, False)
        # Assigning a type to the variable 'self' (line 510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.get_analyzed_program_warnings.__dict__.__setitem__('stypy_localization', localization)
        Stypy.get_analyzed_program_warnings.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.get_analyzed_program_warnings.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.get_analyzed_program_warnings.__dict__.__setitem__('stypy_function_name', 'Stypy.get_analyzed_program_warnings')
        Stypy.get_analyzed_program_warnings.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.get_analyzed_program_warnings.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.get_analyzed_program_warnings.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.get_analyzed_program_warnings.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.get_analyzed_program_warnings.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.get_analyzed_program_warnings.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.get_analyzed_program_warnings.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.get_analyzed_program_warnings', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_analyzed_program_warnings', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_analyzed_program_warnings(...)' code ##################

        str_807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 513, (-1)), 'str', '\n        Get the type warnings of the analyzed Python source file\n        :return:\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 514)
        # Getting the type of 'self' (line 514)
        self_808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 11), 'self')
        # Obtaining the member 'analyzed_program_warnings' of a type (line 514)
        analyzed_program_warnings_809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 11), self_808, 'analyzed_program_warnings')
        # Getting the type of 'None' (line 514)
        None_810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 45), 'None')
        
        (may_be_811, more_types_in_union_812) = may_be_none(analyzed_program_warnings_809, None_810)

        if may_be_811:

            if more_types_in_union_812:
                # Runtime conditional SSA (line 514)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to analyze(...): (line 515)
            # Processing the call keyword arguments (line 515)
            kwargs_815 = {}
            # Getting the type of 'self' (line 515)
            self_813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 12), 'self', False)
            # Obtaining the member 'analyze' of a type (line 515)
            analyze_814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 515, 12), self_813, 'analyze')
            # Calling analyze(args, kwargs) (line 515)
            analyze_call_result_816 = invoke(stypy.reporting.localization.Localization(__file__, 515, 12), analyze_814, *[], **kwargs_815)
            

            if more_types_in_union_812:
                # SSA join for if statement (line 514)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 517)
        self_817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 15), 'self')
        # Obtaining the member 'analyzed_program_warnings' of a type (line 517)
        analyzed_program_warnings_818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 517, 15), self_817, 'analyzed_program_warnings')
        # Assigning a type to the variable 'stypy_return_type' (line 517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 8), 'stypy_return_type', analyzed_program_warnings_818)
        
        # ################# End of 'get_analyzed_program_warnings(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_analyzed_program_warnings' in the type store
        # Getting the type of 'stypy_return_type' (line 509)
        stypy_return_type_819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_819)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_analyzed_program_warnings'
        return stypy_return_type_819


    @norecursion
    def get_last_type_checking_running_time(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_last_type_checking_running_time'
        module_type_store = module_type_store.open_function_context('get_last_type_checking_running_time', 519, 4, False)
        # Assigning a type to the variable 'self' (line 520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 520, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Stypy.get_last_type_checking_running_time.__dict__.__setitem__('stypy_localization', localization)
        Stypy.get_last_type_checking_running_time.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Stypy.get_last_type_checking_running_time.__dict__.__setitem__('stypy_type_store', module_type_store)
        Stypy.get_last_type_checking_running_time.__dict__.__setitem__('stypy_function_name', 'Stypy.get_last_type_checking_running_time')
        Stypy.get_last_type_checking_running_time.__dict__.__setitem__('stypy_param_names_list', [])
        Stypy.get_last_type_checking_running_time.__dict__.__setitem__('stypy_varargs_param_name', None)
        Stypy.get_last_type_checking_running_time.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Stypy.get_last_type_checking_running_time.__dict__.__setitem__('stypy_call_defaults', defaults)
        Stypy.get_last_type_checking_running_time.__dict__.__setitem__('stypy_call_varargs', varargs)
        Stypy.get_last_type_checking_running_time.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Stypy.get_last_type_checking_running_time.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Stypy.get_last_type_checking_running_time', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_last_type_checking_running_time', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_last_type_checking_running_time(...)' code ##################

        str_820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 523, (-1)), 'str', '\n        Get the time spent on the last Python source file analysis\n        :return:\n        ')
        # Getting the type of 'self' (line 524)
        self_821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 15), 'self')
        # Obtaining the member 'tend' of a type (line 524)
        tend_822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 15), self_821, 'tend')
        # Getting the type of 'self' (line 524)
        self_823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 27), 'self')
        # Obtaining the member 'tinit' of a type (line 524)
        tinit_824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 27), self_823, 'tinit')
        # Applying the binary operator '-' (line 524)
        result_sub_825 = python_operator(stypy.reporting.localization.Localization(__file__, 524, 15), '-', tend_822, tinit_824)
        
        # Assigning a type to the variable 'stypy_return_type' (line 524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 8), 'stypy_return_type', result_sub_825)
        
        # ################# End of 'get_last_type_checking_running_time(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_last_type_checking_running_time' in the type store
        # Getting the type of 'stypy_return_type' (line 519)
        stypy_return_type_826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_826)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_last_type_checking_running_time'
        return stypy_return_type_826


# Assigning a type to the variable 'Stypy' (line 46)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 46, 0), 'Stypy', Stypy)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
