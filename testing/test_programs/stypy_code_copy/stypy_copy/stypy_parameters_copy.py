import os

"""
Stypy can generate various files from an existing .py programs, all with its own purpose. Each generated file name
is the same as the original one, but adding a prefix. These are the prefixes added for each file type
"""
type_inference_file_directory_name = ".stypy"
type_inference_file_postfix = "__type_inference"
type_modifier_file_postfix = "__type_modifiers"
type_data_autogenerator_file_postfix = "__type_data_autogenerator"
type_data_file_postfix = "__type_data"
type_annotation_file_postfix = "__type_annotation"
type_rule_file_postfix = "__type_rules"

"""
Helper functions to deal with files, folders and locations of generated programs
"""


def go_to_parent_folder(num_levels, path):
    """
    Ascend up to num_levels folders in the specified path
    """
    for i in range(num_levels):
        path = os.path.dirname(path)

    return path


def __get_derived_file_path(source_file_path, output_file_postfix):
    """
    From a .py file, obtains the path of the corresponding files generated by stypy for various reasons
    """
    dirname = os.path.dirname(source_file_path)
    filename = source_file_path.split("/")[-1].split(".")[0]
    path = dirname + "/" + type_inference_file_directory_name + "/" + filename + output_file_postfix + ".py"

    return path


def get_original_program_from_type_inference_file(ti_file_path):
    """
    Obtain the original file from a type inference file path generated from it
    """
    path = ti_file_path.replace(type_inference_file_postfix, "")
    path = path.replace(TYPE_INFERENCE_PATH, "")
    path = path.replace('\\', '/')

    return path


def get_stypy_type_inference_program_file_path(source_file_path):
    """
    Get the location of the type inference program obtained for a .py file
    """
    return __get_derived_file_path(source_file_path, type_inference_file_postfix)


def get_stypy_type_data_autogenerator_program_file_path(source_file_path):
    """
    Get the location of the type data auto-generation program obtained for a .py file
    These files are only used for code generation testing, they are not really a part of stypy
    """
    return __get_derived_file_path(source_file_path, type_data_autogenerator_file_postfix)


def get_stypy_type_data_file_path(source_file_path):
    """
    Get the location of the type data file obtained for a .py file
    These files are only used for code generation testing, they are not really a part of stypy
    """
    return __get_derived_file_path(source_file_path, type_data_file_postfix)


def get_stypy_type_annotation_file_path(source_file_path):
    """
    Get the location of the type annotated file obtained for a .py file
    These files are only used for code generation testing, they are not really a part of stypy
    """
    return __get_derived_file_path(source_file_path, type_annotation_file_postfix)


"""
Python executable to use
"""
PYTHON_EXE_PATH = "C:/Python27/"
PYTHON_EXE = PYTHON_EXE_PATH + "python.exe"

"""
Root folder of the project, to place the parameters file in any folder easily.
It is relative, so the project can be moved to a new location with ease.
(0 folder levels below this file. DO NOT ALTER FOLDER / FILE STRUCTURE OF THE PROJECT!)
"""
ROOT_PATH = go_to_parent_folder(1, os.path.realpath(__file__)).replace("\\", "/")

"""
Directory to place type inference files
"""
TYPE_INFERENCE_PATH = "/type_inference"

"""
Location of rule files (relative to the ROOT_PATH)
"""
RULE_FILE_PATH = "/python_lib/type_rules/modules/"

"""
Log file data
"""
LOG_PATH = ROOT_PATH + "/log/logfiles/"
ERROR_LOG_FILE = "error.log"
WARNING_LOG_FILE = "warning.log"
INFO_LOG_FILE = "info.log"

"""
Enable coding advices (coding style messages, not really warnings nor errors)
"""
ENABLE_CODING_ADVICES = False
